#!/usr/bin/env ruby
# coding: utf-8
# frozen_string_literal: true

# Description: An opitionated dotfile deployer base on guix home and nix homemanager.

# Features:
# - a dotsignore at the repository root behaves just like git's one,
#   prevents symlinking undesired files/folders to $HOME.
# - Folders are not symlinked but created.

# TODO: Remove faulty early symlinked dotfiles.
# TODO: Accept git commit sha as source to symlink deployment.
# TODO: Read-only symlinks.
# TODO: dotsignore to accept hash-like folder. eg: .config{foo,bar,meh,forevis}

require 'pathname'
require 'find'

# Mirrors, by symlinking, a dotfiles repository to $HOME.
class Dots
  HOME = Pathname.new Dir.home

  attr_reader :root, :home, :target_link

  def initialize(root)
    @root = Pathname.new(root) if root
    @target_link = {}
  end

  # ignore these dotfiles
  def dotignored
    dots = root.join('.dotsignore').read.split "\n"
    dots.append '.dotsignore' # ignore it too, ofc!
    dots.uniq # users may not notice duplicated dotfiles.
  end

  def children?(current)
    dotignored.map { |x| current.to_path.include? root.join(x).to_path }.any?
  end

  # organize listed items in .dotsignore as pathname
  def all_items
    { files: [], folders: [] }.tap do |x|
      Find.find(root) do |item|
        item = Pathname.new item

        next if item == root # skip the root folder itself
        next if children? item

        if item.file?
          x[:files] << item
        else
          x[:folders] << item
        end
      end
    end

    { folders: folders, files: files } # folders will not be a symlink
  end

  # transform origin file absolute path with home as its root instead
  # /a/b/c.tar --> /home/b/c.tar
  def to_home(this)
    origin = this.to_path
    homey = HOME.to_path.concat('/')
    result = origin.gsub(root.to_path, homey)

    Pathname.new result
  end

  # Create folders that contains symlinked files
  def make_folders
    all[:folders].each do |fld|
      folder = to_home fld
      next if folder.exist?

      puts folder
      folder.mkdir
    end
  end

  def files_mirrored
    raise 'not implemented'
  end

  def feed_target_link
    all[:files].each do |target|
      symlink_name = to_home target
      target_link.store(target, symlink_name)
    end
  end

  # Move file from home to a /home/backup/{file}
  # or delete it if the file it is pointing does not exist
  def backup_this(this)
    warn "WARNING: #{this} found! Deleting/Moving it."
    this.delete if this.exist? # TODO: if file exist back/delete up it
  end

  def backup_files
    target_link.each do |target, link_name|
      puts "#{target} ❯ #{link_name}"
      backup_this link_name
    end
  end

  def symlink_files
    target_link.each do |target, link_name|
      puts "#{target} ❯ #{link_name}"
      link_name.make_symlink target # As enumerator yielding folder to symlink
    end
  end

  def deploy
    feed_target_link
    make_folders
    backup_files
    symlink_files
  end

  def info
    puts @root
  end

  def dryrun; end
end

def cli
  OptionParser.new do |opts|
    main = Dots.new(ARGV[1])
    opts.banner = 'Usage: dots [options]'

    opts.on('-s', '--symlink', 'deploy dotfiles symlinking') do
      main.deploy
    end

    opts.on('-d', '--dry-run', 'mimic symlinking deployment') do
      main.dryrun
    end

    opts.on('-i', '--info', 'general information of internals commands') do
      main.info
    end
  end
end

cli.parse! ['--help'] if ARGV.empty?
cli.parse!
