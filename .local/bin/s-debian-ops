#!/usr/bin/env bash

# Debug Options
set -euo pipefail

DEPS=(sudo apt curl python3 go systemctl tee gpasswd)
s-checkdeps "${DEPS[@]}"

_ansible() {
    [[ -x $(command -v ansible) ]] && return

    _install() {
        sudo apt-get install -y ansible
    }

    _addon() {
        # faster ansible vault encryption
        python3 -m pip install cryptography
    }

    _install
    _addon
}

_aws() {
    [[ -x $(command -v aws) ]] && return

    _install() {
        sudo apt-get install -y awscli
    }

    _install
}

_aws_iam_authenticator() {
    [[ -x $(command -v aws-iam-authenticator) ]] && return

    _pre() {
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator -P "$HOME/.local/bin"
    }

    post() {
        chmod +x "$HOME/.local/bin/aws-iam-authenticator"
    }

    _pre
    _post
}

_docker() {
    [[ -x $(command -v docker) ]] && return

    _pre() {
        [[ -f /etc/apt/sources.list.d/docker.list ]] && return

        # uninstall old versions
        # sudo apt-get remove -y docker docker-engine docker.io containerd runc

        # allow apt to use a repository over HTTPS
        sudo apt-get install -y ca-certificates curl gnupg lsb-release

        # Add Dockerâ€™s official GPG key:
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        # set up the stable repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
    }

    _install() {
        sudo apt-get update -y
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose
    }

    _services() {
        sudo systemctl start docker
        sudo systemctl enable docker.service
    }

    _post() {
        sudo groupadd docker
        sudo gpasswd -a "$USER" docker

        sudo systemctl restart docker

        # activate group, for now
        newgrp docker
    }

    # run
    for f in {_pre,_install,_services,_post}; do
        $f
    done
}

_eksclt() {
    [[ -x $(command -v eksctl) ]] && return

    _pre() {
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
    }

    _pre
}

_gcloud() {
    [[ -x $(command -v gcloud) ]] && return

    _pre() {
        [[ -f /etc/apt/sources.list.d/google-cloud-sdk.list ]] && return

        sudo apt-get install -y apt-transport-https ca-certificates gnupg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    }

    _install() {
        sudo apt-get update && sudo apt-get install -y google-cloud-sdk
    }

    for f in {_pre,_install}; do
        $f
    done
}

_gitlab() {
    [[ -x $(command -v gitlab-runner) ]] && return

    _install() {
        sudo apt-get install -y gitlab-runner
    }

    _install
}

_kind() {
    [[ -x $(command -v kind) ]] && return

    _install() {
        GO111MODULE=on go install sigs.k8s.io/kind@v0.12.0
    }

    _install
}

_hashicorp() {
    [[ -x $(command -v terraform) ]] && return

    _pre() {
        [[ -f /etc/apt/sources.list.d/hashicorp.list ]] && return

        wget -qO- https://apt.releases.hashicorp.com/gpg | sudo tee /etc/apt/trusted.gpg.d/terraform.asc
        echo "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com bullseye main" | sudo tee /etc/apt/sources.list.d/hashicorp.list >/dev/null
    }

    _install() {
        sudo apt-get update
        sudo apt-get install -y terraform nomad vagrant vagrant-libvirt
    }

    _pre
    _install
}

_helm() {
    [[ -x $(command -v helm) ]] && return

    _pre() {
        wget -qO- https://baltocdn.com/helm/signing.asc | sudo tee /etc/apt/trusted.gpg.d/heml.asc
        sudo apt-get install apt-transport-https --yes
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
    }

    _install() {
        sudo apt-get install -y helm
    }
}

_minikube() {
    [[ -x $(command -v minikube) ]] && return

    _pre() {
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
    }

    _install() {
        sudo dpkg -i minikube_latest_amd64.deb
    }

    _pre
    _install
}

_kube() {
    [[ -x $(command -v kubectl) ]] && return

    _pre() {
        [[ -f /etc/apt/sources.list.d/kubernetes.list ]] && return

        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl
        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    }

    _install() {
        sudo apt-get install -y kubectl kubelet kubeadmp
    }

    _pre
    _install
}

_jenkins() {
    _pre() {
        curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
            /usr/share/keyrings/jenkins-keyring.asc >/dev/null

        echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
            https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
            /etc/apt/sources.list.d/jenkins.list >/dev/null

    }

    _install() {
        sudo apt-get update
        sudo apt-get install -y fontconfig openjdk-11-jre jenkins
    }

    _pre
    _install
}

_qemu() {
    [[ -x $(command -v qemu-img) ]] && return

    _install() {
        sudo apt-get install -y qemu
    }
    # infra=( qemu qemu-utils qemu-efi qemu-kvm ) # ebtables

    _install
}

_virtualbox() {
    [[ -x $(command -v virtualbox) ]] && return

    _install() {
        sudo apt-get install -y virtualbox
    }

    _install
}

_libvirt() {
    [[ -x $(command -v virt-manager) ]] && return

    _install() {
        sudo apt-get install -y libvirt-daemon-system libvirt-clients libvirt-daemon-system virtinst bridge-utils virt-manager
    }

    _services() {
        sudo systemctl start libvirtd
        sudo systemctl enable libvirtd
    }

    _post() {
        sudo usermod -aG libvirt "$USER"
        sudo usermod -aG kvm "$USER"
    }

    # run
    for func in {_install,_services,_post}; do
        $func
    done
}

_podman() {
    [[ -x $(command -v podman) ]] && return

    _install() {
        sudo apt-get install -y podman
    }

    _services() {
        sudo systemctl enable podman.socket
        sudo systemctl start podman.socket
    }

    _post() {
        # Add a new group called podman so its easier to manage who can run podman w/out sudo
        echo '%podman ALL=(ALL) NOPASSWD: /usr/bin/podman' | sudo tee -a /etc/sudoers.d/podman
    }

    for func in {_install,_services,_post}; do
        $func
    done
}

_podman_compose() {
    [[ -x $(command -v podman-compose) ]] && return

    _install() {
        python3 -m pip install podman-compose --upgrade
    }

    _post() {
        # Docker Compose will use the correct socket.
        export DOCKER_HOST=///run/user/$UID/podman/podman.sock
    }

    _install
}

_security() {
    [[ -x $(command -v gnutls-cli) ]] && return

    local packages command

    command="sudo apt-get install -y"
    packages=(gnutls-bin)

    s-dolist "$command" "${packages[@]}"
}

_network() {
    [[ -x $(command -v tcpdump) ]] && return

    local packages command

    command="sudo apt-get install -y"
    packages=(net-tools iproute2 telnet dnsutils iwd iw wireless-tools
        resolvconf dhcpcd5 netcat-traditional tcpdump)

    s-dolist "$command" "${packages[@]}"
}

_nerdctl() {
    pre() {
        ""
    }

    pre
}

_firewall() {
    _install() {
        sudo apt-get -y install firewalld
    }

    _post() {
        sudo systemctl enable firewalld
        sudo systemctl start firewalld
    }

    _install
    _post
}

# * RUN
main() {
    _ansible
    _aws
    _aws_iam_authenticator
    _docker
    _eksclt
    _firewall
    _gcloud
    _gitlab
    # _helm
    # _qemu
    _hashicorp
    _kind
    _kube
    # _libvirt
    # _minikube
    _network
    _podman
    _podman_compose
    # _virtualbox
}

main
