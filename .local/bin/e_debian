#!/usr/bin/env bash

# Debug Options
set -euo pipefail

DEPS=(sudo apt wget systemctl firewalld timedatectl fc-cache)
e_checkdeps "${DEPS[@]}"

# * DEBIAN

e_echo "Debian GNU/Linux -- The Universal Operating System"

upgrade() {
	e_echo "Upgrading System"

	/usr/bin/sudo /usr/bin/apt update
	/usr/bin/sudo /usr/bin/apt upgrade -y
	/usr/bin/sudo /usr/bin/apt autoremove -y
}

pre() {

	sid() {
		[[ $(grep '^\[multilib\]' /etc/apt/sources.list) == '[multilib]' ]] && return

		# /usr/bin/sudo /usr/bin/sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	}

	multi() {
		e_echo "Enable Multi-Arch"

		/usr/bin/sudo /usr/bin/dpkg --add-architecture i386
	}

	# * RUN
	multi
}

packages() {
	e_echo "Installing system packages"

	essentials=(git ssh curl unzip bash tmux zile lynx stterm)

	system=(zip p7zip p7zip-full recutils lshw at usbutils lsof atool linux-perf time
		entr tree xsel xclip bc htop strace ltrace cpio lhasa lzop
		jq rsync pv texinfo autoconf automake socat ripgrep)

	gui=(lightdm)

	network=(net-tools iproute2 telnet)

	programming=(gawk git-email subversion mercurial direnv libpq-dev editorconfig)

	shell=(bash-completion shellcheck zsh fish)

	editors=(neovim)

	gnu=(gcc make vrms info wget parallel)

	python=(python3-pip)

	ruby=(ruby-dev libssl-dev)

	go=(golang)

	lua=(lua5.4 lua-check) # luarocks

	database=(postgresql postgresql-contrib)

	emacs=(emacs libgccjit-10-dev libwebkit2gtk-4.0-dev)

	lisp=(libfixposix-dev)

	latex=(texlive-latex-recommended texlive-latex-extra texlive-latex-base)

	infra=(podman vagrant qemu qemu-utils qemu-efi qemu-kvm libvirt-clients
		   libvirt-daemon-system virtinst bridge-utils) # ebtables

	fonts=(fonts-hack fonts-dejavu ttf-ancient-fonts fonts-nanum)

	security=(nftables gnutls-bin)

	laptop=(iwd iw wireless-tools laptop-mode-tools libinput-tools acpi
		lm-sensors)

	debian=(build-essential apt-listbugs apt-listchanges reportbug aptitude
		apt-file gdebi)

	wayland=(sway swaybg swaylock foot clipman grimshot xwayland)

	xorg=(xorg awesome feh scrot cheese)

	wmapps=(udiskie ffmpeg zathura aria2 playerctl brightnessctl
		bluez mpv libnotify-bin w3m elinks dunst suckless-tools)

	music=(mpd mpc ncmpcpp)

	books=(pandoc texlive texlive-xetex)

	user=(firefox libreoffice gimp obs-studio xdg-utils imagemagick aspell
		aspell-pt-br telegram-desktop) # falkon kdeconnect

	media=(vorbis-tools gstreamer1.0-plugins-bad gstreamer1.0-plugins-base
		gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly)

	amd=(firmware-linux-nonfree amd64-microcode firmware-amd-graphics
		libgl1-mesa-dri libglx-mesa0 mesa-vulkan-drivers xserver-xorg-video-all
		libglx-mesa0:i386 mesa-vulkan-drivers:i386 libgl1-mesa-dri:i386
		radeontop)

	local command='/usr/bin/sudo /usr/bin/apt install -y'

	enabled=(
		"${essentials[@]}"
		"${system[@]}"
		"${gnu[@]}"
		"${network[@]}"
		"${shell[@]}"
		"${debian[@]}"
		"${gui[@]}"
		"${amd[@]}"
		"${ruby[@]}"
		"${go[@]}"
		"${python[@]}"
		"${lua[@]}"
		"${programming[@]}"
		"${editors[@]}"
		"${emacs[@]}"
		"${wayland[@]}"
		"${xorg[@]}"
		"${music[@]}"
		"${infra[@]}"
		"${fonts[@]}"
		"${security[@]}"
		"${laptop[@]}"
		"${wmapps[@]}"
		"${user[@]}"
		"${media[@]}"
		"${books[@]}")

	for i in "${enabled[@]}"; do
		e_dolist "$command" "$i"
	done

	# builds dep
	/usr/bin/sudo /usr/bin/apt -y build-dep emacs

	e_echo "Done"
}

post() {
	e_echo "Post install"

	/usr/bin/sudo /usr/bin/apt-file update # update Debian database
	/usr/bin/sudo /usr/bin/fc-cache -fv    # cache all system fonts

	awesome() {
		local awe=$HOME/.config/awesome
		mkdir -pv $awe
		cp -pvr /usr/share/awesome/themes/ $awe
	}

	awesome
}

clean() {
	e_echo "Clean up"

	unused=(firefox-esr)

	local command='/usr/bin/sudo /usr/bin/apt remove -y'
	e_dolist "$command" "${unused[@]}"

	purging=(*nvidia*)
	local command='/usr/bin/sudo /usr/bin/apt purge -y'
	e_dolist "$command" "${purging[@]}"
}

services() {
	e_echo "Debian Services"

	_lightdm() {
		sudo systemctl enable lightdm
	}

	_postgres() {
		/usr/bin/sudo /usr/bin/systemctl restart postgresql
	}

	_mpd() {
		/usr/bin/sudo /usr/bin/systemctl disable mpd
	}

	_iwd() {
		/usr/bin/sudo /usr/bin/systemctl enable iwd
		/usr/bin/sudo /usr/bin/systemctl start iwd
	}

	_kdeconnect() {
		/usr/bin/sudo /usr/bin/firewall-cmd --zone=public --permanent --add-port=1714-1764/tcp
		/usr/bin/sudo /usr/bin/firewall-cmd --zone=public --permanent --add-port=1714-1764/udp
		/usr/bin/sudo /usr/bin/systemctl restart firewalld.service
	}

	_timezone() {
		local current_zone
		local desired_zone

		desired_zone='America/Sao_Paulo'
		current_zone=$(/usr/bin/timedatectl | grep 'Time zone' | awk '{print $3}')

		[[ "$current_zone" != "$desired_zone" ]] && /usr/bin/sudo /usr/bin/timedatectl set-timezone America/Sao_Paulo
	}

	_alternatives() {
		# set python to python3
		/usr/bin/sudo update-alternatives --install /usr/bin/python python "$(which python3)" 1
	}

	_infra() {
		/usr/bin/sudo usermod -aG libvirt "$USER"
		/usr/bin/sudo usermod -aG kvm "$USER"
	}

	#postgres
	#kdeconnect
	_infra
	_lightdm
	_mpd
	_alternatives
	_timezone
	_iwd
}

foreign() {
	echo "Non-Debian packages"

	_chrome() {
		wget -P "/tmp" https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
		/usr/bin/sudo /usr/bin/apt install -y "/tmp/google-chrome-stable_current_amd64.deb"
	}

	_virtualbox(){
		wget -P "/tmp" https://download.virtualbox.org/virtualbox/6.1.28/virtualbox-6.1_6.1.28-147628~Debian~bullseye_amd64.deb
	}

	_vagrant() {
		/usr/bin/curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
		/usr/bin/sudo /usr/bin/apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com buster main"

		/usr/bin/sudo /usr/bin/apt install -y software-properties-common
		/usr/bin/sudo /usr/bin/apt update
		/usr/bin/sudo /usr/bin/apt install -y vagrant
	}

	_virtualbox
	_vagrant
	_chrome
}

# * RUN

upgrade
pre
packages
post
clean
services
# foreign

# dpkg -l | egrep -i 'firmware|wifi' | awk '{print $2}'
# firmware-linux-nonfree, firmware-misc-nonfree, firmware-atheros, and firmware-ath9k-htc

sudo apt install -y autoconf bison build-essential curl g++ gcc git libffi-dev libgconf-2-4 libgdbm-dev libncurses5-dev libreadline-dev libreadline-dev
	libsqlite3-dev libssl-dev libxi6 libyaml-dev make sqlite3 xvfb zip zlib1g-dev

curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs
