#!/usr/bin/env bash

# DEBUG OPTIONS
set -euo pipefail

readonly SEP="  "
readonly SEP2=" / "

DEPS=(sensors ping gawk grep sed amixer pactl notify-send)

_distro() {
    local result
    result=$(gawk '{print $1}' /etc/hostname)

    echo -e "\uf05a  GNU / $result"
}

_kernel() {
    local result
    result=$(gawk '{ print substr($3,1,4)}' /proc/version) # uname -r | sed 's/.//5g'

    echo -e "$result"
}

_uptime() {
    result=$(uptime -p | gawk '{ print $2 "d|" $4 "h"}') # uptime -p | awk '{print $2 $3}' | tr -d ','
    echo -e "$result"
}

_volume() {
    local result
    local check

    check="$(pactl list sinks | gawk '/Mute/ {print $2}')"           # pactl list sinks | grep 'Mute' | awk '{print $2}' | tr -d '\n')
    result="$(pactl list sinks | gawk '/Volume: front/ {print $5}')" # pactl list sinks | grep 'Volume: front' | tail -1 | awk '{print $5}'
    # [[ $(pgrep -x "amixer") ]] && result="$(amixer get Master | grep % | awk '{ print substr($5,2,3) }')"
    # [[ $(pgrep -x "pulseaudio") ]]

    [[ $check == *\[yes\]* ]] && printf "\Uf026"
    [[ $check == *no* ]] && printf "%s" "\Uf028 $result"
}

_cpuf() {
    local prevtotal
    local total
    local result

    read -r _ a b c previdle rest </proc/stat
    prevtotal=$((a + b + c + previdle))
    sleep 0.5
    read -r _ a b c idle rest </proc/stat
    total=$((a + b + c + idle))
    result="$((100 * ((total - prevtotal) - (idle - previdle)) / (total - prevtotal)))"

    echo -e "\Uf110 ${result}%"
}

_cput() {
    local result
    result="$(sensors 2>&1 | gawk '/Tctl/ {print substr($2, 2)}')" # sensors 2>&1 | grep Tctl | awk '{print substr($2, 2)}'

    echo -e "\Uf06d ${result}"
}

_memory() {
    local result
    result="$(free -m | gawk 'NR==2 {printf "%dMB\n", $3,$2,$3*100/$2 }')"

    printf "%s" "\Uf18d ${result}"
}

_date() {
    local result
    result="$(date "+%H:%M - %a, %b %d")"

    printf "%s" "\Uf017 ${result}"
}

_battery() {
    local result
    result="$(acpi -b | gawk '{print $4}')"

    printf "%s" "\Uf0e7 ${result}"
}

_gput() {
    local result
    result="$(sensors 2>&1 | gawk '/edge/ {print substr($2, 2)}')" # sensors 2>&1 | grep edge | awk '{print substr($2, 2)}'

    printf "%s" "\Uf11b  $result"
}

_arch-update() {
    local sys
    local check

    sys=$(checkupdates | wc -l)

    [[ "$sys" != "0" ]] && printf "%s" "$sys "
}

_debian-update() {
    local output
    local num=$(($packs | wc - l))
    output=$(aptitude full-upgrade --simulate --assume-yes)

    printf "%s" "Packs: $num"
}

_connection() {
    local result

    result=$(nmcli connection show | gawk 'NR==2 {print $4}')

    if [[ "$result" != '--' ]]; then
        printf "\Uf1eb ON"
    else
        printf "\Uf1eb OFF"
    fi
}

_host() {
    printf "%s" "${HOSTNAME^}"
}

_de() {
    [[ $DESKTOP_SESSION != "gnome" ]] && return

    notify-send "$(_cpuf)$SEP$(_cput)$SEP$(_gput)$SEP$(_memory)$SEP$(_battery)"
}

_cli() {
    echo -e "$(_cpuf)$SEP$(_cput)$SEP$(_gput)$SEP$(_memory)$SEP$(_battery)$SEP$(_date) "
}

_cli

exit
