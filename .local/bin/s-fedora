#!/usr/bin/env bash

# Debug Options
set -euo pipefail

DEPS=(sudo dnf wget systemctl fc-cache)
s-checkdeps "${DEPS[@]}"

s-echo "Fedora"

upgrade() {
	s-echo "Upgrading System"

	sudo dnf update -y
	sudo dnf upgrade -y
}

pre() {
	multi() {
		s-echo "Enable Multi-Arch"

	}

	# * RUN
	multi
}

packages() {
	s-echo "Installing system packages"

	essentials=(git openssh curl unzip bash tmux zile lynx)

	system=(zip p7zip recutils lshw at usbutils lsof atool perf time entr tree
		bc htop strace ltrace cpio lzop libnotify jq rsync pv texinfo
		autoconf automake socat)

	network=(net-tools iproute telnet)

	programming=(gawk git-email subversion mercurial direnv libpq editorconfig)

	shell=(bash-completion ShellCheck zsh fish)

	editors=(emacs vim neovim micro)

	gnu=(gcc make info wget parallel)

	languages=(python3-pip ruby-devel golang guile30 npm nodejs)

	infra=(podman podman-compose vagrant qemu)

	laptop=(acpi lm_sensors)

	gnome=(gnome-tweaks gnome-shell-extension-auto-move-windows gnome-shell-extension-launch-new-instance)

	wmapps=(ffmpeg mpv elinks wl-clipboard)

	books=(pandoc) #  texlive texlive-xetex

	user=(exaile gimp obs-studio xdg-utils ImageMagick aspell vlc
		aspell-pt_BR telegram-desktop calibre gaupol clementine)

	media=(vorbis-tools gstreamer1-plugins-bad-free gstreamer1-plugins-base
		gstreamer1-plugins-good gstreamer1-plugins-ugly)

	local command='sudo dnf install -y'

	enabled=(
		"${essentials[@]}"
		"${system[@]}"
		"${gnu[@]}"
		"${network[@]}"
		"${shell[@]}"
		"${fedora[@]}"
		"${languages[@]}"
		"${programming[@]}"
		"${editors[@]}"
		"${gnome[@]}"
		"${infra[@]}"
		"${laptop[@]}"
		"${wmapps[@]}"
		"${books[@]}"
		"${user[@]}"
		"${media[@]}")

	for i in "${enabled[@]}"; do
		s-dolist "$command" "$i"
	done

	s-echo "Done"
}

post() {
	s-echo "Post install"

	# cache all system fonts
	sudo fc-cache -fv

	# create or update the manual page index caches
	sudo mandb
}

clean() {
	s-echo "Clean up"

	unused=(firefox-esr)

	local command='sudo dnf remove -y'
	s-dolist "$command" "${unused[@]}"

	purging=(*nvidia*)
	local command='sudo dnf purge -y'
	s-dolist "$command" "${purging[@]}"
}

services() {
	s-echo "System Services"

	_podman() {
		sudo systemctl enable podman.socket
		sudo systemctl start podman.socket
		sudo systemctl status podman.socket
	}

	_kdeconnect() {
		sudo firewall-cmd --zone=public --permanent --add-port=1714-1764/tcp
		sudo firewall-cmd --zone=public --permanent --add-port=1714-1764/udp
		sudo systemctl restart firewalld.service
	}

	_libvirt() {
		sudo usermod -aG libvirt "$USER"
		sudo usermod -aG kvm "$USER"
	}
}

foreign() {
	echo "Foreign packages"

	_rpmfusion() {
		sudo dnf install "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
			"https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"
	}

	_virtualbox() { sudo dnf install -y VirtualBox; }

	_docker() {
		sudo dnf -y install dnf-plugins-core
		sudo dnf install docker-ce docker-ce-cli containerd.io

		sudo systemctl start docker
		sudo systemctl enable docker.service

		sudo groupadd docker && sudo gpasswd -a ${USER} docker && sudo systemctl restart docker
	}

	_podman_docker_compose() {
		# Docker Compose will use the correct socket.
		export DOCKER_HOST=///run/user/$UID/podman/podman.sock
	}

	_vscode() {
		sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
		sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

		sudo dnf install -y code
	}

	_aws() {
		sudo dnf install -y awscli
	}

	_terraform() {
		sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
		sudo dnf install -y terraform
	}

	_rust() {
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
	}

	_rust
	_rpmfusion
	_virtualbox
	_aws
	_terraform
	_vscode
}

# * RUN

upgrade
packages
post
foreign
# pre
# clean
#services
