#!/usr/bin/env ruby
# frozen_string_literal: true

# Manage System Volume.
module Volume
  # Volume Main caller
  class Main
    attr_reader :state, :manager
    attr_accessor :info

    def initialize(state)
      @state = state.to_sym if state

      @manager = SoundManager.new(states[@state]).info
    end

    def states
      {
        up: '+',
        down: '-',
        toggle: ''
      }
    end

    # * MODES

    def toggle
      manager.toggle
    end

    def updown
      manager.updown
    end

    def mode
      {
        toggle: toggle,
        up: updown,
        down: updown
      }
    end

    def final_command
      "#{manager.name} #{mode[state]}"
    end

    def run
      return unless %i[up down toggle].include? state

      system final_command
    end
  end
end

# Find available sound manager
class SoundManager
  attr_reader :state

  def initialize(state)
    @state = state
  end

  def which?(executable)
    ENV['PATH'].split(File::PATH_SEPARATOR).any? do |directory|
      File.executable?(File.join(directory, executable.to_s))
    end
  end

  def managers_available
    [Pactl.new(state), Amixer.new, Mixer.new]
  end

  # Sound Manager Information
  def info
    managers_available.first { |manager| which?(manager.name) }
  end

  def running?
    raise 'not implemented.'
  end
end

# pactl - Control a running PulseAudio sound server
class Pactl
  STEP = 3

  attr_accessor :name, :state

  def initialize(state)
    @name = 'pactl'
    @state = state
  end

  def sink
    require 'English'

    output = `set -eu; pactl list sinks`
    raise('pipeline failed') unless $CHILD_STATUS.success?

    output.split('Sink #').find do |sink|
      sink if sink.include? 'State: RUNNING'
    end.split('State').first.strip # sink id is the first letter in the string returned
  end

  def toggle
    "set-sink-mute #{sink} toggle"
  end

  def updown
    "set-sink-volume #{sink} #{state}#{STEP}%"
  end

  def to_s
    "#{name} #{sink} #{state}"
  end
end

# bsd mixer
class Mixer
  def mixer
    {
      name: 'mixer',
      toggle: '',
      updown: "mixer vol #{states[state]}#{STEP}"
    }
  end

  def mixer_toggle
    [mixer[:name], mixer[:toggle]].join(' ')
  end

  def mixer_updown
    [mixer[:name], mixer[:updown]].join(' ')
  end
end

# Command-line ALSA mixer
class Amixer
  def amixer
    {
      name: 'amixer',
      toggle: '-q sset Master toggle',
      updown: "set Master #{STEP}%#{states[state]}"
    }
  end

  def amixer_toggle
    [amixer[:name], amixer[:toggle]].join(' ')
  end

  def amixer_updown
    [amixer[:name], amixer[:updown]].join(' ')
  end
end

class Pipewire
  def info
    {
      name: 'pw-cli',
      args: "s #{pipe-id} Props",
      toggle: '{ mute: false, channelVolumes: [ 1.5, 1.5 ] }',
      updown: '{ mute: false, channelVolumes: [ 1.5, 1.5 ] }'
    }
  end

  def pipe-id; end

  def pipe-toggle
    [info[:name], info[:toggle]].join(' ')
  end

  def pipe-updown
    [info[:name], info[:updown]].join(' ')
  end
end

# * RUN
Volume::Main.new(ARGV.first).run
