#!/usr/bin/env sh

# * UBUNTU

e-ubuntu-packages()
{
    essentials=(git p7zip p7zip-full zip unzip zile neovim bash tmux)

    languages=(ruby-full python3-pip python3-venv shellcheck zenity bash-completion m4 libtool libtool-bin make default-jdk clang clangd lldb cmake) #  guile-2.2 guile-g-wrap guile-library guile-2.2-doc

    de_packages=(syncthing libreoffice calibre inkscape kdenlive cheese deluge thunderbird obs-studio vlc steam inxi fish imagemagick pandoc screenfetch lm-sensors aspell)

    codecs=(ffmpeg vorbis-tools gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly)

    virtualization=(qemu qemu-system-x86 qemu-system-gui qemu-utils qemu-efi qemu-kvm virt-manager ovmf libvirt-clients libvirt-daemon-system libvirt-dev libvirt0 virt-manager )

    wine=(wine wine32 winetricks)

    toolings=(lshw at usbutils lsof time curl entr tree git xsel xclip exuberant-ctags fontconfig libfreetype6 subversion bc gdebi htop strace ltrace ssh cpio lhasa lzop atool wmctrl poppler-utils brz mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh tmux zsh pv zile vrms info wget stow screen gimp bash parted texinfo gcc gdb make build-essential autoconf automake gnutls-bin bash-doc gcc-doc gdb-doc gdbserver wget2 parallel nftables ripgrep emacs) #  console-data net-tools iproute2 linux-tools-common linux-tools-generic

    fonts=(fonts-firacode fonts-dejavu ttf-ancient-fonts fonts-nanum)

    ruby=(autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev) # gcc

    laptop=(libiw-dev)
    rails=(python2)

    sudo apt update

    echo "Instalando pacotes."
    local command='sudo apt install -y'

    e-foreach "$command" "${essentials[@]}"
    e-foreach "$command" "${languages[@]}"
    e-foreach "$command" "${de_packages[@]}"
    e-foreach "$command" "${wm_packages[@]}"
    e-foreach "$command" "${codecs[@]}"
    e-foreach "$command" "${virtualization[@]}"
    e-foreach "$command" "${wine[@]}"
    e-foreach "$command" "${toolings[@]}"
    e-foreach "$command" "${fonts[@]}"; sudo fc-cache -fv
    e-foreach "$command" "${ruby[@]}"
    e-foreach "$command" "${laptop[@]}"
    e-foreach "$command" "${rails[@]}"
}

e-ubuntu-upgrade()
{
    echo "-- Updating System"
    sudo apt -y update && sudo apt -y upgrade

    sudo apt -y autoremove
}

e-ubuntu-services()
{
    sudo systemctl disable mpd.service
    sudo systemctl disable mpd.socket

    echo "-- Disabling & Removing unnecessary defaults setttings/packages"
    # no graphical display
    sudo systemctl set-default multi-user.target
}

e-ubuntu()
{
    e-ubuntu-upgrade
    e-ubuntu-packages
    e-ubuntu-services
    e-ubuntu-upgrade
}

# * DEBIAN

e-debian-upgrade()
{
    echo "-- Atualizando Sistema"
    sudo apt update && sudo apt upgrade

    sudo apt autoremove
}

e-debian-packages ()
{
    essentials=(git p7zip p7zip-full zip unzip util-linux alsa-utils network-manager bash tmux konsole zile)

    languages=(shellcheck zenity libpq-dev bash-completion python3-pip postgresql sqlite3 libsqlite3-dev lua5.4 luarocks lua-check puppet)

    user_packages=(emacs firefox libreoffice elisa kdeconnect calibre inkscape screenkey kdenlive ktorrent cheese gimp obs-studio kate syncthing mpv libnotify-bin imagemagick pandoc screenfetch lm-sensors aspell aspell-pt-br)

    media=(ffmpeg pulseaudio pulseaudio-utils vorbis-tools gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly)

    virtualization=(qemu qemu-system-gui qemu-utils qemu-efi qemu-kvm virt-manager ovmf) # qemu-system-x86

    wine=(wine winetricks wine32)

    fonts=(fonts-firacode ttf-ancient-fonts fonts-nanum fonts-freefont-ttf fonts-dejavu)

    system_tools=(lshw at usbutils lsof time net-tools iproute2 curl console-data entr tree git xsel xclip exuberant-ctags fontconfig libfreetype6 subversion bc gdebi htop strace ltrace ssh cpio lhasa lzop atool wmctrl poppler-utils linux-perf mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv wget2 parallel locate info wget stow screen neovim zsh parted texinfo gcc gdb make build-essential autoconf automake gnutls-bin bash-doc gcc-doc gdb-doc gdbserver nftables firewalld firewall-config unrar rar ripgrep socat flatpak fish vrms fzf)

    ruby_tools=(libssl-dev libgdbm-dev)

    emacs_deps=(libjansson-dev libbrotli-dev libwebkit2gtk-4.0-dev libpng-dev zlib1g-dev libpoppler-glib-dev ibpoppler-private-dev ghostscript mupdf-tools poppler-utils texlive-binaries unoconv djvulibre-bin ncurses-dev texlive-latex-base texlive-fonts-recommended  texlive-latex-extra uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync)

    misc_deps=(build-essential libreadline-dev libfixposix-dev gconf2) # luarocks lisp megasyn

    security=(gnutls-bin)

    laptop=(iw wireless-tools libiw-dev laptop-mode-tools i965-va-driver vainfo libvdpau-va-gl1 libinput-tools acpi acpid) # apmd pbbuttonsd pmud

    debian_internals=(apt-listbugs apt-listchanges reportbug aptitude apt-file)

    echo "-- Debian Packages"

    echo "-- Habilita Multi-Arch"
    sudo dpkg --add-architecture i386

    echo "Instalando pacotes."
    local command='sudo apt install -y'

    e-foreach "$command" "${essentials[@]}"
    # e-foreach "$command" "${wm[@]}"
    e-foreach "$command" "${languages[@]}"
    e-foreach "$command" "${system_tools[@]}"
    e-foreach "$command" "${user_packages[@]}"
    e-foreach "$command" "${media[@]}"
    e-foreach "$command" "${virtualization[@]}"
    e-foreach "$command" "${wine[@]}"
    e-foreach "$command" "${fonts[@]}"; sudo fc-cache -fv
    e-foreach "$command" "${ruby_tools[@]}"
    e-foreach "$command" "${emacs_deps[@]}"; sudo apt -y build-dep emacs
    e-foreach "$command" "${misc_deps[@]}"
    e-foreach "$command" "${security[@]}"
    e-foreach "$command" "${laptop[@]}"
    e-foreach "$command" "${debian_internals[@]}"; sudo apt-file update # update Debian database

    echo "Done"
}

e-debian-services()
{
    echo "systemctl"
    sudo systemctl disable mpd.service
    sudo systemctl disable mpd.socket
}

e-debian-foreign()
{
    if [ ! $(command -v google-chrome) ]; then
	cd ${HOME}
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

	sudo apt install -y ${HOME}/google-chrome-stable_current_amd64.deb
	sudo apt update
    fi

    if [ ! $(command -v code) ]; then
	cd ${HOME}
	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	sudo apt-get install apt-transport-https
	sudo apt-get update
	sudo apt install -y code
    fi

    if [ -x "$(command -v pgadmin)" ]; then
	# Install the public key for the repository (if not done previously):
	curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

	# Create the repository configuration file:
	sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/buster pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

	# Install for both desktop and web modes:
	sudo apt install pgadmin4 pgadmin4-desktop pgadmin4-web

	# Configure the webserver, if you installed pgadmin4-web:
	python -m pip install --user flask
	sudo /usr/pgadmin4/bin/setup-web.sh
    fi
}

e-debian()
{
    e-debian-upgrade
    e-debian-packages
    e-debian-services
    e-debian-foreign
}

# * ARCH LINUX

e-manjaro-upgrade()
{
    echo "-- Atualizando Sistema" sudo pacman -Syy && sudo pacman -Syu
}

e-manjaro-packages () { echo "-- Debian Packages"

    essentials=(base-devel coreutils wget git p7zip zip unzip util-linux bash tmux zile)

    languages=(gcc clang postgresql sqlite3 postgresql-libs shellcheck zenity bash-completion python-pip)

    user_packages=(emacs firefox libreoffice kdeconnect calibre inkscape screenkey kdenlive cheese deluge gimp obs-studio gnome-keyring vlc kate syncthing steam imagemagick pandoc xdg-utils screenfetch lm_sensors aspell aspell-en  mpv)

    media=(ffmpeg vorbis-tools gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good  gst-plugins-ugly)

    virtualization=(qemu qemu-system-gui qemu-utils qemu-efi qemu-kvm virt-manager ovmf) # qemu-system-x86

    wine=(wine winetricks)

    fonts=(ttf-fira-code gnu-free-fonts ttf-dejavu) # ttf-ancient-fonts fonts-nanum

    system_tools=(lshw at usbutils lsof time net-tools iproute2 curl entr tree git xsel xclip ctags fontconfig
		  freetype2 subversion bc htop strace ltrace openssh cpio lhasa lzop atool wmctrl poppler
		  perf mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv
		  parallel findutils wget stow screen neovim zsh parted texinfo gcc gdb make autoconf
		  automake gnutls gdb nftables firewalld unrar ripgrep socat fish)  # console-data

    emacs_deps=(libjansson-dev libbrotli-dev libwebkit2gtk-4.0-dev libpng-dev zlib1g-dev libpoppler-glib-dev
		libpoppler-private-dev ghostscript mupdf-tools
		poppler-utils texlive-binaries unoconv djvulibre-bin ncurses-dev
		texlive-latex-base texlive-fonts-recommended  texlive-latex-extra
		uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev
		libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config
		libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync)

    laptop=(iw wireless_tools libinput-gestures acpi acpid) # apmd pbbuttonsd pmud libiw-dev laptop-mode-tools

    local command='sudo pacman -S --noconfirm'

    e-foreach "$command" "${essentials[@]}"
    e-foreach "$command" "${languages[@]}"
    e-foreach "$command" "${devops[@]}"
    e-foreach "$command" "${wm_packges[@]}"
    e-foreach "$command" "${user_packages[@]}"
    e-foreach "$command" "${media[@]}"
    e-foreach "$command" "${virtualization[@]}"
    e-foreach "$command" "${wine[@]}"
    e-foreach "$command" "${fonts[@]}"; sudo fc-cache -fv
    e-foreach "$command" "${ruby_tools[@]}"
    # e-foreach "$command" "${emacs_deps[@]}"
    # e-foreach "$command" "${misc_deps[@]}"
    e-foreach "$command" "${laptop[@]}"
}

e-manjaro-services()
{
    echo "systemctl"
    sudo systemctl disable mpd.service
    sudo systemctl disable mpd.socket
}

e-manjaro-foreign()
{
    if [ ! $(command -v google-chrome) ]; then
	cd ${HOME}
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

	sudo apt install -y ${HOME}/google-chrome-stable_current_amd64.deb
	sudo apt update
    fi

    if [ ! $(command -v code) ]; then
	cd ${HOME}
	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	sudo apt-get install apt-transport-https
	sudo apt-get update
	sudo apt install -y code
    fi

    if [ -x "$(command -v pgadmin)" ]; then
	# Install the public key for the repository (if not done previously):
	curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

	# Create the repository configuration file:
	sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/buster pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

	# Install for both desktop and web modes:
	sudo apt install pgadmin4 pgadmin4-desktop pgadmin4-web

	# Configure the webserver, if you installed pgadmin4-web:
	python -m pip install --user flask
	sudo /usr/pgadmin4/bin/setup-web.sh
    fi
}

e-manjaro()
{
    e-manjaro-upgrade
    e-manjaro-packages
    e-manjaro-services
    # e-manjaro-foreign
}

# * FEDORA

e-fedora ()
{
    echo  "-- Fedora - Installing System Packages"

    echo "-- Updating System"
    sudo dnf upgrade

    echo "-- Essential System packages"
    sudo dnf install -y git p7zip p7zip-plugins zip unzip util-linux  \
	 alsa-utils NetworkManager bash tmux zile konsole

    echo  "-- Programming Languages"
    sudo dnf install -y ruby ruby-devel npm nodejs python3-devel lua luarocks \
	  ShellCheck zenity bash-completion clang clang-tools-extra lldb cmake automake m4 \
	  libtool make # mysql automake python3-pip

    echo  "-- Windows Managers Base"
    sudo dnf install -y xorg-x11-server-Xorg xorg-x11-server-common \
	 xorg-x11-xinit xorg-x11-drv-intel xorg-x11-drv-synaptics \
	 xorg-x11-drv-synaptics-legacy dbus-x11 xorg-x11-drv-intel awesome

    echo  "-- Windows Managers Software"
    sudo dnf install -y dunst maim slock xdotool udiskie network-manager-applet \
	 lxpolkit xdg-utils dmenu feh xbacklight xautolock openssh-askpass \
	  xprop screenfetch
    #  screenkey gconf

    echo  "-- Desktop Environments Software"
    sudo dnf install -y firefox aria2 cheese kde-connect ImageMagick \
	 pandoc libreoffice calibre inkscape krita atril liveusb-creator perl-File-MimeInfo \
	 powerline-fonts thunderbird aspell aspell-en lm_sensors syncthing

    echo  "-- Codecs"
    sudo dnf install -y pulseaudio pulseaudio-utils vorbis-tools gstreamer1-devel \
	 gstreamer1-plugins-base-tools gstreamer1-plugins-base-devel \
	 gstreamer1-plugins-good gstreamer1-plugins-good-extras \
	 gstreamer1-plugins-bad-free-devel gstreamer1-plugins-bad-free-extras \
	 gstreamer1-plugins-bad-free # gstreamer1-devel-docs gstreamer1-plugins-base-devel-docs

    echo  "-- Emulators & Virtualization"
    sudo dnf install -y qemu qemu-system-x86 qemu-kvm virt-manager edk2-ovmf \
	 virt-manager wine

    echo  "-- System Toolings"
    sudo dnf install -y lshw at usbutils lsof time net-tools iproute curl \
	 entr ntfs-3g tree git xsel xclip ctags fontconfig freetype subversion \
	 bc htop strace ltrace openssh cpio lzop atool wmctrl poppler-utils \
	 perf mercurial sysstat jq dialog ncdu ripgrep nnn fzf rsync bat \
	 rclone xonsh tmux zsh fish pv emacs zile info wget stow screen gimp \
	 gcc gcc-c++ gdb make guile22 make autoconf texinfo firewall-config neovim
    # console-data xdg-utils lhasa fzy guile-lib brz

    echo "-- Fontes"
    sudo dnf install -y google-noto-emoji-fonts google-noto-sans-fonts google-droid-sans-mono-fonts
    # ttf-ancient-fonts dejavu-fonts-common

    # STOPED HERE
    echo  "-- Dependecies"
    sudo dnf builddep emacs

    echo 'Laptop tool & Wifi'
    sudo dnf install -y iw wireless-tools libva-utils acpi brightnessctl

    echo  "-- Final preparations: clean & tidy up system"
    sudo dnf autoremove

    # RPM FUSION
    if [ ! -x "$(command -v mpv)" ]; then
	sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
	sudo dnf install https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

	sudo dnf install mpv mpd ffmpeg mpc ncmpc ncmpcpp steam
    fi

    if [ ! -x "$(command -v code)" ]; then
	sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
	sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

	sudo dnf check-update
	sudo dnf install code
    fi

    sudo systemctl disable mpd.service
    sudo systemctl disable mpd.socket

    echo  "-- DONE"
}


# * NIXOS
# Descricao: Distro Pacotes

e-nixos-packages ()
{
    echo "-- NixOS Packages"

    languages=(ruby lua luarocks python3 postgresql sqlite3 zenity bash-completion)
    languages_nixos=(nixos.shellcheck nixos.lua53Packages.luacheck)

    wm_packages=(network-manager-applet aria2 dunst maim udiskie unclutter lxqt-openssh-askpass mpv libnotify
		 dmenu imagemagick pandoc xdg-utils lm-sensors aspell mpd mpc ncmpc ncmpcpp wofi rofi ffmpeg
		 vorbis-tools)
    wm_packages_nixos=(nixos.xfce.xfce4-clipman-plugin nixos.perl530Packages.FileMimeInfo nixos.screenfetch nixos.aspellDicts.en nixos.aspellDicts.br)

    user_packages=(emacs firefox libreoffice kdeconnect calibre inkscape screenkey kdenlive cheese gimp obs-studio
		    vlc kate syncthing steam)
    user_packages_nixos=(nixos.deluge nixos.gnome3.gnome-keyring)

    virtualization=(qemu aqemu qemu-utils virt-manager OVMF)
    virtualization=(nixos.qemu_kvm)

    wine=(wine winetricks)

    gnu=(gnutls gnused gdb texinfo autoconf parallel findutils stow screen automake)
    gnu_nixos=(nixos.xsel)

    system_tools=(lshw at usbutils lsof time net-tools iproute2 curl entr tree git xclip ctags fontconfig
		  subversion bc htop strace ltrace openssh cpio lhasa lzop atool wmctrl
		  perf-tools mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv
		  neovim zsh unrar ripgrep socat fish)
    system_tools=(nixos.poppler)

    ruby_tools=(ruby)

    laptop=(brightnessctl tlp iw libinput-gestures acpi acpid)
    laptop_nixos=(nixos.wirelesstools)

    local command='nix-env -i'
    local command_nixos='nix-env --installi -A'

    e-foreach "$command" "${essentials[@]}"
    e-foreach "$command" "${wm[@]}"
    e-foreach "$command" "${languages[@]}"
    e-foreach "$command" "${devops[@]}"
    e-foreach "$command" "${wm_packges[@]}"
    e-foreach "$command" "${user_packages[@]}"
    e-foreach "$command" "${media[@]}"
    e-foreach "$command" "${virtualization[@]}"
    e-foreach "$command" "${wine[@]}"
    e-foreach "$command" "${fonts[@]}"; sudo fc-cache -fv
    e-foreach "$command" "${ruby_tools[@]}"
    e-foreach "$command" "${emacs_deps[@]}"
    # e-foreach "$command" "${misc_deps[@]}"
    e-foreach "$command" "${laptop[@]}"

    echo "-- Preparacoes finais: limpando e arrumando o sistema"
    sudo apt -y autoremove

    echo "Done"
}

e-nixos-services()
{
    echo "systemctl"
    sudo systemctl disable mpd.service
    sudo systemctl disable mpd.socket
}

e-nixos-foreign()
{
    if [ ! $(command -v google-chrome) ]; then
	cd ${HOME}
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

	sudo apt install -y ${HOME}/google-chrome-stable_current_amd64.deb
	sudo apt update
    fi

    if [ ! $(command -v code) ]; then
	cd ${HOME}
	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	sudo apt-get install apt-transport-https
	sudo apt-get update
	sudo apt install -y code
    fi

    if [ -x "$(command -v pgadmin)" ]; then
	# Install the public key for the repository (if not done previously):
	curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

	# Create the repository configuration file:
	sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/buster pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

	# Install for both desktop and web modes:
	sudo apt install pgadmin4 pgadmin4-desktop pgadmin4-web

	# Configure the webserver, if you installed pgadmin4-web:
	python -m pip install --user flask
	sudo /usr/pgadmin4/bin/setup-web.sh
    fi
}

e-nixos-upgrade()
{
    echo "-- Atualizando Sistema"
    nix-env --upgrade
}

e-nixos()
{
    e-nixos-packages
    e-nixos-services
    e-nixos-foreign
    e-nixos-upgrade
}


e-distro()
{
    [[ $(command -v apt) ]] && e-debian
    [[ $(command -v dnf) ]] && e-fedora
}

e-prepara()
{
    [[ ! -x ${HOME}/.ssh/id_rsa.pub ]] && e-ssh

    e-binaries

    # Package version manager
    e-rbenv
    e-nvm
}

e-update()
{
    e-gem
    e-pip
    e-vscode
    e-npm

    [[ $(command -v apt) ]] && (sudo apt update && sudo apt upgrade)
}
