#+TILE: Emacs Lisp Programming Language - Study Annotations

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progress][Progress]]
  - [[#books][Books]]
  - [[#sloc][SLOC]]
- [[#features][Features]]
  - [[#types][Types]]
  - [[#sequences][Sequences]]
  - [[#cons-cell][Cons Cell]]
  - [[#terms][Terms]]
- [[#resources][Resources]]
- [[#important-commands][Important Commands]]
- [[#regexp][RegExp]]
- [[#packages-brainstorm][Packages Brainstorm]]
  - [[#exwm-notify-dbus-notification-as-tool-box][EXWM notify dbus notification as tool-box]]
  - [[#exwm-status-bar][EXWM status bar]]
  - [[#ffmpeg-trim-audio][ffmpeg: trim audio]]
  - [[#ereader-fix-toc-add-feature-n-jump-to-next-head][ereader: fix toc, add feature "n" jump to next head]]
  - [[#packageel-functional---add-fallback-pack-per-version][package.el functional - Add fallback, pack per version...]]
  - [[#ido-everywhere---for-real][ido-everywhere - for real]]
  - [[#ido-quick-help--similar-to-company-quick-help][ido-quick-help > similar to company-quick-help]]
  - [[#echo-box--an-eldoc-box-for-echo-messages-to-pop-up-box][echo-box > an eldoc-box for echo *messages* to pop up box]]
  - [[#emacs-interface-with-system-packages-as-emmsvc][Emacs Interface with system packages as emms,vc...]]
  - [[#emacs-replace-system-packages-as-elfeed-nov][Emacs Replace system packages as elfeed, nov...]]
  - [[#org-mode-packages-ideas][Org mode packages ideas]]
- [[#packages][Packages]]
  - [[#exwm][Exwm]]
- [[#to-read][To read]]
:END:
* Progress
** Books
| Books        | Cap   | @                     | late | revision |
|--------------+-------+-----------------------+------+----------|
| Emacs Lisp   | Lists | 5.8 Association Lists |      |          |
| Emacs Manual |       |                       |      |          |

** SLOC
   | Source Code | folder      | file         | @ |
   |-------------+-------------+--------------+---|
   | emacs       | lisp/eshell | esh-alias.el |   |
   | use-package |             |              |   |
   |             |             |              |   |

* Features
** Types
*** Integer
    - fixnums
    - bignums

**** predicate: bignums / fixnums
     #+begin_src elisp
     (prin1 most-negative-fixnum)
     (prin1 most-positive-fixnum)

     (fixnump 0)
     (bignump 0)
     #+end_src

**** compare: eql or =
     #+begin_src elisp
     (eql 0 0)
     (= 0 0)
     #+end_src

*** Float
*** Characters
- characters is a question mark followed by the character
#+begin_src elisp
?B
?A
?r
?R

;; escape sequences,
?\#
?\\

;; control-g, backspace, tab, newline, vertical tab, formfeed, space, return, del, and escape as
?\a   ?\b   ?\t   ?\n   ?\v   ?\f   ?\s   ?\r   ?\d ?\e

;; Control-Character Syntax
?\C-i   ?\C-?

;; Meta-Character
?\M-\C-b
#+end_src
*** Buffer
    - local keymap
    - local variables
    - syntax table
    - overlays
    - text proprierties

    #+begin_src elisp
    (current-buffer)

    #+end_src
*** Window
    - describes the portion of the terminal screen that Emacs uses to display a buffer
    - has one associated buffer
    - selected window
    - belongs to one and only one frame.
    -

      #+begin_src elisp
      (selected-window)

      #+end_src

*** Frame
    - screen area that contains one or more Emacs windows
    -

    #+begin_src elisp

    #+end_src
*** Terminal
    -  device capable of displaying one or more Emacs frames

    #+begin_src elisp
    (get-device-terminal nil)

    #+end_src
*** Marker
    - denotes a position in a specific buffer.
*** Association List
    - Can be used as stack, cause it easy to add items in the front
    -
*** Primitive
    #+begin_src elisp
    (symbol-function 'car) ;; ⇒ #<subr car>
    (subrp (symbol-function 'car)) ;; ⇒ t

    #+end_src

    #+RESULTS:
    : t
** Sequences
*** Lists
   - sequence of zero or more elements
   - can insert or delete elements in a list without copying the whole list.
   - built up from cons cells
   - series of cons cells chained together
**** Circular List
    - cons cell’s cdr point to one of the previous cons cells in the list
**** Dotted List
    - last cons cell is some value other than nil
    -
    #+begin_src elisp
    (consp)
    (atom)
    (listp)
    #+end_src
*** Arrays
** Cons Cell
   - represents an ordered pair
   - car slot:
   - cdr slot: refers to the following cons cell
   - the cdr of the last cons cell in a list is *nil*
   - proper list

** Terms
   |       |                 |
   |-------+-----------------|
   | point | cursor position |
   |       |                 |

* Resources
  - Development Group: https://lists.gnu.org/archive/html/emacs-devel/
* Important Commands
  | Command                                       | Description                                                                                                                                           |
  |-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------|
  | dired-mark-extension                          | Mark all files with a certain extension for use in later commands.                                                                                    |
  | check-parens                                  | Check for unbalanced parentheses in the current buffer.                                                                                               |
  | ffap                                          | find file at point                                                                                                                                    |
  | ruler-mode                                    | (you can adjust the margins on the fly) neat.                                                                                                         |
  | skeletons                                     | the emacs built-in answer to yasnippets. The cool thing is they have a global "skeleton" and a mode specific.                                         |
  | org                                           | Org has a built in context mode (setq org-use-speed-commands t) where if you are on the first star certain things like n and p will navigate headers. |
  | C-u C-x                                       | ( executes the last macro and lets you put in more input. Extremely useful for when I forget to type C-n or whatever to link the macro.               |
  | redshank                                      |                                                                                                                                                       |
  | elint                                         |                                                                                                                                                       |
  | elp                                           |                                                                                                                                                       |
  | ert                                           |                                                                                                                                                       |
  | set-selective-display                         |                                                                                                                                                       |
  | hideshow                                      | folding sections                                                                                                                                      |
  | occur                                         |                                                                                                                                                       |
  | reveal-mode                                   |                                                                                                                                                       |
  | substitute-in-file-name                       |                                                                                                                                                       |
  | expand-file-name                              |                                                                                                                                                       |
  | string-match                                  |                                                                                                                                                       |
  | list-display-colors                           |                                                                                                                                                       |
  | read-file-name                                |                                                                                                                                                       |
  | read-directory-name                           | Read directory name, prompting with PROMPT and completing in directory DIR.                                                                           |
  | custom-reevaluate-setting                     | Reset the value of SYMBOL by re-evaluating its saved or standard value.                                                                               |
  | (info "(elisp) key binding conventions")      |                                                                                                                                                       |
  | M-x apropos RET print\                        | insert\                                                                                                                                               |
  | Compile el files conflict: find -name "*.elc" | xargs rm                                                                                                                                              |
  | var: system-configuration-options             | emacs enabled configure options                                                                                                                       |
  | url-hexify-string                             |                                                                                                                                                       |
  | artist-mode                                   | painting in emacs                                                                                                                                     |

* RegExp
  | regexp           | desc                          |
  |------------------+-------------------------------|
  | \(\<\w+-?\w+\>\) | match any "word-word" pattern |

* Packages Brainstorm
** TODO EXWM notify dbus notification as tool-box
** TODO EXWM status bar
   #+begin_src emacs-lisp
   (defun my-setup-header-line-format ()
     "Hide header line if required."
     (set-window-parameter (next-window) 'header-line-format
			   (unless (window-at-side-p (next-window) 'top)
			     'none)))

   (add-hook 'exwm-update-class-hook #'my-setup-header-line-format)

   (set-face-attribute 'header-line nil
		       :background "#000000"
		       :foreground "#cccccc"
		       :height 100)

   ;; See https://github.com/TatriX/good-line
   (defun good-line-format (left right)
     "Return a string of `window-width' length containing LEFT and RIGHT, aligned respectively."
     (let ((reserve (length right)))
       (when (and (display-graphic-p) (eq 'right (get-scroll-bar-mode)))
	 (setq reserve (- reserve 3)))
       (concat
	left
	" "
	(propertize  " "
		     'display `((space :align-to (- (+ right right-fringe right-margin) ,(+ reserve 0)))))
	right)))

   (setq display-time-default-load-average nil)
   (setq display-time-interval 1)
   (setq display-time-format "%a %d/%m/%Y %H:%M:%S")
   (display-time-mode 1)

   (setq-default header-line-format
		 '(:eval (good-line-format
			  ;; Left
			  (when
			      (and (window-at-side-p nil 'top)
				   (window-at-side-p nil 'left))
			    (format " [%s]" exwm-workspace-current-index))
			  ;; Right
			  (when (and (window-at-side-p nil 'top)
				     (window-at-side-p nil 'right))
			    (format "CPU %s | MEM %s |%s| %s"
				    (let ((cpu (format "%02d%%%%" my-cpu-usage)))
				      (if (> my-cpu-usage 75)
					  (propertize cpu 'font-lock-face '(:foreground "#ff2222"))
					cpu))
				    (let* ((used (car my-mem-usage))
					   (total (cdr my-mem-usage))
					   (mem (format "%.2f/%.2f"  used total)))
				      (if (> (/ used total) 0.75)
					  (propertize mem 'font-lock-face '(:foreground "#ff2222"))
					mem))
				    telega-mode-line-string
				    display-time-string)))))

   ;; Install "systat" package via yor distro package manager
   (defvar my-cpu-usage 0
     "Current CPU usage percent.")

   (defun my-start-cpu-usage-process ()
     "Start `mstat' process updating `my-cpu-usage' variable."
     (when-let ((old-process (get-process "mpstat")))
       (kill-process old-process))
     (make-process :name "mpstat"
		   :command '("mpstat" "2")
		   :connection-type 'pipe
		   :filter (lambda (process output)
			     (let* ((last-column (car (last (split-string output))))
				    (idle (cl-parse-integer last-column :junk-allowed t)))
			       (when idle
				 (setq my-cpu-usage (- 100 idle)))))))


   (my-start-cpu-usage-process)

   (defvar my-mem-usage '(0 . 0)
     "Current MEM usage in GB (used . free).")

   (defun my-start-mem-usage-process ()
     "Start `free' process updating `my-cpu-usage' variable."
     (when-let ((old-process (get-process "free")))
       (kill-process old-process))
     (make-process :name "free"
		   :command '("free" "--mebi" "-s" "2")
		   :connection-type 'pipe
		   :filter (lambda (process output)
			     (let ((columns (split-string output)))
			       (let ((total (string-to-number (nth 7 columns)))
				     (used (string-to-number (nth 8 columns)))
				     (shared (string-to-number (nth 10 columns))))
				 (setq my-mem-usage (cons (/ (+ used shared) 1024.0)
							  (/ total 1024.0))))))))

   (my-start-mem-usage-process)

   (add-hook 'window-configuration-change-hook #'my-setup-header-line-format)


   ;; X Windows Names
   ;; (defun exwm-rename-buffer-to-title ()
   ;;   (exwm-workspace-rename-buffer)
   ;;   (add-hook 'exwm-update-title-hook 'exwm-rename-buffer-to-title)
   #+end_src
** TODO ffmpeg: trim audio
** TODO ereader: fix toc, add feature "n" jump to next head
** TODO package.el functional - Add fallback, pack per version...
** TODO ido-everywhere - for real
*** TODO ido-popup > ido as completion similar to company but using all available ido packages as fuzzy match(flx)
** TODO ido-quick-help > similar to company-quick-help
** TODO echo-box > an eldoc-box for echo **messages** to pop up box
** TODO Emacs Interface with system packages as emms,vc...
*** TODO vc-mode: Improve/Modernize - a real alternative to Magit
**** vc-mode: remove pass-sh
*** TODO Emacs default PDF viewer fix & add TOC discover feature
*** FFmpeg
*** kdeconnect
** TODO Emacs Replace system packages as elfeed, nov...
*** LOWriter's .odt files: Editing from Emacs
** TODO Org mode packages ideas
*** TODO Org package similar to Google docs collaborative: real time comments(using erc), save comments, pop-up box(eldoc-box) as we hover up comments
*** TODO epub-to-org: converting epubs to org package and more: reading progress, comments, TODO, thumbnails, agenda integration
*** TODO #+BEGIN_SRC: prettify it for better readibility
*** TODO org-mode: #+BEGIN_SRC: heading property that state every code under this parent heading are elisp code, should be tangled...
* Packages
** Exwm
*** Desktop Entry (/usr/share/xsessions/exwm.desktop)
    #+begin_src conf
    [Desktop Entry]
    Name=EXWM
    Comment=Emacs X11 Window Manager
    Exec=emacs
    Type=Application
    X-LightDM-DesktopName=exwm
    DesktopNames=EXWM
    #+end_src

* To read
  https://youtu.be/9i_9hse_Y08 - How to Cut Emacs Start Up Time in Half! - Emacs From Scratch #12
