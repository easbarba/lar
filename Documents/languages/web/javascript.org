#+TITLE: Javascript

* Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
    - [[#skills][SKills]]
  - [[#features][Features]]
    - [[#nubers][Nubers]]
  - [[#concepts][Concepts]]
  - [[#books][Books]]
    - [[#eloquent-javascript][Eloquent JavaScript]]
  - [[#sites][Sites]]
    - [[#web-js---misc][Web JS - Misc]]
    - [[#web-js---online-tools][Web JS - Online Tools]]
  - [[#frameworks][Frameworks]]
  - [[#refactoring][Refactoring]]
  - [[#articles][Articles]]
  - [[#interview][Interview]]
  :END:
* Progress
** Books
| Books                           | Cap                         | @                                 |
|---------------------------------+-----------------------------+-----------------------------------|
| JavaScript The Definitive Guide | 4 Expressions and Operators | 4.2 Object and Array Initializers |

** SLOC
| Project   | folder                  | file         | @ |
|-----------+-------------------------+--------------+---|
| draggable | src/Draggable/DragEvent | DragEvent.js |   |
| inquirer  |                         |              |   |

* Base
** Types
*** Numbers
|   |           |
|---+-----------|
|   | primitive |
|   | immutable |

- Literals
#+begin_src js
0
3
100000 // or 1_000_000

// hexadecimal

0xff
0xBADCAFE

// ES6 added binary and octal
0b10101
0o377
#+end_src

- floating-point
[digits][.digits][(E|e)[(+|-)]digits]

#+begin_src js
r example:
3.14
2345.6789
.333333333333333333
6.02e23
1.4738223E-32
#+end_src

- Comparison
#+begin_src javascript
0 === -0 // true
1/0 === 1/-0 // false

NaN === NaN // false
Number.isNaN(NaN) // true

#+end_src

**** Arithmetic
- Underflow returns 0.
- underflow from a negative number, returns ‚Äúnegative zero.‚Äù
-
#+begin_src js
1 + 1
2 - 2
3 / 2
4 * 5
5 % 1

2 / 0 // Infinity or -  Infinity
0 / 0 // NaN
Infinity / Infinity // NaN
#+end_src
**** BigInt
- not to mix BigInt with regular number

#+begin_src js
1234n
0b111111n
0o7777n
0x8000000000000000n
BigInt()
#+end_src
*** Strings
|            |           |
|------------+-----------|
|            | primitive |
|            | immutable |
| empty      | 0         |
| UTF        | 16        |
| comparable | === / !== |
|            |           |

- arrays of characters
- In ES6, strings are iterable
- ES6 added backstick string
- ES5 allow break string lines w/ backslash '\'
- template literal: `meh ${foo}`
- tagged template literals
- pair of slashes constitutes a regular expression literal

#+begin_src js
'meh "xii"'

"foo \
'bar'"

`fo'o'
   "bar"`
'\n' // newline
'\xA9' // '¬©'
'\u{1f600}' // 'üòÄ'

'Hello ' + 'World' // 'Hello World'

String.raw`\n`.length

/^HTML/
/[1-9][0-9]*/
#+end_src
*** Boolean
|   |           |
|---+-----------|
|   | primitive |
|   | immutable |

- represents truth or falsehood
- false values: undefined, null, 0, -0, NaN, ""

#+begin_src js
a === 4 // true
true.toString() // 'true'
#+end_src

*** null
|   |               |
|---+---------------|
|   | primitive     |
|   | immutable     |
|   | no properties |
|   | no methods    |

- indicate the absence of a value
- is a object
- avoid using

#+begin_src js
typeof null // object

#+end_src
*** undefined
|   |               |
|---+---------------|
|   | primitive     |
|   | immutable     |
|   | no properties |
|   | no methods    |

- predefined global constant
- indicate the absence of a value
- the value of variables that have not been initialized,
- object property   or array element that does not exist,
- the return value of functions that do not explicitly return a value
- the value of function parameters for which no argument is passed.
- avoid using

#+begin_src js
typeof undefined // undefined
undefined === null // false
#+end_src

*** Symbols
|   |           |
|---+-----------|
|   | primitive |

- calling Symbol() twice with the same string produces two completely different Symbol values.

#+begin_src js
m = Symbol('meh')
typeof m // 'symbol'
#+end_src

**** methods
- Symbol
- Symbol.iterator
- toString()
- Symbol.for()
- Symbol.keyFor()
** Collection
*** Array
- is a object
**** methods
- Array.from() - ES6

*** Set
*** Map
** Objects
|                |
|----------------|
| mutable        |
| not comparable |
| reference type |
|                |

#+begin_src js
let o = { x: 1 }, p = { x: 1 };
o === p // false

let x = o;
o == x // true

o.x = 2; // change value
o.y = 3; // add


#+end_src

*** Global Object
- the properties of this object are the globally defined identifiers that are available to a JavaScript program.
- global constants like undefined , Infinity , and NaN
- global functions like isNaN() , parseInt(), and eval()
- constructor functions like Date() , RegExp() , String() , Object() , and Array()
- global objects like Math and JSON
**** properties
- global
- globalThis

** Assignment
*** let
- default value is undefined if not assigned

#+begin_src js
let meh = 'foo'
let i, sum;
#+end_src
*** Const
- same as let
- must initialized at declaration
- attempt to change its value throws a TypeError
- is a convention to declare constants with all capital letters

#+begin_src js
const FOO = 'bar'
const H0 = 74;
const C = 299792.458;
const AU = 1.496E8;
#+end_src
*** var
- do not have block scope
- outside of a function body, it declares a global variable.
- legal to declare the same variable multiple times with var
#+begin_src js
var x;
var data = [], count = data.length;
for(var i = 0; i < count; i++) console.log(data[i]);
#+end_src
*** destructuring assignment
- The number of variables on the left of a destructuring assignment does not have to match the number of array elements on the right.
- Extra variables on the left are set to undefined , and extra values on the right are ignored.
- The list of variables on the left can include extra commas to skip certain values on the right:
- ... to collect all unused or remaining values into a single variable when destructuring an array, before the last variable name

#+begin_src js
let [x,y] = [1,2];
[x,y] = [x+1,y+1];

let [x,y] = [1]; // x == 1; y == undefined
[x,y] = [1,2,3]; // x == 1; y == 2
[,x,,y] = [1,2,3,4]; // x == 2; y == 4

let [x, ...y] = [1,2,3,4]; // y == [2,3,4]
let [a, [b, c]] = [1, [2,2.5], 3]; // a == 1; b == 2; c == 2.5

let transparent = {r: 0.0, g: 0.0, b: 0.0, a: 1.0}; // A RGBA color
let {r, g, b} = transparent; // r == 0.0; g == 0.0; b == 0.0

let points = [{x: 1, y: 2}, {x: 3, y: 4}];// An array of two point objects
let [{x: x1, y: y1}, {x: x2, y: y2}] = points; // destructured into 4 variables.
(x1 === 1 && y1 === 2 && x2 === 3 && y2 === 4) // => true

let points = { p1: [1,2], p2: [3,4] };// An object with 2 array props
let { p1: [x1, y1], p2: [x2, y2] } = points;// destructured into 4 vars
(x1 === 1 && y1 === 2 && x2 === 3 && y2 === 4) // => true
#+end_src
** Functions
- is a object

#+begin_src js
function meh() { return 'meh' }
meh // [Function: meh]
meh() // 'meh'
#+end_src
*** Template tag functions
** Strict mode
- attempt to use an undeclared variable gets a reference error
** Non-stric
- attempt to use an undeclared variable ends up creating a new global variable.

* Concepts
    - Types: numbers, strings, boolean, null, undefined, symbols
    - Primitives: numbers, strings, boolean, null, undefined
* Library
** Numbers
- do not accept BigInt

#+begin_src js
Number.NEGATIVE_INFINITY
-Number.MAX_VALUE * 2
Number.NaN
Number.MIN_VALUE/2
-Number.MIN_VALUE/2
Number.parseInt()
Number.parseFloat()
Number.isNaN(x)
Number.isFinite(x)
Number.isInteger(x)
Number.isSafeInteger(x)
Number.MIN_SAFE_INTEGER
Number.MAX_SAFE_INTEGER
Number.EPSILON
#+end_src
** RegExp
- constructor function
*** Date
** Error
- constructor function
** Date
- constructor function
* Books
** Eloquent JavaScript
*** 2. Program Structure
**** Exercises
***** Looping a triangle
	#+BEGIN_SRC javascript

	let Hash = "#";
	let numberLoop = 1;

	do {
	    console.log(Hash);
	    Hash = Hash + "#";
	    numberLoop++;
	} while (numberLoop <= 7)

	#+END_SRC
***** FizzBuzz
	#+BEGIN_SRC javascript

	let numberIncreasing = 1;

	while (numberIncreasing <= 100) {

	    if ((numberIncreasing % 3) == 0 && (numberIncreasing % 5)  == 0)
		console.log("FizzBuzz");
	    else
		if ((numberIncreasing % 3) == 0)
		    console.log("Fizz");
	    else
		if ((numberIncreasing % 5)  == 0)
		    console.log("Buzz");
	    else
		console.log(numberIncreasing);

	    numberIncreasing++;
	}

	#+END_SRC
***** ChessBoard
	#+BEGIN_SRC javascript

	let columns = 1;

	while (columns <= 8) {
	    let symbol = "# # # #";

	    if ((columns % 2) === 0)
		console.log(" " + symbol);
	    else
		console.log(symbol);

	    columns++;
	}

	#+END_SRC
*** 3. Functions
**** examples
       #+BEGIN_SRC javascript

       // -----
       const makeNoise = function() {
	   console.log(square("Pling!"));
       };

       makeNoise();


       // -----
       const power = function(base, exponent) {
	   let result = 1;
	   for (let count = 0; count < exponent; count++) {
	       result *= base;
	   }
	   return result;
       };

       console.log(power(2, 10));

       // -----
       const power = (base, exponent) => {
	   let result = 1;
	   for (let count = 0; count < exponent; count++) {
	       result *= base;
	   }
	   return result;
       };


       // -----
       const square1 = (x) => { return x * x; };
       const square1 = x => x * x;


       // -----
       const hummus = function(factor) {
	   const ingredient = function(amount, unit, name){
	       let ingredientAmount = amount * factor;
	       if (ingredientAmount > 1) {
		   unit += "s";
	       }
	       console.log(`${ingredientAmount} ${unit} ${name}`);
	   };

	   ingredient(1, "can", "chickpeas");
	   ingredient(0.25, "cup", "tahini");
	   ingredient(0.25, "cup", "lemon juice");
	   ingredient(1, "tablespoon", "olive oil");
	   ingredient(0.5, "teaspoon", "cumin");
       };
       #+END_SRC
**** exercises
***** Minimum
	#+BEGIN_SRC javascript


	function min(a, b){
	    return (a < b) ? a : b
	}

	console.log(min(20,2))

	#+END_SRC
***** Recursion - isEven
	#+BEGIN_SRC javascript

	function isEven(number){

	    let numberIsEven = false;

	    if (number == 0)
		return numberIsEven = true;
	    else if (number == 1)
		return numberIsEven = false;
	    else if (number <= 0)
		return console.log("Please, enter a natural(positive) number.")
	    else
		return isEven(number - 2);
	}

	isEven(50); // true
	isEven(75); // false
	isEven(-1); // RangeError: Maximum call stack size exceeded
	isEven(-1); // Please, enter a positive number.

	#+END_SRC
***** Bean Counting
	#+BEGIN_SRC javascript

	// -----
	function countBs(string){

	    let BinString = 0;

	    for (let i = 0; i < string.length; i++) {
		if (string[i] == "B")
		    BinString++;
	    }

	    return BinString;
	}

	console.log(countBs("bbC"))


	// -----
	function countChar(string, charToMatch){

	    let BinString = 0;

	    for (let i = 0; i < string.length; i++) {
		if (string[i] == charToMatch)
		    BinString++;
	    }

	    return BinString;
	}

	console.log(countChar("bbC", "B"))

	#+END_SRC
* Node
** Cli
*** install
|                      |   |
|----------------------+---|
| -‚Äîsave-dev <package> |   |

** Node frameworks
https://adonisjs.com/
* Sites
** Web JS - Misc
     https://bestofjs.org/

     https://leanpub.com/understandinges6/read/#leanpub-auto-block-bindings
** Web JS - Online Tools
     https://jsperf.com/
* Frameworks
- https://polyfill.io/v3/
- https://github.com/vuejs/vue
- https://api.jquery.com/
* Refactoring
https://medium.com/@jochasinga/how-i-refactor-my-code-561aa9132045
* Articles
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference

    https://medium.com/womakerscode/10-dicas-para-se-tornar-ninja-em-javascript-31a963ad17a1

    https://medium.com/@oliver.grack/using-eslint-with-typescript-and-react-hooks-and-vscode-c583a18f0c75
* Interview
https://www.pixelstech.net/article/1552133174-JavaScript-interview-questions
