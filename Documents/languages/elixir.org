#+TILE: GNU Guile Language - Study Annotations

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 3 :ignore this
  :END:
:CONTENTS:
- [[#progress][Progress]]
  - [[#books][Books]]
  - [[#sloc][SLOC]]
  - [[#priorities][Priorities]]
- [[#packages][Packages]]
  - [[#iex][iex]]
  - [[#ex_doc][ex_doc]]
  - [[#phoenix][phoenix]]
  - [[#mix][mix]]
- [[#features][Features]]
  - [[#atoms][atoms]]
    - [[#aliases][aliases]]
  - [[#boolean][Boolean]]
  - [[#map][map]]
  - [[#typespec][typespec]]
- [[#tests][Tests]]
  - [[#rspec][RSpec]]
  - [[#unit][Unit]]
:END:
* Progress
** Books
   | Books                  | Chapter                  | @                                    | late | revision |
   |------------------------+--------------------------+--------------------------------------+------+----------|
   | Elixir in Action       | Building blocks          | Module attributes                    |      |          |
   | Programming Elixir 1.6 | Conventional Programming | Ignoring a Value with _ (Underscore) |      |          |
   | Programming in Elixir  | Elixir Basics            |                                      |      |          |
** SLOC
   | Project   | folder | file | @ |
   |-----------+--------+------+---|
   | elixir    |        |      |   |
   | phoenix   |        |      |   |
   | elixir-ls |        |      |   |
** Priorities
   - Elixir
   - Phoenix
   - Unit Test
   - SOLID, KISS, YAGNI, DRY, Clean Code, Design Patterns
   - Git
   - HTML/CSS/JS
   - PostgreSQL
   - API REST { YAML, JSON, XML, SOAP }
   - CS
   - English
   - Container
   - Sidekiq
   - Heroku
   - Slim
   - CI/CD
   - Cloud

* Packages
** iex
   |               |               |                     |
   |---------------+---------------+---------------------|
   | h [<feature>] | h IO.puts     | help                |
   | i             |               | interactive         |
   | c <filepath>  | c 'hello.exs' | compile and execute |
** ex_doc
** phoenix
** [[https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html][mix]]
   | features    | options                         | desc |
   |-------------+---------------------------------+------|
   | deps help   | mix help deps                   |      |
   | New package | new <name> --module <Namespace> |      |
* Features
  | features     | example                              | desc   |
  |--------------+--------------------------------------+--------|
  | pin operator | ^                                    | forces |
  | ranges       | 1..100                               |        |
  | regex        | Regex.run ~r{[aeiou]}, "caterpillar" |        |
** atoms
   #+begin_src elixir
   :an_atom
   #+end_src
**** aliases
     - aliases are atoms that begin with upcased: AnAtom
       -
** Boolean
   - :true
   - :false
   - true, false are syntax sugar of those
** map
   #+begin_src elixir
   x = %{1 => '1'}
   y = Map.new({1,'1'}, {2, '2'})

   y[1] # '1'

   Map.get(y, 1)
   Map.get(y, 3, :not_found) # returns `:not_found` as default value if index is no found

   Map.fetch(y, 1) # {:ok, '1'}
   Map.fetch(y, 3) # :error

   Map.put a, 4, '4'

   a = %{:name => 'boy', :age => 2}
   a = %{name: 'boy', age: 2} # shorter notation if keys are atom

   a[:name] #  'boy'
   a.name # 'boy'
   a.height # ** (KeyError) key :non_existent_field not found
   b = %{a | name: 'gota', age: 4}

   #+end_src
** typespec
   - type
   - opaque
   - typep
   - spec
   - callback
   - macrocallback
* Tests
** RSpec
** Unit
