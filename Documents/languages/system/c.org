#+TITLE: C

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 3 :ignore this
  :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#packages][Packages]]
    - [[#gem][gem]]
    - [[#bundle][bundle]]
      - [[#outdated][outdated]]
      - [[#gem][gem]]
      - [[#install][install]]
      - [[#update][update]]
    - [[#irb][irb]]
      - [[#cli][cli]]
      - [[#inside][inside]]
    - [[#rspec][rspec]]
    - [[#unit-test][unit test]]
    - [[#pry][pry]]
  - [[#features][Features]]
    - [[#project-structure][project structure]]
    - [[#system-errors][System Errors]]
      - [[#usage][usage]]
    - [[#exceptions][exceptions]]
      - [[#errors][Errors]]
      - [[#usage][usage]]
    - [[#writable-object-attribute][writable object attribute]]
    - [[#multithreading][Multithreading]]
      - [[#usage][usage]]
    - [[#modules][modules]]
    - [[#continuation][continuation]]
    - [[#fibers][Fibers]]
      - [[#errors][errors]]
      - [[#usage][usage]]
    - [[#delimited-input][delimited input]]
    - [[#rake][rake]]
      - [[#usage][usage]]
    - [[#gem][gem]]
    - [[#variables][Variables]]
      - [[#class-variables][class variables]]
      - [[#global-variables][global variables]]
    - [[#self][self]]
    - [[#commentary][commentary]]
    - [[#defined][defined?]]
    - [[#iterators][iterators]]
    - [[#block-local-variables][block-local variables]]
    - [[#loops][loops]]
    - [[#statement-modifiers][statement modifiers]]
    - [[#comparison][comparison]]
    - [[#conditional][conditional]]
    - [[#class][class]]
      - [[#class][class]]
    - [[#append-][append <<]]
    - [[#blocks][blocks]]
    - [[#lambda][lambda]]
      - [[#how][How]]
      - [[#usage][Usage]]
    - [[#methods][methods]]
    - [[#yield][yield]]
    - [[#procs][procs]]
    - [[#operators][operators]]
    - [[#enumerable][enumerable]]
    - [[#enumerator][enumerator]]
      - [[#lazy][lazy]]
      - [[#each_car][each_car]]
      - [[#each][each]]
      - [[#to_enumenum_for][to_enum/enum_for]]
    - [[#inject][inject]]
    - [[#select][select]]
    - [[#succ][succ]]
    - [[#collect][collect]]
    - [[#freeze][freeze]]
    - [[#dup][dup]]
    - [[#dig][dig]]
    - [[#fetch][fetch]]
    - [[#tap][tap]]
    - [[#map][map]]
    - [[#pluck][pluck]]
    - [[#quoting][Quoting]]
    - [[#here-documents][here documents]]
    - [[#proc][proc]]
    - [[#do-end-as-param][do end as param]]
    - [[#array][array]]
    - [[#datetime][date/time]]
    - [[#lambda][lambda]]
    - [[#begin-rescue][begin rescue]]
    - [[#hash][hash]]
    - [[#range][range]]
    - [[#sets][sets]]
    - [[#gsub][gsub]]
    - [[#find][find]]
    - [[#map][map]]
    - [[#each_slice][each_slice]]
    - [[#lazy][lazy]]
    - [[#with_index][with_index]]
    - [[#enum_for][enum_for]]
    - [[#more][more]]
    - [[#concepts][Concepts]]
      - [[#iterator][Iterator]]
      - [[#methods][Methods]]
      - [[#enumerator][Enumerator]]
    - [[#instructions][Instructions]]
      - [[#rbenv][Rbenv]]
      - [[#misc][misc]]
  - [[#toolings][Toolings]]
  - [[#videos][Videos]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
  :END:
* Progress
** Book
| Buch              | Capitulo | em                         | tarde | revisao |
|-------------------+----------+----------------------------+-------+---------|
| C Modern Approach | Pointers | finding the largest pg 249 |       |         |

** SLOC
| Source Code | folder    | file        | @ |
|-------------+-----------+-------------+---|
| curl        | lib/vauth | cleartext.c |   |
| tmux        |           | alert.c     |   |

* Features
** pointers
#+begin_src c
int main(){
  int i, *p, *b;
  i = 4;

  ,*p = i; // p = 4
  ,*p = &i; // get address of i, p is alias of i var.
  ,*b = &p; // b get address of p, that is, i address.
  ,*b = *p; // copies value of p into the object that b points
  ,*b = *&p; // get address first then back to its value
}


#+end_src
* Books
** CPAMA
*** Chapter 8
**** Exercises
***** 5. Array of Fibonacci numbers up to 40
	#+BEGIN_SRC c
	#include <stdio.h>

	#define N 40

	int main(void)
	{
	  printf("Enter up to %d numbers: ", N);

	  int fib_numbers[N] = {[0] = 0, [1] = 1, 0};
	  for(int i = 2; i < N; i++){
	    fib_numbers[i] = fib_numbers[i-1] + fib_numbers[i-2];
	  }

	  /* Sorted Array */
	  printf("Array: { ");
	  for(int i = 0; i < N; i++) {
	    printf("%d", fib_numbers[i]);
	    if(i < N-1)
	      printf(", ");
	  }
	  printf(" }\n");


	  return 0;
	}
	#+END_SRC
***** 11 8x8 even checker_board
	#+begin_src c
	#include <stdio.h>

	#define N 8

	int main(void)
	{
	  char checker_board[N][N] = {0};
	  for(int i = 0; i < N; i++){
	    for (int j = 0; j < N; j++) {
	      checker_board[i][j] = ((i+j) % 2 == 0) ? 'B' : 'R';
	    }
	  }

	  printf("\n");
	  /* Sorted Array */
	  printf("Multi Dimension Array: \n{");
	  for(int i = 0; i < N; i++) {
	    for (int j = 0; j < N; j++) {

	      if(i == 0 && j == 0)  printf("{ ");
	      else if (j == 0) printf(" { ");
	      printf("%c", checker_board[i][j]);

	      if(j < N-1)
		printf(", ");

	      if(j == N-1 && i < N-1) printf(" }\n");
	      else if (j == N-1) printf(" }");
	    }
	  }
	  printf("}\n");

	  return 0;
	}

	#+end_src
**** Projects
***** .1
	#+BEGIN_SRC c
	#include <stdio.h>
	#include <stdbool.h>

	int main(void)
	{
	  bool digit_seen[10] = {false};
	  int digit;
	  long n;

	  printf("Enter a number: ");
	  scanf("%ld", &n);

	  printf("Repeated digits: ");
	  while (n > 0) {
	    digit = n % 10;
	    if (digit_seen[digit])
	      printf("%d ", digit);
	    digit_seen[digit] = true;
	    n /= 10;
	  }

	  printf("\n");

	  return 0;
	}
	#+END_SRC
***** .7

*** Chapter 9
**** Exercises
**** Projects
***** Project 1

	 Write a program that asks the user to enter a series of integers (which it
	 stores in an array), then sorts the integers by calling the function
	 selection_sort. When given an array with n elements, selection_sort must do
	 the following:

	 1) Search the array to find the largest element, then move it
	    to the last position in the array.
	 2) Call itself recursively to sort the first n - 1 elements of the array.

	 #+BEGIN_SRC c
	 #include <stdio.h>

	 #define N 4

	 void selection_sort(int a[], int n);

	 int main(void)
	 {
	   printf("Enter up to %d numbers: ", N);

	   int a[N] = {0};
	   for(int i = 0; i < N; i++){
	     scanf("%d", &a[i]);
	   }

	   /* Sorted Array */
	   printf("Unsorted Array: { ");
	   for(int i = 0; i < N; i++) {
	     printf("%d", a[i]);
	     if(i < N-1)
	       printf(", ");
	   }
	   printf(" }\n");

	   selection_sort(a, N);

	   /* Sorted Array */
	   printf("Sorted Array: { ");
	   for(int i = 0; i < N; i++) {
	     printf("%d", a[i]);
	     if(i < N-1)
	       printf(", ");
	   }

	   printf(" }\n");

	   return 0;
	 }

	 void selection_sort(int a[], int n)
	 {
	   if (n == 0) return;

	   // Sort Array
	   int largest, smallest, i;
	   i = largest = smallest = 0;

	   for(; i < n; i++)
	     if(a[i] > a[largest])
	       largest = i;

	   smallest = a[largest];
	   a[largest] = a[n - 1];
	   a[n -1] = smallest;

	   /* Recursion Unfolding */
	   printf("{ ");
	   for(int i = 0; i < n; i++) {
	     printf("%d", a[i]);
	     if(i < n-1)
	       printf(", ");
	   }

	   printf(" }\n");

	   selection_sort(a, n-1);
	 }
	 #+END_SRC

* Snippets

** find exec in path
     #+begin_src c


     #include <stdlib.h>
     #include <sys/stat.h>
     #include <sys/types.h>
     #include <unistd.h>

     #include <string>
     #include <iostream>

     using namespace std;

     int main ()
     {
       struct stat sb;
       string delimiter = ":";
       string path = string(getenv("PATH"));
       size_t start_pos = 0, end_pos = 0;

       while ((end_pos = path.find(':', start_pos)) != string::npos)
	 {
	   string current_path =
	     path.substr(start_pos, end_pos - start_pos) + "/mathsat";

	   if ((stat(mathsat_path.c_str(), &sb) == 0) && (sb.st_mode & S_IXOTH))
	     {
	       cout << "Okay" << endl;
	       return EXIT_SUCCESS;
	      }

	   start_pos = end_pos + 1;
	  }

       return EXIT_SUCCESS;
     }

     #+end_src

* Tools
    https://cdecl.org/  - C gibberish â†” English
    https://build2.org/

* Read later
    Mike Gancarz's The Unix Philosophy
    The Pragmatic Programmer [Hunt-Thomas
    The Practice of Programming [Kernighan-Pike99
    Zen Flesh, Zen Bones [Reps-Senzaki],

    https://multun.net/obscure-c-features.html

    https://norasandler.com/2017/11/29/Write-a-Compiler.html

    https://ecc-comp.blogspot.com/2014/12/homogeneous-operating-systems-are-better.html

    https://usesthis.com/interviews/christopher.allan.webber/

    https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html

    https://jacobmossberg.se/posts/2018/08/11/run-c-program-bare-metal-on-arm-cortex-m3.html

    https://mort.coffee/home/obscure-c-features/

    https://monades.roperzh.com/rediscovering-make-automatic-variables/

    https://monades.roperzh.com/rediscovering-make-power-behind-rules/

    http://www.shubhro.com/2018/01/20/brushing-up-os-c/

    https://solarianprogrammer.com/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/

    https://solarianprogrammer.com/2017/01/06/c99-c11-dynamic-array-mimics-cpp-vector/

    http://collin.moe/post.php?i=8

    https://www.viva64.com/en/b/0558/

    http://devarea.com/the-c-preprocessor/

    https://fgiesen.wordpress.com/2018/02/19/reading-bits-in-far-too-many-ways-part-1/

    https://gustedt.wordpress.com/2012/10/14/c11-defects-c-threads-are-not-realizable-with-posix-threads/

    http://arjunsreedharan.org/post/148675821737/write-a-simple-memory-allocator

    https://www.manager.com.br/empregos-c-programador-desenvolvedor

    https://github.com/aleksandar-todorovic/awesome-c

    https://queue.acm.org/detail.cfm?id=3212479

    https://www.quora.com/Why-does-it-seem-that-Unix-is-written-in-C-and-not-written-with-any-C++-Isn%E2%80%99t-C++-more-powerful-than-C

    http://www.code-in-c.com/galton-board-in-c/

    https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html

    http://www.itachay.com/2018/06/cc-programming-questions-practice.html

    http://nullprogram.com/blog/2018/06/23/

    http://www.code-in-c.com/an-introduction-to-ncurses-in-c/

    https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/C-Extensions.html

    https://www.ibm.com/developerworks/linux/library/l-gcc-hacks/

    https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html

    http://www.buildyourownlisp.com/chapter6_parsing

    http://nullprogram.com/blog/2018/06/10/

    https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/

    https://www.reddit.com/r/C_Programming/comments/8h4pda/c_is_not_a_lowlevel_language/

    https://github.com/ruslo/hunter

    https://github.com/oriansj/knight-vm
* Articles
    http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel

    https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list

    http://publications.gbdirect.co.uk/c_book/

    http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

    https://nazavode.github.io/blog/aliasing/

    http://clc-wiki.net/wiki/The_C_Standard#Obtaining_the_Standard

    https://www.embedded.com/design/programming-languages-and-tools/4437696/C11--C-finally-gets-a-new-standard

    http://www.drdobbs.com/cpp/c-finally-gets-a-new-standard/232800444

    https://github.com/andreas-gone-wild/blog/blob/master/skip_lists_revisited.md

    https://port70.net/~nsz/c/c11/n1570.html

    http://nullprogram.com/blog/2017/11/03/

    https://www.cossacklabs.com/blog/macros-in-crypto-c-code.html

    https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234

    https://stackoverflow.com/tags/c/info

    http://cs-education.github.io/sys/#/lessons

    https://blog.holbertonschool.com/hack-virtual-memory-stack-registers-assembly-code/

    https://www.wikiwand.com/en/MISRA_C

    https://danluu.com/malloc-tutorial/

    https://blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/

    http://seenaburns.com/building-c-programs/

    https://lwn.net/Articles/741171/

    http://www.techaed.com/how-to-code-like-the-top-programmers-at-nasa-10-critical-rules/

    https://notabug.org/koz.ross/awesome-c

    http://marek.vavrusa.com/c/memory/2015/02/20/memory/

    http://nullprogram.com/blog/2017/08/20/

    http://nullprogram.com/

    https://viewsourcecode.org/snaptoken/kilo/

    https://aransentin.github.io/cwasm/

    https://include-what-you-use.org/

    http://www.catb.org/esr/structure-packing/#_who_should_read_this

    http://www.catb.org/esr/structure-packing/

    https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a

    http://www.agner.org/optimize/

    http://c-faq.com/

    http://www.buildyourownlisp.com/chapter1_introduction

    https://blog.bradfieldcs.com/the-cost-of-forsaking-c-113986438784

    http://www.iso-9899.info/wiki/Main_Page#Stuff_that_should_be_avoided

    http://www.pldaniels.com/c-of-peril/

    https://wiki.osdev.org/Main_Page

    https://wiki.osdev.org/Books

    https://wiki.osdev.org/Bare_Bones

    http://git.annexia.org/?p=jonesforth.git;a=summary

    http://howtowriteaprogram.blogspot.com.br/2010/11/lisp-interpreter-in-90-lines-of-c.html

    http://peter.michaux.ca/articles/scheme-from-scratch-introduction

    https://github.com/kanaka/mal/blob/master/process/guide.md

    https://norvig.com/lispy.html

    https://www.joelonsoftware.com/2001/12/11/back-to-basics/

    https://ops.tips/blog/a-tcp-server-in-c/

    https://beej.us/guide/bgnet/

    https://github.com/cquery-project/cquery/wiki/compile_commands.json

    https://sarcasm.github.io/notes/dev/compilation-database.html

    http://antongerdelan.net/blog/formatted/2018_03_08_how_i_write_code.html

    http://port70.net/~nsz/c/c99/C99RationaleV5.10.pdf

    http://www.lysator.liu.se/c/pikestyle.html

    http://port70.net/~nsz/c/c89/rationale/

    http://marek.vavrusa.com/memory/

    https://blog.noctua-software.com/c-tricks.html

    https://blogs.oracle.com/ksplice/8-gdb-tricks-you-should-know

    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html

    https://www.gnu.org/software/emacs/manual/html_node/efaq/Customizing-C-and-C_002b_002b-indentation.html
* Libraries
    https://www.gnu.org/software/libc/

    https://github.com/universal-ctags/ctags

    https://www.fossil-scm.org/index.html/doc/trunk/www/index.wiki

    https://github.com/conan-io/conan
* Documentation
    http://knking.com/books/c2/index.html

    http://www.iso-9899.info/wiki/Books

    http://fabiensanglard.net/c/

    https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list/562377#562377

    https://gcc.gnu.org/onlinedocs/

    http://www.c-faq.com/

    http://port70.net/~nsz/c/

    http://port70.net/~nsz/c/c99/n1256.html
* Bootstraping
    http://git.savannah.nongnu.org/cgit/stage0.git/tree/x86/stage0/stage0_monitor.hex

    http://git.savannah.nongnu.org/cgit/stage0.git/tree/stage0/stage0_monitor.hex0

    https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/
* Tips
    https://github.com/aleksandar-todorovic/awesome-c#game-programming

    http://www.embedded.com/design/programming-languages-and-tools/4215552/Seventeen-steps-to-safer-C-code

    http://doc.cat-v.org/bell_labs/pikestyle

    https://www.kernel.org/doc/Documentation/process/coding-style.rst

    https://kristerw.blogspot.com.br/2017/09/useful-gcc-warning-options-not-enabled.html

    http://doc.cat-v.org/plan_9/4th_edition/papers/mk

* System Software Skills
    |---+------------------------------------------------------+---|
    | C | Data Structures rather than just databases           |   |
    | C | deliver clean, efficient and glamorous code quickly. |   |
    | C | current, low level "C" skills                        |   |
    | C | write API's and not just use them.                   |   |
    |   | SQL                                                  |   |
    |   | Excellent writing skills                             |   |
    |   | Outstanding communications skills are a must         |   |
    |   | Git                                                  |   |
    |   | ) Experience in programming microcontrollers.        |   |
    |---+------------------------------------------------------+---|
