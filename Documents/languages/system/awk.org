#+TITLE: Awk

* Summary
    :PROPERTIES:
    :TOC:      :include all :depth 3 :ignore this
    :END:
    :CONTENTS:
    - [[#progress][Progress]]
      - [[#books][Books]]
      - [[#sloc][SLOC]]
    - [[#packages][Packages]]
      - [[#gem][gem]]
      - [[#bundle][bundle]]
	- [[#outdated][outdated]]
	- [[#gem][gem]]
	- [[#install][install]]
	- [[#update][update]]
      - [[#irb][irb]]
	- [[#cli][cli]]
	- [[#inside][inside]]
      - [[#rspec][rspec]]
      - [[#unit-test][unit test]]
      - [[#pry][pry]]
    - [[#features][Features]]
      - [[#project-structure][project structure]]
      - [[#system-errors][System Errors]]
	- [[#usage][usage]]
      - [[#exceptions][exceptions]]
	- [[#errors][Errors]]
	- [[#usage][usage]]
      - [[#writable-object-attribute][writable object attribute]]
      - [[#multithreading][Multithreading]]
	- [[#usage][usage]]
      - [[#modules][modules]]
      - [[#continuation][continuation]]
      - [[#fibers][Fibers]]
	- [[#errors][errors]]
	- [[#usage][usage]]
      - [[#delimited-input][delimited input]]
      - [[#rake][rake]]
	- [[#usage][usage]]
      - [[#gem][gem]]
      - [[#variables][Variables]]
	- [[#class-variables][class variables]]
	- [[#global-variables][global variables]]
      - [[#self][self]]
      - [[#commentary][commentary]]
      - [[#defined][defined?]]
      - [[#iterators][iterators]]
      - [[#block-local-variables][block-local variables]]
      - [[#loops][loops]]
      - [[#statement-modifiers][statement modifiers]]
      - [[#comparison][comparison]]
      - [[#conditional][conditional]]
      - [[#class][class]]
	- [[#class][class]]
      - [[#append-][append <<]]
      - [[#blocks][blocks]]
      - [[#lambda][lambda]]
	- [[#how][How]]
	- [[#usage][Usage]]
      - [[#methods][methods]]
      - [[#yield][yield]]
      - [[#procs][procs]]
      - [[#operators][operators]]
      - [[#enumerable][enumerable]]
      - [[#enumerator][enumerator]]
	- [[#lazy][lazy]]
	- [[#each_car][each_car]]
	- [[#each][each]]
	- [[#to_enumenum_for][to_enum/enum_for]]
      - [[#inject][inject]]
      - [[#select][select]]
      - [[#succ][succ]]
      - [[#collect][collect]]
      - [[#freeze][freeze]]
      - [[#dup][dup]]
      - [[#dig][dig]]
      - [[#fetch][fetch]]
      - [[#tap][tap]]
      - [[#map][map]]
      - [[#pluck][pluck]]
      - [[#quoting][Quoting]]
      - [[#here-documents][here documents]]
      - [[#proc][proc]]
      - [[#do-end-as-param][do end as param]]
      - [[#array][array]]
      - [[#datetime][date/time]]
      - [[#lambda][lambda]]
      - [[#begin-rescue][begin rescue]]
      - [[#hash][hash]]
      - [[#range][range]]
      - [[#sets][sets]]
      - [[#gsub][gsub]]
      - [[#find][find]]
      - [[#map][map]]
      - [[#each_slice][each_slice]]
      - [[#lazy][lazy]]
      - [[#with_index][with_index]]
      - [[#enum_for][enum_for]]
      - [[#more][more]]
      - [[#concepts][Concepts]]
	- [[#iterator][Iterator]]
	- [[#methods][Methods]]
	- [[#enumerator][Enumerator]]
      - [[#instructions][Instructions]]
	- [[#rbenv][Rbenv]]
	- [[#misc][misc]]
    - [[#toolings][Toolings]]
    - [[#videos][Videos]]
    - [[#tests][Tests]]
      - [[#rspec][RSpec]]
      - [[#unit][Unit]]
    :END:
* Progress
** Books
| name                     | chapter            | @            |
|--------------------------+--------------------+--------------|
| Awk Programming Language | 2 The Awk Language | 2.1 Patterns |

** LDC
| Source Code | folder | file | @ |
|-------------+--------+------+---|
|             |        |      |   |

* Features
** Types
*** numbers
*** strings
** Collections
*** Array
#+begin_src shell
BEGIN {
    Say[0] = "hello";
    Say[1] = "world"
    print Say[0], Say[1]
 }
#+end_src

** syntax
- pattern, action, files
- only pattern
- only action
- one or multiples files
** Patterns
*** BEGIN
The statements are executed once before any input has been read.

#+begin_src awk
BEGIN { statements }
#+end_src
*** END
The statements are executed once after all input has been read.

#+begin_src awk
END { statements }
#+end_src
*** Expression
|    |   |
|----+---|
| == |   |
| >  |   |
| <  |   |
| >= |   |
| <= |   |
*** Regular Expresion
#+begin_src shell
awk '/Susie/ { print NR, $1, $3 }
#+end_src
*** Compound
|    |     |
|----+-----|
| && | and |
| ]] | or  |
|    |     |

#+begin_src shell
$2 >= 4 || $3 >= 20
( $2 < 4 && $3 < 20)
#+end_src
*** Range
A range pattern matches each input line from a line matched by pattern 1 to the
next line matched by pattern 2, inclusive; the statements are executed at each
matching line.

#+begin_src shell
pattern 1 , pattern 2 { statements }
#+end_src

*** data validation
#+begin_src shell
NF I= 3   { print $0, "number of fields is not equal to 3" }
$2 < 3.35 { print $0, "number of fields is not equal to 3" }
$2 < 3.35 { print SO, "rate is below minimum wage" }
$2 > 10   { print $0, "rate exceeds $10 per hour" }
#+end_src
** Fields
|     |                                  |
|-----+----------------------------------|
| $0  | whole line                       |
| $N  | field                            |
| NF  | number of fields in current line |
| $NF | last input files of current line |
| NR  | number of line                   |
** Conditionals
*** if/else
#+begin_src shell
$2 > 6 { n = n + 1; pay = pay + $2 * $3 }
END { if (n > 0)
        print n
    else
        print "meh"
    }
#+end_src
*** while
#+begin_src shell
{
    i = 1
    while (i <= $3) {
        printf("\t%.2f\n", $1 * (1 + $2) ^ i)
        i = i + 1
    }
}
#+end_src
*** for
#+begin_src shell
{
    for (i = 1; i <= $3; i = i + 1)
        printf("\t%.2f\n", $1 * (1 + $2) ^ i)
}
#+end_src
** Printing
*** printf
#+begin_src shell
printf (format, value 1 , value 2 , ... , valueN)

{ printf("total pay for %s is $%.2f\n", $1, $2 * $3) }
#+end_src
*** print
** Comments
*** #
A comment starts with the character # and finishes at the end of the line

#+begin_src awk
{ print S1, $3 } # meh

{ print \
        $1, # country name
        $2, # area in thousands of square miles
        $3 } # population in millions
#+end_src

* Library
** substr
Return a length-character-long substring of string, starting at character number
start. The first character of a string is character number one.49 For example,
substr("washington", 5, 3) returns "ing".
** gsub
Search target for all of the longest, leftmost, nonoverlapping matching
substrings it can find and replace them with replacement. The ‘g’ in gsub()
stands for “global,” which means replace everywhere.

** misc
#+begin_src shell
    pattern action                files
awk '$3 > 0 { print $1, $2 * $3}' ~/emp.data

awk '{ print}' ~/emp.data

awk '$3 > 0' ~/emp.data

awk { print "total pay for", $1, "is", $2 * $3 }

$2 * $3 > 50 { printf("$%.2f for %s\n", $2 * $3, $1) }

#+end_src
* Cli
|    |   |
|----+---|
| -F |   |
