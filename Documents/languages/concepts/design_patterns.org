#+TITLE: Design Patterns

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progress][Progress]]
- [[#template-method][Template Method]]
  - [[#hooks-methods][hooks methods]]
- [[#strategy][Strategy]]
- [[#observer][Observer]]
- [[#composite][Composite]]
- [[#iterator][Iterator]]
:END:
* Progress
| Book                    | chapter    | @ |
|-------------------------+------------+---|
| Design Patterns in Ruby | 8 Commands |   |

* Template Method
- Abstract class

** hooks methods
- exist merely to let the subclasses know what is happening but do not require
  the subclasses to override methods that do not interest them.
* Strategy
* Observer
clean interface between the source of the news that some object has changed and
the consumers of that news
* Composite
- composite
- componentes
- leaf
* Iterator
Provide a way to access the elements of an aggregate object sequentially without
exposing its underlying representation

- internal iterator
- external iterator
