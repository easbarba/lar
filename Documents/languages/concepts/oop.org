#+TILE: Programmig Concepts

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progress][Progress]]
- [[#messages][Messages]]
- [[#base][Base]]
  - [[#definition][Definition]]
  - [[#interface][Interface]]
  - [[#public][Public]]
  - [[#private][Private]]
  - [[#objects][Objects]]
  - [[#data][Data]]
  - [[#behavior][Behavior]]
  - [[#terms][Terms]]
- [[#testing][Testing]]
  - [[#acceptance-testing][Acceptance Testing]]
  - [[#unit-testing][Unit Testing]]
  - [[#integration-testing][Integration Testing]]
  - [[#notes][Notes]]
- [[#terms][Terms]]
  - [[#dry][DRY]]
- [[#dry][DRY]]
- [[#solid][SOLID]]
  - [[#single-responsability][Single Responsability]]
- [[#rest][REST]]
  - [[#tutorials][Tutorials]]
- [[#data-structures][Data Structures]]
- [[#algorithms][Algorithms]]
- [[#design-patterns][Design Patterns]]
  - [[#template-method][Template Method]]
  - [[#strategy][Strategy]]
- [[#algorithms][Algorithms]]
- [[#articles][Articles]]
- [[#misc][Misc]]
  - [[#terms][Terms]]
  - [[#books][Books]]
  - [[#skills][Skills]]
:END:
* Progress
   | Book                                                   | chapter                                | @                                                 | later | revision       |
   |--------------------------------------------------------+----------------------------------------+---------------------------------------------------+-------+----------------|
   | A Common-Sense Guide to Data Structures and Algorithms | Arrays                                 | Searching                                         |       |                |
   | Refactoring Improving the Design of Existing Code      | Chapter 1 Refactoring: A First Example | Now I have a spot for the play, I need to add it. |       |                |
   | Design Patterns Elements of Reusable OO Software       | 3 Creational Patterns                  | Facade                                            |       | Factory Method |
   | Object Thinking                                        | Chapter 1                              |                                                   |       |                |
   | Algorithms                                             | 1 Fundamentals                         |                                                   |       |                |
   | Clean Code                                             | Chapter 1: Clean Code                  |                                                   |       |                |
* Messages
- Has a role: set of related responsibilities
- role is not the same concept as a class
* Base
** Definition
   Object-oriented applications are made up of objects and the
   messages that pass between them.
** Interface
   - Abstract
   - Duck Type
   - good ones may reduce the cost of unanticipated change
** Public
   - stable, changes are unlikely
** Private
   - class/methods change a lot, should by hidden from users
** Objects
*** Instance
**** Hide instance
     - Always wrap instance variables in accessor methods instead of directly referring to  variables.
     - Hide the variables, even from the class that defines them, by wrapping them in methods.
** Data
   - refer directly to the instance variable
   - wrap the instance variable in an accessor method.
** Behavior
** Terms
*** TRUE: Transparent, Reasonable, Usable, Exemplary
*** Law of Demeter
    - Train wrecker
    - it isn’t “use more delegation.”
    - paying attention to your point of view
*** Indenpendency
*** Responsabilities
*** Trusting the other object can do it all
*** Ask for what the sender wants instead of telling the receiver how to behave
*** Public interfaces are stable and denpendable
*** Avoid depending non-public interfaces or at least isolate those deps.
    ***

* Testing
** Acceptance Testing
   - Test code based only in public interfaces, their ultimate behavior.
** Unit Testing
   - Modular test based on methods or one object
** Integration Testing
   - Test code that you cant modify
** Notes
   - does this test pay for the cost of writing and running it?

* Terms
  | Term        | Description                                   |
  |-------------+-----------------------------------------------|
  | EAFP        | Easier to Ask for Forgiveness than Permission |
  | LBYL        | Look Before You Leap                          |
  | Duck Typing |                                               |
  | WHNF        | Weak Head Normal Form                         |
  | Noise/      |                                               |
** DRY
   - Every tiny bit of behavior lives in one and only one place.
* DRY
* SOLID
** Single Responsability
   - Can be defined in one sentence. “and,” may mean the class likely has more than one responsibility. “or,” means the class has more than one responsibility and they aren’t even very related.
   - highly cohesive or to have a single responsibility.
   - Responsibility-Driven Design
   - everything the class does be highly related to its purpose.
* REST
** Tutorials
   https://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340
* Data Structures
* Algorithms
* Design Patterns
** Template Method
*** Features
**** Base class
**** inheritance
**** Multiple actions
*** Issues
**** changes require a whole new object
**** limit runtime flexibility
**** tangled by upper classes
*** Advantages
** Strategy
*** Feature
**** context & strategy
**** easy to switch strategies at runtime
**** delegation
**** composition
**** separation of concerns
**** caller class relieve of any responsibility for or knowledge of the callee ones
**** 'context' treat the strategies like interchangeable parts.
**** all objects(strategies) do the same job
**** all objects support same interface
**** pull the algorithm out into a separate object
* Algorithms
* Articles
  https://daedtech.com/5-things-ive-learned-in-20-years-of-programming

  https://thevaluable.dev/abstraction_software_development/

  https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html

  https://stackoverflow.blog/2019/09/05/they-didnt-teach-us-this-a-crash-course-for-your-first-job-in-software/?cb=1

  https://stackoverflow.blog/2019/08/07/what-every-developer-should-learn-early-on/

  https://www.tableau.com/learn/articles/books-about-data-structures-algorithms

  https://blog.daftcode.pl/become-a-better-programmer-by-making-it-hard-to-write-bad-code-d118ab90e0f7

  http://typicalprogrammer.com/the-joys-of-maintenance-programming

  https://www.embeddedrelated.com/thread/4490/embedded-software-good-and-bad-programming-habits

  https://www.reddit.com/r/dredmorbius/comments/69wk8y/the_tyranny_of_the_minimum_viable_user/

  http://www.bamafolks.com/randy/students/embedded/programming_languages.html

  https://npf.io/2017/11/comments/

  https://henrikwarne-com.cdn.ampproject.org/c/s/henrikwarne.com/2012/06/02/why-i-love-coding/amp/

  http://ourmachinery.com/post/minimalist-container-library-in-c-part-1/

  https://dave.cheney.net/2018/01/16/containers-versus-operating-systems

  http://www.linuxjournal.com/content/getting-started-ncurses

  http://www.grymoire.com/Unix/Awk.html#uh-0

  http://akaptur.com/blog/2017/11/12/love-your-bugs/

  http://www.cipht.net/2017/10/05/why-read-code.html

  http://linuxtechlab.com/bash-scripting-learn-use-regex-basics/

  http://languagelog.ldc.upenn.edu/nll/?p=2483

  https://learnxinyminutes.com/
* Misc
** Terms
*** Search Traversal
    - depth-first traversal
    - breadth-first traversal
** Books
   Designing Data Intensive Apps
** Skills
  - Language
  - Unit Test
  - Framework
  - Database
  - Git
  - Docker
