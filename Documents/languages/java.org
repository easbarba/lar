#+TITLE: Java

* Books
**** JBG
***** Chapter 1
****** Chapter 1 Self Test
	 1.   What is bytecode and why is it important to Java’s use for Internet programming?

	    A1: Bytecode is a highly optimized set of instructions designed to be executed by the Java run-time system.
	    A2:Translating a Java program into bytecode makes it much easier to run a program in a wide variety
	       of environments because only the JVM needs to be implemented for each platform.

	 2.   What are the three main principles of object-oriented programming?
	    A: encapsulation, polymorphism, and inheritance

	 3.   Where do Java programs begin execution?
	    A: A call to main()

	 4.   What is a variable?
	    A: A variable is a named memory location that can be assigned a value

	 5.   Which of the following variable names is invalid?

	    A.   count

	    B.   $count

	    C.   count27

	--> D.   67count

	 6.   How do you create a single-line comment? How do you create a multiline comment?
	    // single-line comment

	 7.   Show the general form of the if statement. Show the general form of the for loop.
	    A1: if()
	    A2: for(){}

	 8.   How do you create a block of code?
	    A: A pair of {}

	 9.   The moon’s gravity is about 17 percent that of earth’s. Write a program that computes your
	 effective weight on the moon.
	 #+BEGIN_SRC java

	 /*  9.   The moon’s gravity is about 17 percent that of earth’s. Write a program that computes your
	     effective weight on the moon.
	 ,*/

	 class MoonWeight {
	     public static void main(String args[]) {

		 double EarthlyWeight = 202;
		 double moonGravityPercentage = 0.17;

		 double MoonlyWeight = EarthlyWeight  * moonGravityPercentage;

		 System.out.println(" Weight on Moon is: " + MoonlyWeight);
	     }
	 }

	 #+END_SRC

	 10.   Adapt Try This 1-2 so that it prints a conversion table of inches to meters. Display 12 feet of
	 conversions, inch by inch. Output a blank line every 12 inches. (One meter equals approximately
	 39.37 inches.)
	 #+BEGIN_SRC java

	 /*  10.   Adapt Try This 1-2 so that it prints a conversion table of inches to meters. Display 12 feet of
	     conversions, inch by inch. Output a blank line every 12 inches. (One meter equals approximately
	     39.37 inches.)
	 ,*/

	 class InchToMeterConversion {
	     public static void main(String args[]) {

		 double inches, meters;
		 int counter = 0;

		 for (inches = 1.0; inches <= 22; inches++) {

		     meters = inches * 0.0254; //convert to meters

		     System.out.println(inches + " inches is " + meters + " meters.");


		     counter++;

		     // every 12th line, print a blank line
		     if (counter == 12) {
			 System.out.println();

			 counter = 0; // reset the line counter
		     }
		 }
	     }
	 }

	  #+END_SRC

	 11.   If you make a typing mistake when entering your program, what sort of error will result?
	    A:error: cannot find symbol

	 12.   Does it matter where on a line you put a statement?
	     Nope. Indenting is for human readability.n

***** Chapter 2
****** Exercises
******* 1. Why does Java strictly specify the range and behavior of its primitive types?
	  Java’s portability requirement!!!!!
******* 2. What is Java’s character type, and how does it differ from the character type used by some other programming languages?
	  Java uses Unicode. Unicode defines a character set that can represent all of the characters found in all human languages.
	  In Java, char is an unsigned 16-bit type having a range of 0 to 65,535.
	  The standard 8-bit ASCII character set is a subset of Unicode and ranges from 0 to 127.
	  Thus, the ASCII characters are still valid Java characters.
******* 3. A boolean value can have any value you like because any non-zero value is true. True or False?
	  True, very True!
******* 4. Given this output, using a single string, show the println( ) statement that produced it.
	  #+BEGIN_SRC java

	  System.out.println("One\nTwo\nThree");

	  #+END_SRC
******* 5. What is wrong with this fragment?
	  #+BEGIN_SRC java

	  #+END_SRC
	  print is out of the for loop and will issue an error as sum is not know out of for block scope!!

******* 6. Explain the difference between the prefix and postfix forms of the increment operator.
	  PREFIX =  When an increment or	decrement operator precedes its operand, Java will perform the corresponding
	  operation prior to obtaining the operand’s value for use by the rest of the expression.

	  POSTFIX = If the operator follows its operand, Java will obtain the operand’s value before incrementing or decrementing it.

******* TODO 7. Show how a short-circuit AND can be used to prevent a divide-by-zero error.
	  #+BEGIN_SRC java

	  #+END_SRC
******* 8. In an expression, what type are byte and short promoted to?
	  int
******* 9. In general, when is a cast needed?
	  When you need to ensure a given type is yield by the expression.
******* TODO 10. Write a program that finds all of the prime numbers between 2 and 100.
******* 11. Does the use of redundant parentheses affect program performance?
	  Use of redundant or additional parentheses will not cause errors or slow down the execution of the expression.
******* 12. Does a block define a scope?
	  Each time you start a new block, you are creating a new scope.
	  A scope determines what objects are visible to other parts of your program. It also determines the lifetime of those objects.
***** Chapter 3
***** Chapter 4
****** Exercises
******* 1.   What is the difference between a class and an object?
	  A class is a template that defines the form of an object. Java uses a class specification to construct objects.
	  Objects are instances of a class.
	  It is not until an object of that class has been created that a physical representation	of that class exists in memory.
******* 2.   How is a class defined?
	  You do this by specifying the instance variables that it contains and the methods that operate on them.
	  A well-designed class should define one and only one logical entity.

	  #+BEGIN_SRC java
	  class Example {
	      int var1;
	  }
	  #+END_SRC

	  A class definition creates a new data type.
******* 3.   What does each object have its own copy of?
	  Each object has its own copies of the instance variables defined by its class.
	  Thus, the contents of the variables in one object can differ from the contents of the variables in another.
	  There is no connection between the two objects	except for the fact that they are both objects of the same type.
******* 4.   Using two separate statements, show how to declare an object called counter of a class called MyCounter.
	  #+BEGIN_SRC java

	  class MyCounter {
	      int a = 10;
	  }

	  class DemoCounter {
	      public static void main(String[] args) {

		  MyCounter counter;
		  counter = new MyCounter();

		  System.out.println(counter.a);
	      }
	  }
	  #+END_SRC
******* 5.   Show how a method called myMeth( ) is declared if it has a return type of double and has two int parameters called a and b.
	  #+BEGIN_SRC java

	  class Meth {

	      int aa, bb;

	      double myMeth (int a, int b) {
		  aa = a;
		  bb = b;
	      }
	  }

	  #+END_SRC
******* *6.   How must a method return if it returns a value?**
	  #+BEGIN_SRC java

	  class Meth {

	      int a, b;

	      double myMeth (int a, int b) {
		  this.a = a;
		  this.b = b;

		  return (double) a + b;
	      }
	  }



	  #+END_SRC
******* 7.   What name does a constructor have?
	  It has the same name as its class and is syntactically similar to a method.
	  However, constructors have no explicit return type.
	  Typically, you will use a constructor to give initial values to the instance variables defined by the class,
	  or to perform any other startup procedures required to create a fully formed object.
******* 8.   What does new do?
	  *new* can be used to create an object of any class type. The new operator returns a
	  reference to the newly created object!
******* 9.   What is garbage collection, and how does it work?
	  Java’s garbage collection system reclaims objects automatically without any programmer intervention.
	  When no references to an object exist, that object is assumed to be no longer needed, and the memory occupied by the object is released.
	  This recycled memory can then be used for a subsequent allocation.
******* 10.   What is this?
	  When a method is called, it is automatically passed an implicit argument that is a reference to the invoking object
	  (that is, the object on which the method is called).
	  This reference is called this.

	  The Java syntax permits the name of a parameter or a local variable to be the same as the name of an instance variable.
	  When this happens, the local name hides the instance variable. You can gain access to the hidden instance variable by referring to it through *this*.
******* 11.   Can a constructor have one or more parameters?
	  Parameters are added to a constructor in the same way that they are added to a method: just declare them
	  inside the parentheses after the constructor’s name.
******* 12.   If a method returns no value, what must its return type be?
	  Void. You can use a return with a null statement or no return at all.
***** Chapter 5
****** Self Test
******* 1.   Show two ways to declare a one-dimensional array of 12 doubles.
	  #+BEGIN_SRC java
	  class OneDTwelve {
	      int i[] = new int[12];

	  }

	  #+END_SRC
******* 2.   Show how to initialize a one-dimensional array of integers to the values 1 through 5.
	  #+BEGIN_SRC java

	  int nums[] = {1,2,3,4,5}

	  #+END_SRC
******* 3.   Write a program that uses an array to find the average of 10 double values. Use any 10 values you like.
	  #+BEGIN_SRC java

	  public class BubbleDolist {

	      public static void main(String[] args) {

		  double nums[] = { 200.1, 2.5, 5.2, 199.1, 2.1};

		  int a, b;
		  int size;

		  size = 5; // number of elements to sort

		  // display original array
		  System.out.print("Original array is:");
		  for (double i : nums)
		      System.out.print(" " + i);
		  System.out.println();

		  // This is the Bubble sort.
		  for (a = 1; a < size; a++)
		      for (b = size-1; b >= a; b--) {
			  if(nums[b-1] > nums[b]) { // if out of order
			      // exchance elements
			      double t = nums[b-1];
			      nums[b-1] = nums[b];
			      nums[b] = t;
			  }

		      }

		  // display sorted array
		  System.out.print("Sorted array is:");
		  for (double z : nums)
		      System.out.print(" " + z);
	      }

	  }


	  #+END_SRC
******* TODO 4.   Change the sort in Try This 5-1 so that it sorts an array of strings. Demonstrate that it works.
	  #+BEGIN_SRC java

	  #+END_SRC
******* 5.   What is the difference between the String methods indexOf( ) and lastIndexOf( )?
	  indexOf( ): This method returns the index within this string of the first occurrence
	  of the specified character or -1, if the character does not occur.
	  lastIndexOf( ): This method returns the index of the last occurrence of the character in the character sequence represented
	  by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point.
******* 6.   Since all strings are objects of type String, show how you can call the length( ) and charAt( ) methods on this
	  #+BEGIN_SRC java

	  String str = new String("I like Java");

	  System.out.println(str);
	  System.out.println(str.length());
	  System.out.println(str.charAt(2));

	  #+END_SRC
******* TODO 7.   Expanding on the Encode cipher class, modify it so that it uses an eight-character string as the key.
******* 8.   Can the bitwise operators be applied to the double type?
	  Bitwise operations cannot be used on boolean, float, or double, or class types.
	  They are called the bitwise operators because they are used to test, set, or shift the individual bits that make up a value.
******* 9.   Show how this sequence can be rewritten using the ? operator.
	  #+BEGIN_SRC java

	  if(x < 0) y = 10;
	  else y = 20;

	  x < 0 ?  y = 10 : y = 20;

	  #+END_SRC
******* 10.   In the following fragment, is the & a bitwise or logical operator? Why?
	  #+BEGIN_SRC java
	  boolean a, b;
	  if(a & b)
	  #+END_SRC
	  No. Bitwise operations cannot be used on boolean, float, or double, or class types.
******* 11.   Is it an error to overrun the end of an array? Is it an error to index an array with a negative value?
	  Yes. it is a run-time error to overrun or underrun the end of an array.
	  Yes. Java Arrays index do not allow negative index
******* 12.   What is the unsigned right-shift operator?
	  always brings in a 0 on the left.
	  For this reason, the >>> is also called the zero-fill right shift.
	  You will use the unsigned right shift when shifting bit patterns, such as status codes, that do not represent integers.
******* 13.   Rewrite the MinMax class shown earlier in this chapter so that it uses a for-each style for loop.
	  #+BEGIN_SRC java

	  class MinMaxDolist {
	      public static void main(String[] args) {
		  int nums[] = {1, 99, -10, 100123, 18, -978,
				5623, 463, -9, 287, 49};

		  int min, max;
		  min = max = nums[0];

		  for (int x : nums) {
		      if(x < min) min = x;
		      if(x > max) max = x;
		  }

		  System.out.println("min: " + min);
		  System.out.println("max: " + max);
	      }
	  }

	  #+END_SRC
******* 14.   Can the for loops that perform sorting in the Bubble class shown in Try This 5-1 be converted into for-each style loops? If not, why not?
	  As for-each loops only objects I could not achieve a full for-each Bubble without some hackish trick! hehe
	  #+BEGIN_SRC java

	  class BubbleDolist {
	      public static void main(String[] args) {

		  int nums[] = {99, -10, 100123, 18, -978,
				5623, 463, -9, 287, 49};
		  int sample[] = new int[9]; // HACKISH TRICK

		  // display original array
		  System.out.print("Original array is:");
		  for (int i : nums)
		      System.out.print(" " + i);
		  System.out.println();

		  // This is the Bubble sort.
		  for (int x : nums){
		      for (int y: sample) {

			  int b = nums.length-1;

			  if(nums[b-1] > nums[b]) { // if out of order
			      // exchance elements
			      int t = nums[b-1];
			      nums[b-1] = nums[b];
			      nums[b] = t;
			  }

			  b--;
		      }
		  }

		  // display sorted array
		  System.out.print("Sorted array is:");
		  for (int z : nums)
		      System.out.print(" " + z);
	      }
	  }

	  #+END_SRC
******* 15.   Can a String control a switch statement?
	  Yes.
	  Being able to use strings in a switch statement can be very convenient and can improve the readability of some code.
	  However, switching on strings can be less efficient than switching on integers.
	  Therefore, it is best to switch on strings only in cases in which the controlling data is already in string form.
***** Chapter 6
****** Try This
******* Try 6-1 Queue - Control Acess
	   #+BEGIN_SRC java

	   class Queue {
	       private char q[];
	       private int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }

	   class QueueDemo {
	       public static void main(String[] args) {
		   Queue bigQ = new Queue(100);
		   Queue smallQ = new Queue(4);
		   char ch;
		   int i;

		   System.out.println("Using bigQ to store the alphabet.");

		   for (i = 0; i < 26; i++) {
		       bigQ.put((char) ('A' + i) );
		   }

		   // retrieve
		   System.out.println("Contents of bigQ: ");
		   for (i = 0; i < 26; i++) {
		       ch = bigQ.get();
		       if(ch != (char) 0) System.out.println(ch);
		   }

		   System.out.println("\n");

		   System.out.println("Using smallQ to generate errors.");
		   // Now
		   for (i = 0; i < 5; i++) {
		       System.out.println("Attempting to store " + (char) ('Z' - i));

		       smallQ.put((char) ('Z' - i));

		       System.out.println();
		   }
		   System.out.println();

		   // more errors on smallQ
		   System.out.println("Contets of smallQ: ");
		   for (i = 0; i < 5; i++) {
		       ch = smallQ.get();

		       if(ch != (char ) 0) System.out.println(ch);
		   }
	       }
	   }
	   #+END_SRC

******* Try 6-2 Queue - Construct Overload
	  #+BEGIN_SRC java

	  class Queue {
	      private char q[];
	      private int putloc, getloc;

	      Queue(int size) {
		  q = new char[size];
		  putloc = getloc = 0;
	      }

	      Queue(Queue ob) {
		  putloc = ob.putloc;
		  getloc = ob.getloc;
		  q = new char[ob.q.length];

		  for (int i = getloc; i < putloc; i++) {
		      q[i] = ob.q[i];
		  }
	      }

	      Queue(char a[]) {
		  putloc = 0;
		  getloc = 0;
		  q = new char[a.length];

		  for (int i = 0; i < a.length; i++) {
		      put(a[i]);
		  }
	      }

	      void put(char ch){
		  if(putloc==q.length){
		      System.out.println(" - Queue is full.");
		      return;
		  }

		  q[putloc++] = ch;
	      }

	      char get() {
		  if(getloc == putloc) {
		      System.out.println(" - Queue is empty.");
		      return (char) 0;
		  }

		  return q[getloc++];
	      }
	  }


	  class QDemo2 {
	      public static void main(String[] args) {

		  Queue q1 = new Queue(10);

		  char name[] = {'T', 'o', 'm'};

		  Queue q2 = new Queue(name);

		  char ch;
		  int i;

		  for (i = 0; i < 10; i++) {
		      q1.put((char) ('A' + i) );
		  }

		  Queue q3 = new Queue(q1);

		  System.out.print("Contents of q1: ");
		  for (i = 0; i < 10; i++) {
		      ch = q1.get();
		      System.out.print(ch);
		  }

		  System.out.println("\n");

		  System.out.print("Contents of q2: ");
		  for (i = 0; i < 3; i++) {
		      ch = q2.get();
		      System.out.print(ch);
		  }

		  System.out.println("\n");

		  System.out.print("Contents of q3: ");
		  for (i = 0; i < 10; i++) {
		      ch = q3.get();
		      System.out.print(ch);
		  }
	      }
	  }


	  #+END_SRC
***** Example
****** Chapter 1
******* example
	  #+BEGIN_SRC java
	      /*
		This is a simple Java program
		call this file Example.java
	      ,*/

	      class Example {
		// A java program begins with a call to main()
		public static void main(String arg[]) {
		  System.out.println("Java drives the Web.");
		}
	      }
	  #+END_SRC
******* example2
	  #+BEGIN_SRC java
	  /*
	    This demonstrate a variable
	    ,Call this file Example2.java */

	  class Example2 {
	      public static void main(String args[]){
		  int var1; // this declares a variable
		  int var2;  // this declares a variable

		  var1 = 1024; // this asigns 1024 to var1
		  System.out.println("var1 contains " + var1);

		  var2 = var1 / 2;

		  System.out.print("var2 contains var1 / 2: ");
		  System.out.println(var2);
	      }
	  }
	  #+END_SRC

******* example3
	  #+BEGIN_SRC java

	  /* This program illustrates the differences
	     ,between int and double.
	     ,
	     ,Call this file Example3.java
	  ,*/

	  class Example3 {

	      public static void main(String arg[]) {
		  int var;
		  double x;

		  var = 10;

		  x = 10.0;

		  System.out.println("Original value of var: " + var);
		  System.out.println("Original value of x: " + x);
		  System.out.println();

		  var = var / 4;
		  x = x / 4;

		  System.out.println("var after division : " + var);
		  System.out.println("x after division: " + x);
	      }
	  }

	  #+END_SRC

******* GalToLit
	 #+BEGIN_SRC java
	 /*
	   Try this 1-1

	   This program converts  gallons to liters.

	   Call this program GalToLit.java

	 ,*/

	 class GalToLit {
	     public static void main(String a[]) {
		 double gallons;
		 double liters;

		 gallons = 10;

		 liters = gallons * 3.7854;

		 System.out.println(gallons + " gallons is " + liters + " Liters.");
	     }
	 }

	 #+END_SRC
******* ifDemo.java
	  #+BEGIN_SRC java
	  // Demonstrate if
	  // Call this file ifDemo.java

	  class ifDemo  {
	      public static void main(String[] args) {
		  int a, b, c;

		  a = 2;
		  b = 3;

		  if (a < b) System.out.println("a is less than b");

		  // this wont display anything
		  if (a == b) System.out.println("you wont see this");

		  System.out.println();

		  c = a - b; // c contains -1

		  System.out.println("c contains -1");
		  if (c >= 0) System.out.println("c is non-negative");
		  if (c < 0) System.out.println("c is negative");

		  System.out.println();

		  c = b - a; // c contains 1

		  System.out.println("c contains 1");
		  if (c >= 0) System.out.println("c is non-negative");
		  if (c < 0) System.out.println("c is negative");
	      }
	  }

	  #+END_SRC
******* ForDemo.java
	  #+BEGIN_SRC java

	  /*  Demonstrate the for loop */

	  class ForDemo {
	      public static void main(String args[]){
		  int count;

		  for(count = 0; count < 5; count++)
		      System.out.println("This is count: " + count);

		  System.out.println("Done!");
	      }
	  }

	  #+END_SRC
******* BlockDemo.java
	#+BEGIN_SRC java
	/*  Demonstrate a block of code */

	class BlockDemo {
	    public static void main(String args[]) {
		double i, j, d;

		i = 5;
		j = 10;

		//  the target of this if is a block
		if (i != 0) {
		    System.out.println("i does not equal zero");
		    d = j / i;
		    System.out.println("j / is " + d);
		}
	    }
	}


       #+END_SRC
******* GalToLitTable
	 #+BEGIN_SRC java

	 /*  This program converts  gallons to liters. */

	 class GalToLitTable {
	     public static void main(String a[]) {
		 double gallons, liters;
		 int counter;

		 counter  = 10;
		 for( gallons = 1; gallons <= 100; gallons++){
		     liters = gallons * 3.7854; //convert to liters
		     System.out.println(gallons + " gallons is " +
					liters + "liters.");

		     counter++;
		     // every 10th line, print a blank line
		     if(counter == 10 ){
			 System.out.println();
			 counter = 0; // reset the line counter
		     }
		 }
	     }
	 }

	 #+END_SRC

****** Chapter 2
******* Examples
******** Inches
	   #+BEGIN_SRC java

	   /*  Compute the number of cubic inches
	       in 1 cubic mile
	   ,*/

	   class inches {
	       public static void main(String args[]){
		   long ci;
		   long im;

		   im = 5280 * 12;
		   ci = im * im * im;
		   System.out.println("There are " + ci +
				      " cubic inches in cubic mile.");
	       }
	   }

	   #+END_SRC

******** Hypotenuse
	   #+BEGIN_SRC java

	   /*  Use the pythagorean theorem to
	       find the length of the hypotenuse
	       given the lengths of the two opposing
	       sides */

	   class Hypto {
	       public static void main(String args[]){
		   double x, y, z;

		   x = 3;
		   y = 4;

		   z = Math.sqrt(x*x + y*y);

		   System.out.println("Hypotenuse is " +z);
	       }
	   }


	   #+END_SRC

******** CharArithDemo
	    #+BEGIN_SRC java
	    // Character variables can handle like integers

	    class CharArithDemo {
		public static void main(String args[]) {

		    char ch = 'X';
		    System.out.println("ch contains " + ch);

		    ch++; //increment ch
		    System.out.println("ch is now " + ch);

		    ch = 90; // give ch the value Z
		    System.out.println("ch is now " + ch);

		}
	    }

    #+END_SRC

******** BoolDemo
	    #+BEGIN_SRC java
	    // Demonstrates boolean values.

	    class BoolDemo {
		public static void main(String args[]) {

		    boolean b;

		    b = false;
		    System.out.println("b is " + b);

		    b = true;
		    System.out.println("b is " + b);

		    // a boolean value can control the if statement
		    if(b) System.out.println("This is executed");

		    b = false;
		    if(b) System.out.println("This is not executed");

		    // outcome  of a relational operator is a boolean value
		    System.out.println("10 > 9 is  " + (10 > 9));

		}
	    }

    #+END_SRC

******** StrDemo
	   #+BEGIN_SRC java

	   class StrDemo {
	       public static void main(String args[]){
		   System.out.println("First line\n Second line");
		   System.out.println("A\tB\tC");
		   System.out.println("D\tE\tF");
	       }
	   }


	   #+END_SRC
******** Dyninit
	   #+BEGIN_SRC java
	   // Computes the volume of a cylinder given the radius of its base and its height

	   class Dyninit {
	       public static void main(String args[]){
		   double radius = 4, height = 5;

		   double volume = 3.146 * radius * radius * height;

		   System.out.println("Volume is " + volume);
	       }
	   }


	   #+END_SRC
******** ScopeDemo
	   #+BEGIN_SRC java

	   class ScopeDemo {
	       public static void main(String args[]){
		   int x; // global

		   x = 10;
		   if(x == 10)  { // new scope

		       int y = 20; // block local var

		       // x and y are visible here

		       System.out.println("x and y: " +  x + " " + y);

		       x = y * 2;
		   }

		   // y = 100; // Error! y not known here

		   // x still global/visible here

		   System.out.println("x is " + x);
	       }
	   }


	   #+END_SRC
******** VarInitDemo
	   #+BEGIN_SRC java
	   class VarInitDemo {
	       public static void main(String args[]){
		   int x;

		   for(x = 0; x< 3; x++) {
		       int y = -1;
		       System.out.println("y is: " + y);
		       y = 100;
		       System.out.println("y is now:" + y);
		   }
	       }
	   }


	   #+END_SRC
******** NestVar
	   #+BEGIN_SRC java
	   class NestVar {
	       public static void main(String args[]){
		   int count;

		   for(count = 0; count< 10; count = count+1) {
		       System.out.println("this is count: " + count);

		       int count;
		       for (count = 0; count < 2; count++) {
			   System.out.println("This program is in error!");
		       }
		   }
	       }
	   }


	   #+END_SRC
******** ModDemo
	   #+BEGIN_SRC java

	   class ModDemo {
	       public static void main(String[] args) {
		   int iresult, irem;
		   double dresult, drem;

		   iresult = 10 / 3;
		   irem = 10 % 3;
		   dresult = 10.0 / 3.0;
		   drem = 10.0 % 3.0;

		   System.out.println("Result and remainder of 10 / 3 " +
				      iresult + " " + irem);

		   System.out.println("Result and remainder of 10.0 / 3.0 " +
				      dresult + " " + drem);
	       }
	   }

	   #+END_SRC
******** SqrRoot
	   #+BEGIN_SRC java

	   // Show square roots of 1 to 99 and rounding error.
	   public class SqrRoot {
	       public static void main(String[] args) {
		   double num, sroot, rerr;

		   for (num = 1.0; num < 100.0; num++) {
		       sroot = Math.sqrt(num);
		       System.out.println("Square root of " + num +
					  " is " + sroot);

		       // compute rounding error
		       rerr = num  - (sroot * sroot);
		       System.out.println("Rounding error is " + rerr);
		       System.out.println();
		   }
	       }
	   }

	   #+END_SRC
******** RelLogOps
	   #+BEGIN_SRC java

	   class RelLogOps {
	       public static void main(String[] args) {
		   int i, j;
		   boolean b1, b2;

		   i = 10;
		   j = 11;
		   if(i < j) System.out.println("i < j");
		   if(i <= j) System.out.println("i <= j");
		   if(i != j) System.out.println("i != j");
		   if(i == j) System.out.println("this wont execute");
		   if(i >= j) System.out.println("this wont execute");
		   if(i > j) System.out.println("this wont execute");

		   b1 = true;
		   b2 = false;
		   if(b1 & b2) System.out.println("this wont execute");
		   if(!(b1 & b2)) System.out.println("!(b1 & b2) is true");
		   if(b1 | b2) System.out.println("b1 | b2 is true");
		   if(b1 ^ b2) System.out.println("b1 ^ b2 is true");
	       }
	   }

	   #+END_SRC
******** SCops
	   #+BEGIN_SRC java
	   class SCops {
	       public static void main(String[] args) {
		   int n, d;

		   n = 10;
		   d = 2;
		   if(d != 0 && (n % d) == 0)
		       System.out.println(d + "is a factor of " + n);

		   d = 0;

		   if(d != 0 && (n % d) == 0)
		       System.out.println(d + "is a factor of " + n);


		   if(d != 0 & (n % d) == 0) // WARNING: / by zero
		       System.out.println(d + "is a factor of " + n);

	       }
	   }

	   #+END_SRC
******** SideEffects
	   #+BEGIN_SRC java
	   class SideEffects {
	       public static void main(String[] args) {
		   int i;

		   i = 0;

		   if (false & (++i < 100))
		       System.out.println("this wont be displayed");
		   System.out.println("if statement executed: " + i); // 1


		   if (false && (++i < 100))
		       System.out.println("this wont be displayed");
		   System.out.println("if statement executed: " + i); // still 1
	       }
	   }

	   #+END_SRC
******** LtoD
	   #+BEGIN_SRC java
	   class LtoD {
	       public static void main(String[] args) {
		   long L;
		   double D;

		   D = 1000123285.0;
		   L = D; // ERROR: illegal

		   System.out.println("L and D: " + L + " " + D);
	       }
	   }

	   #+END_SRC
******** CastDemo
	   #+BEGIN_SRC java

	   class CastDemo {
	       public static void main(String[] args) {
		   double x, y;
		   byte b;
		   int i;
		   char ch;

		   x = 10.0;
		   y = 3.0;

		   i = (int) (x / y); // double to int
		   System.out.println("Integer outcome of x / y: " + i);

		   i = 100;
		   b = (byte) i;
		   System.out.println("Value of b: " + b);

		   i = 257;
		   b = (byte) i;
		   System.out.println("Value of b:" + b);

		   b = 88; // ASCII X
		   ch = (char) b;
		   System.out.println("ch: " + ch);
	       }
	   }

	   #+END_SRC
******** PromDemo
	   #+BEGIN_SRC java
	   class PromDemo {
	       public static void main(String[] args) {
		   byte b;
		   int i;

		   b = 10;
		   i = b * b;

		   b = 10;
		   b = (byte) (b * b);

		   System.out.println("i and b: " + i + " " + b);
	       }
	   }


	   #+END_SRC
******** UseCast
	   #+BEGIN_SRC java
	   class UseCast {
	       public static void main(String[] args) {
		   int i;

		   for (i = 0; i < 5; i++) {
		       System.out.println(i + " / 3: " + i / 3 );
		       System.out.println(i + " / 3 with fractions: "
					  + (double) i / 3);
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
******* Try This
******** Try This 2-1 Sound
	   #+BEGIN_SRC java

	   class Sound {
	       public static void main(String args[]){
		   double dist;

		   dist = 7.2 * 1110;

		   System.out.println("The lightning is " + dist +
				      " feet away.");
	       }
	   }


	   #+END_SRC
******** Try This 2-1 Sound - Challenge
	   #+BEGIN_SRC java

	   #+END_SRC
******** Try This 2-2 LogicalOpTable
	   #+BEGIN_SRC java
	   class LogicalOpTable {
	       public static void main(String[] args) {
		   boolean p, q;

		   System.out.println("P\tQ\tAND\tOR\tXOR\tNOT");

		   p = true; q = true;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));

		   p = true; q = false;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));


		   p = false; q = true;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));

		   p = false; q = false;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));
	       }
	   }

	   #+END_SRC
******** Try This 2-2 LogicalOpTable - Challenge
	   #+BEGIN_SRC java

	   class LogicalOpTableChallenge {
	       public static void main(String[] args) {
		   boolean p, q;

		   System.out.println("P\tQ\tAND\tOR\tXOR\tNOT");

		   p = true; q = true;
		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = true; q = false;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = false; q = true;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = false; q = false;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

	       }
	   }


	   #+END_SRC

****** Chapter 3
****** Chapter 4
******* Examples
******** VehicleDemo
	   #+BEGIN_SRC java
	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;
	   }

	   class VehicleDemo {
	       public static void main(String[] args) {
		   Vehicle minivan = new Vehicle();
		   int range;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   range = minivan.fuelcap * minivan.mpg;
		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with a range of " + range);
	       }
	   }

	   #+END_SRC
******** TwoVehicle
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;
	   }

	   class TwoVehicles {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   int range, range2;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;


		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   range = minivan.fuelcap * minivan.mpg;
		   range2 = sportscar.fuelcap * sportscar.mpg;

		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with a range of " + range);

		   System.out.println("Sportscar can carry " + sportscar.passengers +
				      " with a range of " + range2);
	       }
	   }

	   #+END_SRC
******** AddMeth
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // Display the range
	       void range () {
		   System.out.println("Range is " + fuelcap * mpg);
	       }
	   }

	   class AddMeth {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   int range, range2;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   range = minivan.fuelcap * minivan.mpg;
		   range2 = sportscar.fuelcap * sportscar.mpg;

		   System.out.print("Minivan can carry " +  minivan.passengers +
				    ". ");

		   minivan.range(); // Display range of minivan

		   System.out.print("Sportscar can carry " + sportscar.passengers +
				    ". ");

		   sportscar.range(); // Display range of sportcar
	       }
	   }

	   #+END_SRC
******** RetMeth
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // Display the range
	       int range () {
		   return mpg * fuelcap;
	       }
	   }

	   class RetMeth {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with ranger of " + minivan.range() + " Miles");

		   System.out.print("Sportscar can carry " + sportscar.passengers +
				    " with ranger of " + sportscar.range() + " Miles");
	       }
	   }

	   #+END_SRC
******** IsFact
	   #+BEGIN_SRC java

	   class Factor {

	       boolean isFactor (int a, int b){
		   if ( (b % a) == 0) return true;
		   else return false;
	       }
	   }

	   class IsFact {
	       public static void main(String[] args) {

		   Factor x = new Factor();

		   if (x.isFactor(2, 20)) System.out.println("2 is factor");
		   if (x.isFactor(3, 20)) System.out.println("This wont be displayed");
	       }
	   }

	   #+END_SRC
******** VehicleDemo2
	   #+BEGIN_SRC java


	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // return the range
	       int range () {
		   return mpg * fuelcap;
	       }

	       double fuelneeded (int miles){
		   return (double) miles / mpg;
	       }
	   }

	   class CompFuel {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   double gallons;
		   int dist = 252;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   gallons = minivan.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles minivan needs  " +
				      gallons + "gallons of fuel.");

		   System.out.println("To go " + dist + " miles sportcar needs  " +
				      gallons + "gallons of fuel.");
	       }
	   }
	   #+END_SRC
******** ConsDemo
	   #+BEGIN_SRC java


	   class MyClass {
	       int x;

	       MyClass () {
		   x = 10;
	       }
	   }

	   class ConsDemo {
	       public static void main(String[] args) {
		   MyClass t1 = new MyClass();
		   MyClass t2 = new MyClass();

		   System.out.println(t1.x + " " + t2.x);
	       }
	   }
	   #+END_SRC
******** VehConsDemo
	   #+BEGIN_SRC java

	   class Vehicle {

	       int passengers;
	       int fuelcap;
	       int mpg;

	       Vehicle (int p, int f, int m) {

		   passengers = p;
		   fuelcap = f;
		   mpg = m;
	       }

	       // return the range
	       int range () {

		   return mpg * fuelcap;
	       }

	       double fuelneeded (int miles){
		   return (double) miles / mpg;
	       }
	   }

	   class VehConsDemo {
	       public static void main(String[] args) {

		   // Construct complete vehicles
		   Vehicle minivan = new Vehicle(7, 16, 21);
		   Vehicle sportscar = new Vehicle(2, 14, 12);

		   double gallons;
		   int dist = 252;

		   gallons = minivan.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles minivan needs  " +
				      gallons + " gallons of fuel.");

		   gallons = sportscar.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles sportcar needs  " +
				      gallons + " gallons of fuel.");
	       }
	   }

	   #+END_SRC
******** DemoPwr
	   #+BEGIN_SRC java

	   class Pwr {
	       double b;
	       int e;
	       double val;

	       Pwr (double base, int exp) {
		   b = base;
		   e = exp;

		   val = 1;
		   if (exp == 0) return;
		   for (; exp > 0; exp--) val = val * base;
	       }

	       double get_pwr() {
		   return val;
	       }
	   }

	   class DemoPwr {
	       public static void main(String[] args) {
		   Pwr x = new Pwr(4.0, 2);
		   Pwr y = new Pwr(2.5, 1);
		   Pwr z = new Pwr(5.7, 0);

		   System.out.println(x.b + " raised to the " + x.e +
				      " power is " + x.get_pwr());

		   System.out.println(y.b + " raised to the " + y.e +
				      " power is " + y.get_pwr());

		   System.out.println(z.b + " raised to the " + z.e +
				      " power is " + z.get_pwr());
	       }
	   }
	   #+END_SRC
******* Try This
******** Try this 4-1 HelpClassDemo
	   #+BEGIN_SRC java
	   // Try this 4-1

	   // Convert the help system from Try This 3-3 into
	   // a Help Class

	   class Help {
	       void helpOn(int what) {
		   switch(what) {
		   case '1':
		       // System.out.println("The if:\n");
		       System.out.println("if(condition) statement;");
		       System.out.println("else statement;");
		       break;
		   case '2':
		       System.out.println("The switch:\n");
		       System.out.println("switch(expression) {");
		       System.out.println(" case constant:");
		       System.out.println("   statement sequence ");
		       System.out.println("    break;");
		       System.out.println("   // ...");
		       System.out.println("}");
		       break;
		   case '3':
		       System.out.println("The for:\n");
		       System.out.println("for(init; condition; iteration)");
		       System.out.println(" statement");
		       break;
		   case '4':
		       System.out.println("The while:\n");
		       System.out.println("while(condition) statement");
		       break;
		   case '5':
		       System.out.println("The do-while:\n");
		       System.out.println("do {");
		       System.out.println("   statement;");
		       System.out.println("} while (condition);");
		       break;
		   case '6':
		       System.out.println("The break:\n");
		       System.out.println("break; or break label;");
		       break;
		   case '7':
		       System.out.println("The continue:\n");
		       System.out.println("continue; or continue label;");
		       break;
		   }
		   System.out.println();
	       }

	       void showMenu() {
		   System.out.println("Help on:");
		   System.out.println("   1. if");
		   System.out.println("   2. switch");
		   System.out.println("   3. for");
		   System.out.println("   4. while");
		   System.out.println("   5. do-while");
		   System.out.println("   6. break");
		   System.out.println("   7. continue");
		   System.out.println("Choose one (q to quit): ");
	       }

	       boolean isValid(int ch) {
		   if(ch < '1' | ch > '7' & ch != 'q') return false;
		   else return true;
	       }
	   }

	   class HelpClassDemo {
	       public static void main(String[] args)
		   throws java.io.IOException {

		   char choice, ignore;
		   Help hlpobj = new Help();

		   for (;;) {
		       do {
			   hlpobj.showMenu();

			   choice = (char) System.in.read();

			   do {
			       ignore = (char) System.in.read();
			   } while(ignore != '\n');

		       } while( !hlpobj.isValid(choice));

		       if(choice == 'q') break;

		       System.out.println("\n");

		       hlpobj.helpOn(choice);
		   }
	       }
	   }


	   #+END_SRC
****** Chapter 5
******* Examples
******** ArrayDemo
	   #+BEGIN_SRC java

	   class ArrayDemo {
	       public static void main(String[] args) {
		   int sample[] = new int[10];
		   int i;

		   for (i = 0; i < 10; i = i + 1)
		       sample[i] = i;

		   for (i = 0; i < 10; i= i + 1)
		       System.out.println("This is sample[" + i + "]: " +
					  sample[i]);
	       }
	   }
	   #+END_SRC
******** MinMax
	   #+BEGIN_SRC java

	   class MinMax {
	       public static void main(String[] args) {
		   int nums[] = new int[10];
		   int min, max;

		   nums[0] = 99;
		   nums[1] = -10;
		   nums[2] = 100123;
		   nums[3] = 18;
		   nums[4] = -978;
		   nums[5] = 5623;
		   nums[6] = 463;
		   nums[7] = -9;
		   nums[8] = 287;
		   nums[9] = 49;

		   min = max = nums[0];

		   for (int i = 1; i < 10; i++) {
		       if(nums[i] < min) min = nums[i];
		       if(nums[i] > max) max = nums[i];
		   }

		   System.out.println("min and max:" + min + " " + max);
	       }
	   }


	   #+END_SRC
******** MinMax2
	   #+BEGIN_SRC java

	   class MinMax2 {
	       public static void main(String[] args) {
		   int nums[] = {99, -10, 100123, 18, -978,
				 5623, 463, -9, 287, 49};
		   int min, max;

		   min = max = nums[0];
		   for (int i = 1; i < 10; i++) {
		       if(nums[i] < min) min = nums[i];
		       if(nums[i] > max) max = nums[i];
		   }

		   System.out.println("min and max:" + min +b " " + max);
	       }
	   }


	   #+END_SRC
******** ArrayErr
	   #+BEGIN_SRC java

	   class ArrayErr {
	       public static void main(String[] args) {
		   int sample[] = new int[10];
		   int i;

		   // generate an array overrun
		   for (i = 0; i < 100; i = i+1)
		       sample[i] = i;
	       }
	   }

	   #+END_SRC
******** TwoD
	   #+BEGIN_SRC java

	   class TwoD {
	       public static void main(String[] args) {
		   int t, i;
		   int table[][] = new int[3][4];

		   for (t = 0; t < 3; ++t) {
		       for (i = 0; i < 4; ++i) {
			   table[t][i] = (t*4) +i +1;
			   System.out.println(table[t][i] + " ");
		       }
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
******** Squares
	   #+BEGIN_SRC java

	   class Squares {
	       public static void main(String[] args) {
		   int sqrs[][] = {
		       {1, 1},
		       {2, 4},
		       {3, 9},
		       {4, 16},
		       {5, 25},
		       {6, 36},
		       {7, 49},
		       {8, 64},
		       {9, 81},
		       {10, 100}
		   };

		   int i, j;

		   for (i = 0; i < 10; i++) {
		       for (j = 0; j < 2; j++)
			   System.out.print(sqrs[i][j] + " ");
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
******** AssignARef
	   #+BEGIN_SRC java

	   class AssignARef {
	       public static void main(String[] args) {
		   int i;

		   int nums1[] = new int[10];
		   int nums2[] = new int[10];

		   for (i = 0; i < 10; i++)
		       nums1[i] = i;

		   for (i = 0; i < 10; i++)
		       nums2[i] = i;

		   System.out.print("Here is nums1: ");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums1[i] + " ");
		   System.out.println();

		   nums2 = nums1; // now num2 refers to nums1

		   System.out.print("Here is nums2 after assignment: ");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums2[i] + " ");
		   System.out.println();

		   // now operate on nums1 array through nums2
		   nums2[3] = 99;

		   System.out.print("Here is nums1 after chang through nums2:");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums1[i] + " ");
		   System.out.println();
	       }
	   }


	   #+END_SRC
******** LengthDemo
	   #+BEGIN_SRC java

	   class LengthDemo {
	       public static void main(String[] args) {
		   int list[] = new int[10];
		   int nums[] = { 1, 2, 3};
		   int table[][] = { // a variable-length table

		       {1, 2, 3},
		       {4, 5},
		       {6, 7, 8, 9}
		   };

		   System.out.println("length of list is " + list.length);
		   System.out.println("length of list is " + nums.length);
		   System.out.println("length of table is " + table.length);
		   System.out.println("length of table[0] is " + table[0].length);
		   System.out.println("length of table[1] is " + table[1].length);
		   System.out.println("length of table[2] is " + table[2].length);
		   System.out.println();

		   // use length to initialize list
		   for (int i = 0; i < list.length; i++)
		       list[i] = i * i;

		   System.out.print("Here is list: ");
		   // now use length to display list
		   for (int i = 0; i < list.length; i++)
		       System.out.print(list[i] + " ");
		   System.out.println();
	       }
	   }


	   #+END_SRC
******** ACopy
	   #+BEGIN_SRC java

	   class ACopy {
	       public static void main(String[] args) {

		   int i;
		   int nums1[] = new int[10];
		   int nums2[] = new int[10];

		   for (i = 0; i < nums1.length; i++)
		       nums1[i] = i;

		   // copy nums1 to nums2
		   if(nums2.length >= nums1.length)
		       for (i = 0; i < nums1.length; i++)
			   nums2[i] = nums1[i];

		   for (i = 0; i < nums2.length; i++)
		       System.out.println(nums2[i] + " ");
	       }
	   }


	   #+END_SRC
******** UpCase
	   #+BEGIN_SRC java

	   class UpCase {
	       public static void main(String[] args) {
		   char ch;

		   for (int i = 0; i < 10; i++) {
		       ch = (char) ('a' + i);
		       System.out.print(ch);

		       // This statement turns off the 6th bit.
		       ch = (char) ((int) ch & 65503); // ch is now uppercase

		       System.out.print(ch + " ");
		   }
	       }
	   }


	   #+END_SRC
******** ShowBits
	   #+BEGIN_SRC java

	   class ShowBits {
	       public static void main(String[] args) {
		   int t;
		   byte val;

		   val= 123;
		   for (t = 128; t > 0; t = t/2) {
		       if((val & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
	       }
	   }


	   #+END_SRC
******** LowCase
	   #+BEGIN_SRC java

	   class LowCase {
	       public static void main(String[] args) {
		   char ch;

		   for (int i = 0; i < 10; i++) {
		       ch = (char) ('A' + i);
		       System.out.print(ch);

		       // This statement turns on the 6th bit.
		       ch = (char) ((int) ch | 32); // ch isnw lowercase

		       System.out.print(ch + " ");
		   }
	       }
	   }


	   #+END_SRC
******** Encode
	   #+BEGIN_SRC java

	   class Encode {
	       public static void main(String[] args) {
		   String msg = "This is a test";
		   String encmsg = "";
		   String decmsg = "";
		   int key = 88;

		   System.out.print("Original message");
		   System.out.println(msg);

		   // encode the message
		   for (int i = 0; i < msg.length(); i++)
		       encmsg = encmsg + (char) (msg.charAt(i) ^ key);

		   System.out.print("Encoded message: ");
		   System.out.println(encmsg);

		   // decode the message
		   for (int i = 0; i < msg.length(); i++)
		       decmsg = decmsg + (char) (encmsg.charAt(i) ^ key);

		   System.out.print("Decoded message: ");
		   System.out.println(decmsg);
	       }
	   }


	   #+END_SRC
******** NotDemo
	   #+BEGIN_SRC java

	   class NotDemo {
	       public static void main(String[] args) {
		   byte b = -34;

		   for (int t = 128; t > 0; t = t/2) {
		       if((b & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
		   System.out.println();

		   // reverse all bits
		   b = (byte) ~b;

		   for (int t = 128; t > 0; t = t/2) {
		       if((b & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
	       }
	   }


	   #+END_SRC
******** ShiftDemo
	   #+BEGIN_SRC java

	   class ShiftDemo {
	       public static void main(String[] args) {
		   int val = 1;

		   for (int i = 0; i < 8; i++) {
		       for (int t = 128; t > 0; t = t/2) {
			   if ((val & t) != 0) System.out.print("1 ");
			   else System.out.print("0 ");
		       }

		       System.out.println();
		       val = val << 1;	// left shift
		   }
		   System.out.println();

		   val = 128;

		   for (int i = 0; i < 8; i++) {
		       for (int t = 128; t > 0; t = t/2) {
			   if ((val & t) != 0) System.out.print("1 ");
			   else System.out.print("0 ");
		       }

		       System.out.println();
		       val = val >> 1;	// right shift
		   }
	       }
	   }


	   #+END_SRC
******** NoZeroDiv
	   #+BEGIN_SRC java

	   class NoZeroDiv {
	       public static void main(String[] args) {

		   int result;

		   for (int i = -5; i < 6; i++) {
		       result = i != 0 ? 100 / i : 0;
		       if(i != 0)
			   System.out.println("100 / " + i + " is " + result);
		   }
	       }
	   }


	   #+END_SRC
******** NoZeroDiv2
	   #+BEGIN_SRC java

	   class NoZeroDiv2 {
	       public static void main(String[] args) {

		   for (int i = -5; i < 6; i++)
		       if(i != 0 ? true : false)
			   System.out.println("100 / " + i +
					      " is " + 100 / i);
	       }
	   }
	   #+END_SRC
******* Try This
******** Try this 5-1 Bubbles
	   #+BEGIN_SRC java

	   /*
	     Try This 5-1

	     Demonstrate the Bubble sort.
	   ,*/

	   class Bubble {
	       public static void main(String[] args) {
		   int nums[] = {99, -10, 100123, 18, -978,
				 5623, 463, -9, 287, 49};

		   int a, b, t;
		   int size;

		   size = 10; // number of elements to sort

		   // display original array
		   System.out.println("Original array is:");
		   for (int i = 0; i < size; i++)
		       System.out.println(" " + nums[i]);
		   System.out.println();

		   // This is the Bubble sort.
		   for (a = 1; a < size; a++)
		       for (b = size-1; b >= a; b--) {
			   if(nums[b-1] > nums[b]) { // if out of order
			       // exchance elements
			       t = nums[b-1];
			       nums[b-1] = nums[b];
			       nums[b] = t;
			   }

		       }

		   // display sorted array
		   System.out.println("Sorted array is:");
		   for (int i = 0; i < size; i++)
		       System.out.println(" " + nums[i]);
		   System.out.println();
	       }
	   }


	   #+END_SRC
******** Try this 5-2 Queue
	   #+BEGIN_SRC java

	   class Queue {
	       char q[];
	       int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }


	   class QueueDemo {
	       public static void main(String[] args) {
		   Queue bigQ = new Queue(100);
		   Queue smallQ = new Queue(4);
		   char ch;
		   int i;

		   System.out.println("Using bigQ to store the alphabet.");

		   for (i = 0; i < 26; i++) {
		       bigQ.put((char) ('A' + i) );
		   }

		   // retrieve
		   System.out.println("Contents of bigQ: ");
		   for (i = 0; i < 26; i++) {
		       ch = bigQ.get();
		       if(ch != (char) 0) System.out.println(ch);
		   }

		   System.out.println("\n");


		   System.out.println("Using smallQ to generate errors.");
		   // Now
		   for (i = 0; i < 5; i++) {
		       System.out.println("Attempting to store " + (char) ('Z' - i));

		       smallQ.put((char) ('Z' - i));

		       System.out.println();
		   }
		   System.out.println();

		   // more errors on smallQ
		   System.out.println("Contets of smallQ: ");
		   for (i = 0; i < 5; i++) {
		       ch = smallQ.get();

		       if(ch != (char ) 0) System.out.println(ch);
		   }
	       }
	   }


	   #+END_SRC
******** Try this 5-3 A ShowBits Class
	   #+BEGIN_SRC java

	   /*
	     Try This 5-3
	     A class that displays the binary representation of a value
	   ,*/


	   class ShowBits {
	       int numbits;

	       ShowBits(int n){
		   numbits = n;
	       }

	       void show(long val){
		   long mask = 1;

		   // left-shift a 1 into the proper position
		   mask <<= numbits-1;

		   int spacer = 0;
		   for (; mask != 0; mask >>>= 1) {
		       if((val & mask) != 0) System.out.print("1");
		       else System.out.print("0");
		       spacer++;
		       if((spacer % 8) == 0){
			   System.out.print(" ");
			   spacer = 0;
		       }
		   }
		   System.out.println();
	       }
	   }


	   // Demonstrate ShowBits
	   class ShowBitsDemo {
	       public static void main(String[] args) {
		   ShowBits b = new ShowBits(8);
		   ShowBits i = new ShowBits(32);
		   ShowBits li = new ShowBits(64);

		   System.out.println("123 in binary: ");
		   b.show(123);

		   System.out.println("\n87987 in binary: ");
		   i.show(237658768);

		   // you can also show low-order bits of any integer
		   System.out.println("\nLow order 8 bits of 87987 in binary: ");
		   li.show(87987);
	       }
	   }


	   #+END_SRC

****** Chapter 6
******* Examples
******** AcessDemo
	   #+BEGIN_SRC java

	   class MyClass {
	       private int alpha; // private acess
	       public int beta; // public acess
	       int gamma; // default acess

	       /* Methods to acess alpha. It is OK f
		  of a class to acess a private member
		  of the same class.
	       ,*/


	       void setAlpha(int a) {
		   alpha = a;
	       }

	       int getAlpha() {
		   return alpha;
	       }
	   }

	   class AcessDemo {
	       public static void main(String[] args) {
		   MyClass ob = new MyClass();

		   /* Acess to alpha is allowed only through
		      its acessor methods. */
		   ob.setAlpha(-99);
		   System.out.println("ob.alpha is " + ob.getAlpha());

		   // You cannot acess alpha like this:
		   ob.alpha = 10; // Wrong! alpha is private!

		   // There are OK because beta and gamma are public.
		   ob.beta = 88;
		   ob.gamma = 99;
	       }
	   }


	   #+END_SRC
******** CallByValue
	   #+BEGIN_SRC java

	   class Test {
	       /* This method cause no change to the arguments
		  used in the call. */

	       void noChange(int i, int j) {
		   i = i + j;
		   j = -j;
	       }
	   }

	   class CallByValue {
	       public static void main(String[] args) {
		   Test ob = new Test();

		   int a = 15, b = 20;

		   System.out.println("a and b before call: " +
				      a + " " +b);

		   ob.noChange(a, b);

		   System.out.println("a and b after call: " +
				      a + " " + b);
	       }
	   }


	   #+END_SRC
******** PassObRef
	   #+BEGIN_SRC java

	   class Test {
	       int a, b;

	       Test(int i, int  j) {
		   a = i;
		   b = j;
	       }

	       void Change(Test ob) {
		   ob.a = ob.a + ob.b;
		   ob.b = -ob.b;
	       }
	   }

	   class PassObRef {
	       public static void main(String[] args) {
		   Test ob = new Test(15, 20);

		   System.out.println("ob.a and ob.b before call: " +
				      ob.a + " " + ob.b);

		   ob.Change(ob);

		   System.out.println("ob.a and ob.b after call: " +
				      ob.a + " " + ob.b);
	       }
	   }

	   #+END_SRC
******** ErrorMsg
	   #+BEGIN_SRC java

	   class ErrorMsg {
	       String msgs[] = {
		   "Output Error",
		   "Input Error",
		   "Disk Full",
		   "Index Out-Of-Bounds"
	       };

	       String getErrorMsg(int i) {
		   if(i >= 0 & i < msgs.length)
		       return msgs[i];
		   else
		       return "Invalid Error Code";
	       }
	   }

	   class ErrMsg {
	       public static void main(String[] args) {

		   ErrorMsg err = new ErrorMsg();

		   System.out.println(err.getErrorMsg(2));
		   System.out.println(err.getErrorMsg(19));
	       }
	   }


	   #+END_SRC
******** ErrInfo
	   #+BEGIN_SRC java

	   class Err {

	       String msg;
	       int severity;

	       Err(String m, int s) {
		   msg = m;
		   severity = s;
	       }
	   }

	   class ErrorInfo {

	       String msgs[] = {
		   "Output Error",
		   "Input Error",
		   "Disk Full",
		   "Index Out-Of-Bounds"
	       };

	       int howbad[] = { 3, 3, 2, 4};


	       Err getErrorInfo(int i) {
		   if(i >= 0 & i < msgs.length)
		       return  new Err(msgs[i], howbad[i]);
		   else
		       return new Err("Invalid Error Code", 0);
	       }
	   }

	   class ErrInfo {
	       public static void main(String[] args) {

		   ErrorInfo err = new ErrorInfo();
		   Err e;

		   e = err.getErrorInfo(2);
		   System.out.println(e.msg + " severity: " + e.severity);

		   e = err.getErrorInfo(19);
		   System.out.println(e.msg + " severity: " + e.severity);
	       }
	   }


	   #+END_SRC
******** Overload
	   #+BEGIN_SRC java

	   class Overload {
	       void ovlDemo() {
		   System.out.println("No parameters");
	       }

	       void ovlDemo(int a) {
		   System.out.println("One parameters: " + a);
	       }

	       int ovlDemo(int a, int b) {
		   System.out.println("Two parameters: " + a + " " + b);
		   return a + b;
	       }

	       double ovlDemo(double a, double b) {
		   System.out.println("Two double parameters: " +
				      a + " " + b);
		   return a + b;
	       }
	   }


	   class OverloadDemo {
	       public static void main(String[] args) {
		   Overload ob = new Overload();
		   int resI;
		   double resD;

		   ob.ovlDemo();
		   System.out.println();

		   resI = ob.ovlDemo(4, 6);
		   System.out.println("Result of ob.ovlDemo(4, 6): " + resI
				      + "\n");

		   resD = ob.ovlDemo(1.1, 2.32);
		   System.out.println("Result of ob.ovlDemo(1.1, 2.32): " + resD
				      + "\n");
	       }
	   }


	   #+END_SRC
******** Overload2
	   #+BEGIN_SRC java
	   class Overload2 {

	       void f(byte x) {
		   System.out.println("Inside f(byte): " + x);
	       }


	       void f(int x) {
		   System.out.println("Inside f(int): " + x);
	       }

	       void f(double x) {
		   System.out.println("Inside f(double): " + x);
	       }
	   }


	   class TypeConv {
	       public static void main(String[] args) {
		   Overload2 ob = new Overload2();

		   int i = 10;
		   double d = 10.1;

		   byte b = 99;
		   short s = 10;
		   float f = 11.5F;

		   ob.f(i);
		   ob.f(d);

		   ob.f(b);
		   ob.f(s);
		   ob.f(f);
	       }
	   }


	   #+END_SRC
******** OverloadConsDemo
	   #+BEGIN_SRC java

	   class MyClass {
	       int x;

	       MyClass() {
		   System.out.println("Inside MyClass().");
		   x = 0;
	       }

	       MyClass(int i) {
		   System.out.println("Inside MyClass(int).");
		   x = i;
	       }
	       MyClass(double d) {
		   System.out.println("Inside MyClass(double).");
		   x = (int) d;
	       }

	       MyClass(int i, int j) {
		   System.out.println("Inside MyClass(int, int).");
		   x = i * j;
	       }
	   }

	   class OverloadConsDemo {
	       public static void main(String[] args) {
		   MyClass t1 = new MyClass();
		   MyClass t2 = new MyClass(88);
		   MyClass t3 = new MyClass(17.23);
		   MyClass t4 = new MyClass(2, 4);

		   System.out.println("t1.x: " + t1.x);
		   System.out.println("t2.x: " + t2.x);
		   System.out.println("t3.x: " + t3.x);
		   System.out.println("t4.x: " + t4.x);
	       }
	   }


	   #+END_SRC
******** Summation
	   #+BEGIN_SRC java

	   class Summation {
	       int sum;

	       Summation(int num) {
		   sum = 0;
		   for (int i = 1; i <= num; i++)
		       sum += i;
	       }

	       Summation(Summation ob) {
		   sum = ob.sum;
	       }
	   }

	   class SumDemo {
	       public static void main(String[] args) {
		   Summation s1 = new Summation(5);
		   Summation s2 = new Summation(s1);

		   System.out.println("s1.sum: " + s1.sum);
		   System.out.println("s2.sum: " + s2.sum);
	       }
	   }


	   #+END_SRC
******** Factorial
	   #+BEGIN_SRC java

	   class Factorial {

	       int factR(int n) {
		   int result;

		   if(n==1) return 1;
		   result = factR(n-1) * n;
		   return result;
	       }

	       int factI(int n) {
		   int t, result;

		   result = 1;
		   for (t = 1; t <= n; t++) result *= t;
		   return result;
	       }
	   }


	   class Recursion {
	       public static void main(String[] args) {
		   Factorial f = new Factorial();

		   System.out.println("Factorials using recursive method.");
		   System.out.println("Factorial of 3 is " + f.factR(3));
		   System.out.println("Factorial of 3 is " + f.factR(4));
		   System.out.println("Factorial of 3 is " + f.factR(5));
		   System.out.println();

		   System.out.println("Factorials using iterative method.");
		   System.out.println("Factorial of 3 is " + f.factI(3));
		   System.out.println("Factorial of 3 is " + f.factI(4));
		   System.out.println("Factorial of 3 is " + f.factI(5));
	       }
	   }


	   #+END_SRC
******** StaticDemo
	   #+BEGIN_SRC java

	   class StaticDemo {

		       int x;
		       static int y;

		       int sum() {
			   return x + y;
		       }
		   }

		   class SDemo {
		       public static void main(String[] args) {

			   StaticDemo ob1 = new StaticDemo();
			   StaticDemo ob2 = new StaticDemo();

			   ob1.x = 10;
			   ob2.x = 20;
			   System.out.println("Of course, ob1.x and ob2.x " +
					      "are independent.");

			   System.out.println("ob1.x: " + ob1.x +
					      "\nob2.x. " + ob2.x);

			   System.out.println();

			   System.out.println("The static variable y is shared.");
			   StaticDemo.y = 100;
			   System.out.println("Set StaticDemo.y to 19.");

			   System.out.println("ob1.sum(): " + ob1.sum());
			   System.out.println("ob2.sum(): " + ob2.sum());
			   System.out.println();

			   StaticDemo.y = 100;
			   System.out.println("Change StaticDemo.y to 100");

			   System.out.println("ob1.sum(): " + ob1.sum());
			   System.out.println("ob2.sum(): " + ob2.sum());
			   System.out.println();
		       }
		   }


	   #+END_SRC
******** StaticMeth
	   #+BEGIN_SRC java

	   class StaticMeth {
	       static int val = 1024;

	       static int valDiv2() {
		   return val/2;
	       }
	   }

	   class SDemo2 {
	       public static void main(String[] args) {
		   System.out.println("val is " + StaticMeth.val);
		   System.out.println("StaticMeth.valDiv2(): " +
				      StaticMeth.valDiv2());

		   StaticMeth.val = 4;
		   System.out.println("val is " + StaticMeth.val);
		   System.out.println("StaticMeth.valDiv2(): " +
				      StaticMeth.valDiv2());
	       }
	   }


	   #+END_SRC
******** StaticBlock
	   #+BEGIN_SRC java

	   class StaticBlock {
	       static double rootOf2;
	       static double rootOf3;

	       static {
		   System.out.println("Inside static block.");
		   rootOf2 = Math.sqrt(2.0);
		   rootOf3 = Math.sqrt(3.0);
	       }

	       StaticBlock(String msg) {
		   System.out.println(msg);
	       }
	   }


	   class SDemo3 {
	       public static void main(String[] args) {
		   StaticBlock ob = new StaticBlock("Inside Constructor");

		   System.out.println("Square root of 2 is " +
				      StaticBlock.rootOf2);
		   System.out.println("Square root of 3 is " +
				      StaticBlock.rootOf3);
	       }
	   }


	   #+END_SRC
******** VarArgs
	   #+BEGIN_SRC java

	   // Demonstrate variable-length arguments.
	   class VarArg {

	       // vaTest() now uses a vararg.
	       static void vaTest(int ... v) {
		   System.out.print("Number of args: " + v.length + " Contents: ");

		   for(int x : v){
		       System.out.print(x + " ");

		       System.out.println();
		   }

	       }

	       public static void main(String[] args) {

		   // Notice how vaTest() can be called with a
		   // variable number of arguments.
		   vaTest(10);        // 1 arg
		   vaTest(1, 2, 3);   // 3 args
		   vaTest();          // no args
	       }
	   }


	   #+END_SRC
******** VarArgs2
	   #+BEGIN_SRC java

	   // Use varargs with standard arguments.
	   class VarArg2 {

	       // Here, msg is a normal parameter and v is a
	       // VarArg parameter
	       static void vaTest(String msg, int ... v) {
		   System.out.print(msg + v.length + " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest("One vaarg: ", 10);
		   vaTest("Three varargs: ", 1, 2, 3);
		   vaTest("No varags: ");
	       }
	   }


	   #+END_SRC
******** VarArgs3
	   #+BEGIN_SRC java


	   // Use varargs with standard arguments.
	   class VarArg3 {

	       static void vaTest(int ... v) {
		   System.out.print("vaTest(int ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(boolean ... v) {
		   System.out.print("vaTest(boolean ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(boolean x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(String msg, int ... v) {
		   System.out.print("vaTest(String, int ...): " +
				    msg + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest(1, 2, 3);
		   vaTest("Testing: ", 10, 20);
		   vaTest(true, false, false);
	       }
	   }

	   #+END_SRC
******** VarArg4 Ambiguity
	   #+BEGIN_SRC java

	   // Vaargs, overloading, and ambiguity.
	   //
	   // This program contains an error and will
	   // not compile!

	   class VarArg4 {

	       static void vaTest(int ... v) {
		   System.out.print("vaTest(int ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(boolean ... v) {
		   System.out.print("vaTest(boolean ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(boolean x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest(1, 2, 3); // OK
		   vaTest(true, false, false); // OK
		   vaTest(); // Error: Ambiguous
	       }
	   }


	   #+END_SRC
******* Try This
******** Try 6-1 Queue - Control Acess
	    #+BEGIN_SRC java

	    class Queue {
		private char q[];
		private int putloc, getloc;

		Queue(int size) {
		    q = new char[size];
		    putloc = getloc = 0;
		}

		void put(char ch){
		    if(putloc==q.length){
			System.out.println(" - Queue is full.");
			return;
		    }

		    q[putloc++] = ch;
		}

		char get() {
		    if(getloc == putloc) {
			System.out.println(" - Queue is empty.");
			return (char) 0;
		    }

		    return q[getloc++];
		}
	    }

	    class QueueDemo {
		public static void main(String[] args) {
		    Queue bigQ = new Queue(100);
		    Queue smallQ = new Queue(4);
		    char ch;
		    int i;

		    System.out.println("Using bigQ to store the alphabet.");

		    for (i = 0; i < 26; i++) {
			bigQ.put((char) ('A' + i) );
		    }

		    // retrieve
		    System.out.println("Contents of bigQ: ");
		    for (i = 0; i < 26; i++) {
			ch = bigQ.get();
			if(ch != (char) 0) System.out.println(ch);
		    }

		    System.out.println("\n");

		    System.out.println("Using smallQ to generate errors.");
		    // Now
		    for (i = 0; i < 5; i++) {
			System.out.println("Attempting to store " + (char) ('Z' - i));

			smallQ.put((char) ('Z' - i));

			System.out.println();
		    }
		    System.out.println();

		    // more errors on smallQ
		    System.out.println("Contets of smallQ: ");
		    for (i = 0; i < 5; i++) {
			ch = smallQ.get();

			if(ch != (char ) 0) System.out.println(ch);
		    }
		}
	    }
	    #+END_SRC

******** Try 6-2 Queue - Construct Overload
	   #+BEGIN_SRC java

	   class Queue {
	       private char q[];
	       private int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       Queue(Queue ob) {
		   putloc = ob.putloc;
		   getloc = ob.getloc;
		   q = new char[ob.q.length];

		   for (int i = getloc; i < putloc; i++) {
		       q[i] = ob.q[i];
		   }
	       }

	       Queue(char a[]) {
		   putloc = 0;
		   getloc = 0;
		   q = new char[a.length];

		   for (int i = 0; i < a.length; i++) {
		       put(a[i]);
		   }
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }


	   class QDemo2 {
	       public static void main(String[] args) {

		   Queue q1 = new Queue(10);

		   char name[] = {'T', 'o', 'm'};

		   Queue q2 = new Queue(name);

		   char ch;
		   int i;

		   for (i = 0; i < 10; i++) {
		       q1.put((char) ('A' + i) );
		   }

		   Queue q3 = new Queue(q1);

		   System.out.print("Contents of q1: ");
		   for (i = 0; i < 10; i++) {
		       ch = q1.get();
		       System.out.print(ch);
		   }

		   System.out.println("\n");

		   System.out.print("Contents of q2: ");
		   for (i = 0; i < 3; i++) {
		       ch = q2.get();
		       System.out.print(ch);
		   }

		   System.out.println("\n");

		   System.out.print("Contents of q3: ");
		   for (i = 0; i < 10; i++) {
		       ch = q3.get();
		       System.out.print(ch);
		   }
	       }
	   }


	   #+END_SRC

**** JCR
***** Chapter 3 -
****** Examples
******* Array
	  #+BEGIN_SRC java

	  class Array {
	      public static void main(String[] args) {
		  int month_days[];
		  month_days = new int[12];
		  month_days[0] = 31;
		  month_days[1] = 28;
		  month_days[2] = 31;
		  month_days[3] = 30;
		  month_days[4] = 31;
		  month_days[5] = 30;
		  month_days[6] = 31;
		  month_days[7] = 31;
		  month_days[8] = 30;
		  month_days[9] = 31;
		  month_days[10] = 30;
		  month_days[11] = 31;
		  System.out.println("April has " + month_days[3] + " days.");
	      }
	  }

	  #+END_SRC
******* AutoArray
	  #+BEGIN_SRC java

	  class AutoArray {
	      public static void main(String[] args) {
		  int month_days[] = { 31, 28, 31, 30, 31, 30 , 31, 31, 30, 31, 30 , 31 };

		  System.out.println("April has " + month_days[3] + " days.");
	      }
	  }

	  #+END_SRC
******* Average
	  #+BEGIN_SRC java

	  class Average {
	      public static void main(String[] args) {
		  double nums[] = {10.1, 11.2 , 12.3, 13.4, 14.5};
		  double result = 0;
		  int i;

		  for (i = 0; i < 5; i++)
		      result = result + nums[i];

		  System.out.println("Average is " + result / 5);
	      }
	  }

	  #+END_SRC
******* TwoDArray
	  #+BEGIN_SRC java

	  class TwoDArray {
	      public static void main(String[] args) {
		  int twoD[][] = new int[4][5];
		  int i, j, k = 0;

		  for (i = 0; i < 4; i++)
		      for (j = 0; j < 5; j++) {
			  twoD[i][j] = k;
			  k++;
		      }

		  for (i = 0; i < 4; i++) {
		      for (j = 0; j < 5; j++)
			  System.out.print(twoD[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
******* TwoDAgain
	  #+BEGIN_SRC java

	  class TwoDAgain {
	      public static void main(String[] args) {
		  int twoD [][] = new int[4][];
		  twoD[0] = new int[1];
		  twoD[1] = new int[2];
		  twoD[2] = new int[3];
		  twoD[3] = new int[4];


		  int i, j, k = 0;

		  for (i = 0; i < 4; i++)
		      for (j = 0; j < i + 1; j++){
			  twoD[i][j] = k;
			  k++;
		      }

		  for (i = 0; i < 4; i++){
		      for (j = 0; j < i + 1; j++)
			  System.out.print () (twoD[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
******* Matrix
	  #+BEGIN_SRC java

	  class Matrix {
	      public static void main(String[] args) {
		  double m[][] = {
		      { 0*0, 1*0, 2*0, 3*0 },
		      { 0*1, 1*1, 2*1, 3*1},
		      { 0*2, 1*2, 2*2, 3*2},
		      { 0*3, 1*3, 2*3, 3*3},
		  };
		  int i, j;

		  for (i = 0; i < 4; i++){
		      for (j = 0; j < 4; j++)
			  System.out.print(m[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
******* ThreeDMatrix
	  #+BEGIN_SRC java

	  class ThreeDMatrix {
	      public static void main(String[] args) {
		  int threeD[][][] = new int[3][4][5];
		  int i, j, k;

		  for (i = 0; i < 3; i++)
		      for (j = 0; j < 4; j++)
			  for (k = 0; k < 5; k++)
			      threeD[i][j][k] = i * j * k;

		  for (i = 0; i < 3; i++){
		      for (j = 0; j < 4; j++) {
			  for (k = 0; k < 5; k++)
			      System.out.print(threeD[i][j][k] + " ");
			  System.out.println();
		      }
		  }
		  System.out.println();
	      }
	  }

	  #+END_SRC
******* VarDemo
	  #+BEGIN_SRC java

	  class VarDemo {
	      public static void main(String[] args) {

		  var avg = 10.0;
		  System.out.println("Value of avg: " + avg);

		  int var = 1;
		  System.out.println("Value of var: " + var);

		  var k = -var;
		  System.out.println("Value of k: " + k);
	      }
	  }

	  #+END_SRC

***** Chapter 4 - Operators
****** Examples
******* BasicMath
	  #+BEGIN_SRC java

	  class BasicMath {
	      public static void main(String[] args) {
		  System.out.println("Integer arithmetic");
		  int a = 1 + 1;
		  int b = a * 3;
		  int c = b / 4;
		  int d = c - a;
		  int e = -d;
		  System.out.println("a = " + a);
		  System.out.println("b = " + b);
		  System.out.println("c = " + c);
		  System.out.println("d = " + d);
		  System.out.println("e = " + e);

		  System.out.println("Floating Point Arithmetic");
		  double da = 1 + 1;
		  double db = da * 3;
		  double dc = db / 4;
		  double dd = dc - a;
		  double de = -dd;

		  System.out.println("da = " + da);
		  System.out.println("db = " + db);
		  System.out.println("dc = " + dc);
		  System.out.println("dd = " + dd);
		  System.out.println("de = " + de);
	      }
	  }

	  #+END_SRC
******* Modulus
	  #+BEGIN_SRC java

	  class Modulus {
	      public static void main(String[] args) {
		  int x = 42;
		  double y = 42.25;

		  System.out.println("x mod 10 = " + x % 10);
		  System.out.println("y mod 10 = " + y % 10);
	      }
	  }

	  #+END_SRC

******* OpEquals
	  #+BEGIN_SRC java

	  class OpEquals {
	      public static void main(String[] args) {
		  int a = 1;
		  int b = 2;
		  int c = 3;

		  a += 5;
		  b *= 4;
		  c %= 6;

		  System.out.println("a = " + a);
		  System.out.println("b = " + b);
		  System.out.println("c = " + c);
	      }
	  }

	  #+END_SRC

******* BitLogic
	  #+BEGIN_SRC java

	  class BitLogic {
	      public static void main(String[] args) {
		  String binary[] = {
		      "0000", "0001", "0010", "0011", "0100", "0110", "0111",
		      "1000", "1001", "1010", "1100", "1101", "1110", "1111"
		  };

		  int a = 3;
		  int b = 5;
		  int c = a | b;
		  int d = a & b;
		  int e = a ^ b;
		  int f = (~a & b)|(a & ~b);
		  int g = ~a & 0x0f;

		  System.out.println("                a = " + binary[a]);
		  System.out.println("                b = " + binary[b]);
		  System.out.println("                a|b = " + binary[c]);
		  System.out.println("                a&b = " + binary[d]);
		  System.out.println("                a^b = " + binary[e]);
		  System.out.println("                ~a&b|a&-b = "      + binary[f]);
		  System.out.println("                ~a = " + binary[g]);
	      }
	  }

	  #+END_SRC
***** Chapter 5 - Control Statements
****** Examples
***** Chapter 6 - Classes
****** BoxDemo
	 #+BEGIN_SRC java
	 class Box {
	     double width;
	     double height;
	     double depth;
	 }

	 class BoxDemo {
	     public static void main(String[] args) {
		 Box mybox = new Box();
		 double vol;

		 mybox.width = 10;
		 mybox.height = 20;
		 mybox.depth = 15;

		 vol = mybox.width * mybox.height * mybox.depth;

		 System.out.println("Volume is " + vol);
	     }
	 }

	 #+END_SRC
****** BoxDemo2
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;
	 }

	 class BoxDemo2 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;


		 vol = mybox1.width * mybox1.height * mybox1.depth;
		 System.out.println("Volume is " + vol);

		 vol = mybox2.width * mybox2.height * mybox2.depth;
		 System.out.println("Volume is " + vol);
	     }
	 }


	 #+END_SRC
****** BoxDemo3
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     void volume() {
		 System.out.print("Volume is ");
		 System.out.println(width * height * depth);
	     }
	 }

	 class BoxDemo3 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;

		 mybox1.volume();
		 mybox2.volume();

	     }
	 }


	 #+END_SRC
****** BoxDemo4
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     double volume() {
		 return width * height * depth;
	     }
	 }

	 class BoxDemo4 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;

		 vol = mybox1.volume();
		 System.out.println("Volume is " + vol);

		 vol = mybox2.volume();
		 System.out.println("Volume is " + vol);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
****** BoxDemo5
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     double volume() {
		 return width * height * depth;
	     }

	     void setDim(double w, double h, double d){
		 width = w;
		 height = h;
		 depth = d;
	     }
	 }

	 class BoxDemo5 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.setDim(10, 20, 15);
		 mybox2.setDim(3, 6, 9);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
****** BoxDemo7
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     Box (double w, double h,double d) {
		 System.out.println("Constructing Box");
		 width = w;
		 height = h;
		 depth = d;
	     }
	     double volume() {
		 return width * height * depth;
	     }

	 }

	 class BoxDemo7 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box(10, 20, 15);
		 Box mybox2 = new Box(3, 6, 9);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
****** TestStack
	 #+BEGIN_SRC java

	 class Stack {
	     int stck[] = new int[10];
	     int tos;

	     // Initialize top-of-stack
	     Stack () {
		 tos = -1;
	     }

	     // Push an item onto the stack
	     void push (int item) {
		 if(tos == 9)
		     System.out.println("Stack if full.");
		 else
		     stck[++tos] = item;
	     }

	     // Pop an item from the stack
	     int pop () {
		 if(tos < 0){
		     System.out.println("Stack underflow");
		     return 0;
		 }
		 else
		     return stck[tos--];
	     }
	 }


	 class TestStack {
	     public static void main(String[] args) {
		 Stack mystack1 = new Stack();
		 Stack mystack2 = new Stack();

		 // push some numbers onto the stack
		 for (int i = 0; i < 10; i++) mystack1.push(i);
		 for (int i = 10; i < 20; i++) mystack2.push(i);


		 // pop those numbers off the stack
		 System.out.println("Stack in mystack1:");
		 for (int i = 0; i < 10; i++)
		     System.out.println(mystack1.pop());

		 System.out.println("Stack in mystack2:");
		 for (int i = 0; i < 10; i++)
		     System.out.println(mystack2.pop());
	     }
	 }

	 #+END_SRC
****** OverloadCons
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;


	     // constructor used when all dimensions specified
	     Box (double w, double h, double d) {
		 width = w;
		 height = h;
		 depth = d;
	     }


	     // construct used when no dimensions specified
	     Box () {
		 width = -1;
		 height = -1;
		 depth = -1;
	     }

	     // construct used when when cube is created
	     Box (double len) {
		 width = height = depth = len;
	     }

	     // compute and return volume
	     double volume () {
		 return width * height * depth;
	     }
	 }
	 class OverloadCons {
	     public static void main(String[] args) {
		 // create boxes using the various constructors
		 Box mybox1 = new Box(10,20,15);
		 Box mybox2 = new Box();
		 Box mycube = new Box(7);

		 double vol;

		 // get volume of first box
		 vol = mybox1.volume();
		 System.out.println("Volume of mybox1 is " + vol);

		 // get volume of second box
		 vol = mybox2.volume();
		 System.out.println("Volume of mybox2 is " + vol);

		 // get volume of cube
		 vol = mycube.volume();
		 System.out.println("Volume of mycube is " + vol);
	     }
	 }


	 #+END_SRC
****** PassArray
	 #+BEGIN_SRC java

	 // Use an array to pass a variable number of
	 // arguments to a method. This is the old-style
	 // approach to variable-length arguments

	 class PassArray {
	     static void vaTest (int v[]) {
		 System.out.print("Number of args: " + v.length + " Contents: ");

		 for(int x : v)
		     System.out.print(x + " ");
		 System.out.println();
	     }

	     public static void main(String[] args) {


		 // Notice how an array must be created so
		 // hold the arguments.
		 int n1[] = { 10 };
		 int n2[] = { 1, 2, 3};
		 int n3[] = { };

		 vaTest(n1); // 1 arg
		 vaTest(n2); // 3 args
		 vaTest(n3); // no args
	     }
	 }


	 #+END_SRC
***** Chapter 7 - A Closer Look at Methods and Classes
**** JVF
***** Chapter 2
****** InputTest
	 #+BEGIN_SRC java
	 import java.util.*;

	 /**
	    4   * This program demonstrates console input.
	    5   * @version 1.10 2004-02-10
	    6   * @author Cay Horstmann
	    7   */
	 public class InputTest
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 // get first input
		 System.out.print("What is your name? ");
		 String name = in.nextLine();

		 // get second input
		 System.out.print("How old are you? ");
		 int age = in.nextInt();

		 // display output on console
		 System.out.println("Hello, " + name + ". Next year, you'll be " + (age + 1));
	     }
	 }
	 #+END_SRC
****** Retirement
	 #+BEGIN_SRC java

	 import java.util.Scanner;

	 class retirement {
	     public static void main(String args[]) {

		 // read inputs
		 Scanner in = new Scanner(System.in);

		 System.out.print("How much money do you need to retire? ");
		 double goal = in.nextDouble();

		 System.out.print("How much money will you contribute every year? ");
		 double payment = in.nextDouble();

		 System.out.print("Interest rate in %: ");
		 double interestRate = in.nextDouble();

		 double balance = 0;
		 int years = 0;

		 // update account balance while goal isn't reached
		 while (balance > goal)
		     {
			 // this year's payment and interest
			 balance += payment;
			 double interest = balance * interestRate / 100;
			 balance += interest;
			 years++;
		     }

		 Smaystem.out.println("You can retire in " + years + " years.");
	     }
	 }

	 #+END_SRC
****** Retirement2
	 #+BEGIN_SRC java

	 import java.util.Scanner;

	 /**
	  ,* This program demonstrates a do/while loop.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 class retirement2 {
	     public static void main(String args[]) {

		 Scanner in = new Scanner(System.in);

		 System.out.print("How much money will you contribute every year? ");
		 double payment = in.nextDouble();

		 System.out.print("Interest rate in %: ");
		 double interestRate = in.nextDouble();

		 double balance = 0;
		 int year = 0;

		 String input;

		 // update account balance while user isn't ready to retire
		 do
		     {
			 // add this year's payment and interest
			 balance += payment;
			 double interest = balance * interestRate / 100;
			 balance += interest;

			 year++;

			 // print current balance
			 System.out.printf("After year %d, your balance is %,.2f%n", year, balance);

			 // ask if ready to retire and get input
			 System.out.print("Ready to retire? (Y/N) ");
			 input = in.next();
		     }  while (input.equals("N"));
	     }
	 }

	 #+END_SRC
****** lotteryOdds
	 #+BEGIN_SRC java
	 import java.util.*;

	 /**
	  ,* This program demonstrates a for loop.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 public class LotteryOdds
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 /*
		  ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
		  ,*/
		 int lotteryOdds = 1;
		 for (int i = 1; i <= k; i++)
		     lotteryOdds = lotteryOdds * (n - i + 1) / i;

		 System.out.println("Your odds are 1 in " + lotteryOdds + ". Good luck!");
	     }
	 }

	 #+END_SRC
****** BigIntegerTest
	 #+BEGIN_SRC java
	 import java.math.*;
	 import java.util.*;

	 /**
	  ,* This program uses big numbers to compute the odds of winning the grand prize in a lottery.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 public class BigIntegerTest
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 /*
		  ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
		  ,*/

		 BigInteger lotteryOdds = BigInteger.valueOf(1);

		 for (int i = 1; i <= k; i++)
		     lotteryOdds = lotteryOdds.multiply(BigInteger.valueOf(n - i + 1)).divide(
											      BigInteger.valueOf(i));

		 System.out.println("Your odds are 1 in " + lotteryOdds + ". Good luck!");
	     }
	 }
	 #+END_SRC
****** LotteryDrawing
	 #+BEGIN_SRC java

	 import java.util.*;

	 /**
	  ,* This program demonstrates array manipulation.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/
	 public class LotteryDrawing
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 // fill an array with numbers 1 2 3 . . . n
		 int[] numbers = new int[n];
		 for (int i = 0; i < numbers.length; i++)
		     numbers[i] = i + 1;

		 // draw k numbers and put them into a second array
		 int[] result = new int[k];
		 for (int i = 0; i < result.length; i++)
		     {
			 // make a random index between 0 and n - 1
			 int r = (int) (Math.random() * n);

			 // pick the element at the random location
			 result[i] = numbers[r];

			 // move the last element into the random location
			 numbers[r] = numbers[n - 1];
			 n--;
		     }

		 // print the sorted array
		 Arrays.sort(result);
		 System.out.println("Bet the following combination. It'll make you rich!");
		 for (int r : result)
		     System.out.println(r);
	     }
	 }

	 #+END_SRC
****** CompoundInterest
	 #+BEGIN_SRC java

	 /**
	  ,* This program shows how to store tabular data in a 2D array.
	  ,* @version 1.40 2004-02-10
	  ,*  Cay Horstmann
	  ,*/

	 public class CompoundInterest
	 {
	     public static void main(String[] args)
	     {
		 final double STARTRATE = 10;
		 final int NRATES = 6;
		 final int NYEARS = 10;

		 // set interest rates to 10 . . . 15%
		 double[] interestRate = new double[NRATES];

		 for (int j = 0; j < interestRate.length; j++)
		     interestRate[j] = (STARTRATE + j) / 100.0;

		 double[][] balances = new double[NYEARS][NRATES];

		 // set initial balances to 10000
		 for (int j = 0; j < balances[0].length; j++)
		     balances[0][j] = 10000;

		 // compute interest for future years
		 for (int i = 1; i < balances.length; i++)
		     {
			 for (int j = 0; j < balances[i].length; j++)
			     {
				 // get last year's balances from previous row
				 double oldBalance = balances[i - 1][j];

				 // compute interest
				 double interest = oldBalance * interestRate[j];

				 // compute this year's balances
				 balances[i][j] = oldBalance + interest;
			     }
		     }

		 // print one row of interest rates
		 for (int j = 0; j < interestRate.length; j++)
		     System.out.printf("%9.0f%%", 100 * interestRate[j]);

		 System.out.println();

		 // print balance table
		 for (double[] row : balances)
		     {
			 // print table row
			 for (double b : row)
			     System.out.printf("%10.2f", b);

			 System.out.println();
		     }
	     }
	 }
	 #+END_SRC
****** LotteryArray
	 #+BEGIN_SRC java


	 /**
	  ,* This program demonstrates a triangular array.
	  ,* @version 1.20 2004-02-10
	  ,* Cay Horstmann
	  ,*/

	 public class LotteryArray
	 {
	     public static void main(String[] args)
	     {
		 final int NMAX = 10;

		 // allocate triangular array
		 int[][] odds = new int[NMAX + 1][];
		 for (int n = 0; n <= NMAX; n++)
		     odds[n] = new int[n + 1];

		 // fill triangular array
		 for (int n = 0; n < odds.length; n++)
		     for (int k = 0; k < odds[n].length; k++)
			 {
			     /*
			      ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
			      ,*/
			     int lotteryOdds = 1;
			     for (int i = 1; i <= k; i++)
				 lotteryOdds = lotteryOdds * (n - i + 1) / i;

			     odds[n][k] = lotteryOdds;
			 }

		 // print triangular array
		 for (int[] row : odds)
		     {
			 for (int odd : row)
			     System.out.printf("%4d", odd);
			 System.out.println();
		     }
	     }
	 }
	 #+END_SRC

****** ForDemo
	 #+BEGIN_SRC java

	 class ForDemo {
	     public static void main(String args[]) {
		 int count;

		 for (count = 0; count < 5; count++)
		     System.out.println("This is count: " + count);

		 System.out.println("Done");
	     }
	 }

	 #+END_SRC
****** BlockDemo
	 #+BEGIN_SRC java

	 class BlockDemo {
	     public static void main(String args[]) {
		 double i, j, d;

		 i = 5;
		 j = 10;

		 if (i != 0) {
		     System.out.println("i does not equal zero");
		     d = j /i;
		     System.out.println("j /d is: " + d);
		 }
	     }
	 }

	 #+END_SRC
****** GalToLitTable
	 #+BEGIN_SRC java

	 class GalToLitTable {
	     public static void main(String args[]) {
		 double gallons, liters;
		 int counter;

		 counter = 0;

		 for (gallons = 1; gallons <= 100; gallons++) {
		     liters = gallons * 3.7854;
		     System.out.println(gallons + " gallon is " +
					liters + " litters.");
		     counter++;
		     //
		     if (counter == 10) {
			 System.out.println();
			 counter = 0; //
		     }
		 }
	     }
	 }

	 #+END_SRC

* Tools
*** Java Tools - Web Frameworks
      [[https://spring.io/][Spring]]
      [[https://vaadin.com/][Vaadin]]
*** Java Tools - ORM Frameworks
       [[http://hibernate.org/][Hibernate]]
       JDBC
*** Java Tools - REST

*** Java Tools - Java decompiler
      https://www.technotification.com/2018/10/5-best-java-decompilers.html/
*** Java Tools - Misc
      [[https://tomcat.apache.org/][Apache Tomcat]]
      [[http://wildfly.org/][Jboss/Wildfly]]
      SpotBugs
      [[https://docs.oracle.com/en/java/javase/11/tools/jlink.html][jlink]]
      [[https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719][javapackager]]
      https://sdkman.io/
*** Java Tools - Version management
      [[https://github.com/gcuisinier/jenv][jenv]]
      [[https://github.com/shyiko/jabba][jabba]]
*** Java Tools - Testing
      [[https://docs.seleniumhq.org/][Selenium]]
      [[junit.org][JUnit]]
      [[mockito.org][mockito]]
* Commands/Features
    |                               |
    |-------------------------------|
    | [[https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr006.html][The jcmd Utility ]]             |
    | [[https://openjdk.java.net/jeps/341][JEP 341: Default CDS Archives]] |

* Skills
      |------------------------------------------------|
      | OOP (inheretince, polymorphism, encapsulation) |
      | Generics                                       |
      | Wrapper classes                                |
      | data structures, algorithms                    |
      | [[https://spring.io/][Spring]]                                         |
      | [[https://maven.apache.org/][Maven]]                                          |
      | [[https://jenkins.io/][Jenkis]]                                         |
      | [[http://www.jboss.org/][Jboss]]                                          |
      | [[https://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html][jpa]]                                            |
      | [[junit.org][JUnit]]                                          |
      | [[https://docs.seleniumhq.org/][Selenium]]
      | MVC                                            |
      | [[gradle.org][Gradle]]                                         |
      | [[http://hibernate.org/][Hibernate]]                                      |
      | SQL & relation database                        |
      | [[https://www.docker.com/][docker]]                                         |
      | [[json.org][Json]]                                           |
      | Web (JS, AngularJS...)                         |
      | [[https://vertx.io/][vertx]]                                          |
      | MVC                                            |
      | REST service (basic)                           |
      | [[mockito.org][mockito]]                                        |
      | Database design (Primary Key and Foreign Key). |
      | Design Patterns                                |
      | [[https://www.sonarsource.com/products/codeanalyzers/sonarjava.html][sonar]]                                          |
      | [[https://mantisbt.org/][mantisbt]]                                       |

* Bad code Tips
    https://www.reddit.com/r/java/comments/apnj6j/what_are_various_red_flags_for_you_in_java_code/

* Documentation
     https://docs.oracle.com/javase/specs/

     www.netlib.org/fdlibm

* Blogs
      https://icedtea.classpath.org/bugzilla/

      https://spring.io/guides

      https://mjg123.github.io/

      https://vimeo.com/javazone
* read later
    https://advancedweb.hu/2019/02/19/post_java_8/

    https://filippobuletto.github.io/solid-java/#srp-code-smells

    https://stackabuse.com/design-patterns-in-java/

    https://dev.to/aussieguy/a-quick-look-at-java-11s-httpclient-1f79

    https://medium.com/@adam_carroll/java-packager-with-jdk11-31b3d620f4a8

    https://jdk.java.net/jpackage/

    http://launch4j.sourceforge.net/

    https://steveperkins.com/using-java-9-modularization-to-ship-zero-dependency-native-apps/

    https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4

    https://vladmihalcea.com/14-high-performance-java-persistence-tips/

    https://jitpack.io/docs/

    https://enterprisersproject.com/article/2018/11/getting-started-kubernetes-5-misunderstandings-explained

    https://sdkman.io/install

    https://moocfi.github.io/courses/2013/programming-part-1/

    https://stackabuse.com/the-best-java-books-for-all-skill-levels/

    https://www.edx.org/course/fundamentals-java-ee-development-red-hat-jb083x

    https://okinskas.github.io/Java-Version-Management-on-Linux/

    https://www.javaworld.com/article/3314640/learn-java/java-101-functional-programming-for-java-developers-part-1.html#tk.rss_all

    https://blog.adversalabs.com/2018/10/29/our-experience-writing-a-vscode-extension/

    https://mjg123.github.io/2018/11/05/alpine-jdk11-images.html

    https://mjg123.github.io/2017/11/07/Java-modules-and-jlink.html

    https://mjg123.github.io/2018/05/26/Multi-Stage-Docker-Build-with-jlink.html

    https://mjg123.github.io/2017/10/02/JVM-startup.html

    https://mjg123.github.io/2017/10/04/AppCDS-and-Clojure.html

    https://mjg123.github.io/2017/10/16/Clojure-1.9-startup.html

    https://developers.redhat.com/blog/2018/11/05/migrating-from-oracle-jdk-to-openjdk-on-red-hat-enterprise-linux-what-you-need-to-know/

      The Z Garbage Collector by Erik Österlund: https://www.youtube.com/watch?v=7cWiwu7kYkE
******** Block
	   #+BEGIN_SRC java

	   // Objects can be passed to methods.
	   class Block {
	       int a, b, c;
	       int volume;

	       Block(int i, int j, int k) {
		   a = i;
		   b = j;
		   c = k;
		   volume = a * b *c;
	       }

	       // Return true if ob defines same block.
	       boolean sameBlock(Block ob) {
		   if((ob.a == a) & (ob.b == b) & (ob.c == c)) return true;
		   else return false;
	       }

	       // Return true if ob has same volume.
	       boolean sameVolume(Block ob) {
		   if(ob.volume == volume) return true;
		   else return false;
	       }
	   }

	   class PassOb {
	       public static void main(String args[]) {
		   Block ob1 = new Block(10, 2, 5);
		   Block ob2 = new Block(10, 2, 5);
		   Block ob3 = new Block(4, 5, 5);

		   System.out.println("ob1 same dimensions as ob2: " +
				      ob1.sameBlock(ob2));

		   System.out.println("ob1 same dimensions as ob3: " +
				      ob1.sameBlock(ob3));

		   System.out.println("ob1 same volume as ob3: " +
				      ob1.sameVolume(ob3));
	       }
	   }


	   #+END_SRC
******** VarArgs
	   #+BEGIN_SRC java

	   class VarArgs {

	       static void vaTest(int ... v) {
		   System.out.println("Numbers of args: " + v.length);
		   System.out.println("Contents: ");

		   for (int i = 0; i < v.length; i++)
		       System.out.println("  arg " + i + ": " +  v[i]);
		   System.out.println();
	       }

	       public static void main(String[] args) {

		   vaTest(10);
		   vaTest(1, 2, 3);
		   vaTest();
	       }
	   }


	   #+END_SRC
******** VarArgs2
	   #+BEGIN_SRC java

	   class VarArgs2 {

	       static void vaTest(String msg, int ... v) {
		   System.out.println(msg + v.length);
		   System.out.println("Contents: ");

		   for (int i = 0; i < v.length; i++)
		       System.out.println("  arg " + i + ": " +  v[i]);

		   System.out.println();
	       }

	       public static void main(String[] args) {

		   vaTest("One vararg: ", 10);
		   vaTest("Three vararg: ", 1, 2, 3);
		   vaTest("No vararg: ");
	       }
	   }

	   #+END_SRC
