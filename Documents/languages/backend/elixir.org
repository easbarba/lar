#+TITLE: Elixir

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 3 :ignore this
  :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#packages][Packages]]
    - [[#gem][gem]]
    - [[#bundle][bundle]]
      - [[#outdated][outdated]]
      - [[#gem][gem]]
      - [[#install][install]]
      - [[#update][update]]
    - [[#irb][irb]]
      - [[#cli][cli]]
      - [[#inside][inside]]
    - [[#rspec][rspec]]
    - [[#unit-test][unit test]]
    - [[#pry][pry]]
  - [[#features][Features]]
    - [[#project-structure][project structure]]
    - [[#system-errors][System Errors]]
      - [[#usage][usage]]
    - [[#exceptions][exceptions]]
      - [[#errors][Errors]]
      - [[#usage][usage]]
    - [[#writable-object-attribute][writable object attribute]]
    - [[#multithreading][Multithreading]]
      - [[#usage][usage]]
    - [[#modules][modules]]
    - [[#continuation][continuation]]
    - [[#fibers][Fibers]]
      - [[#errors][errors]]
      - [[#usage][usage]]
    - [[#delimited-input][delimited input]]
    - [[#rake][rake]]
      - [[#usage][usage]]
    - [[#gem][gem]]
    - [[#variables][Variables]]
      - [[#class-variables][class variables]]
      - [[#global-variables][global variables]]
    - [[#self][self]]
    - [[#commentary][commentary]]
    - [[#defined][defined?]]
    - [[#iterators][iterators]]
    - [[#block-local-variables][block-local variables]]
    - [[#loops][loops]]
    - [[#statement-modifiers][statement modifiers]]
    - [[#comparison][comparison]]
    - [[#conditional][conditional]]
    - [[#class][class]]
      - [[#class][class]]
    - [[#append-][append <<]]
    - [[#blocks][blocks]]
    - [[#lambda][lambda]]
      - [[#how][How]]
      - [[#usage][Usage]]
    - [[#methods][methods]]
    - [[#yield][yield]]
    - [[#procs][procs]]
    - [[#operators][operators]]
    - [[#enumerable][enumerable]]
    - [[#enumerator][enumerator]]
      - [[#lazy][lazy]]
      - [[#each_car][each_car]]
      - [[#each][each]]
      - [[#to_enumenum_for][to_enum/enum_for]]
    - [[#inject][inject]]
    - [[#select][select]]
    - [[#succ][succ]]
    - [[#collect][collect]]
    - [[#freeze][freeze]]
    - [[#dup][dup]]
    - [[#dig][dig]]
    - [[#fetch][fetch]]
    - [[#tap][tap]]
    - [[#map][map]]
    - [[#pluck][pluck]]
    - [[#quoting][Quoting]]
    - [[#here-documents][here documents]]
    - [[#proc][proc]]
    - [[#do-end-as-param][do end as param]]
    - [[#array][array]]
    - [[#datetime][date/time]]
    - [[#lambda][lambda]]
    - [[#begin-rescue][begin rescue]]
    - [[#hash][hash]]
    - [[#range][range]]
    - [[#sets][sets]]
    - [[#gsub][gsub]]
    - [[#find][find]]
    - [[#map][map]]
    - [[#each_slice][each_slice]]
    - [[#lazy][lazy]]
    - [[#with_index][with_index]]
    - [[#enum_for][enum_for]]
    - [[#more][more]]
    - [[#concepts][Concepts]]
      - [[#iterator][Iterator]]
      - [[#methods][Methods]]
      - [[#enumerator][Enumerator]]
    - [[#instructions][Instructions]]
      - [[#rbenv][Rbenv]]
      - [[#misc][misc]]
  - [[#toolings][Toolings]]
  - [[#videos][Videos]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
  :END:
* Progress
** Books
| Books                   | Chapter             | late             | revision |
|-------------------------+---------------------+------------------+----------|
| Learn Functional Elixir | Variable, Functions | Naming Functions |          |

** SLOC
| Project | folder      | file     | @ |
|---------+-------------+----------+---|
| elixir  | eex/lib/eex | compiler |   |
| phoenix |             |          |   |

* Features
** Literals
|         |                          |
|---------+--------------------------|
| string  | "meh"                    |
| integer | 4                        |
| float   | 10.8                     |
| boolean | true, false              |
| atom    | :ok, :error              |
| tuple   | {:ok, "Hello"}           |
| list    | [1,23,4]                 |
| map     | %{id: 123, name: "anna"} |
| nil     | nil                      |
** Arithmetic
|    |                                       |                      |
|----+---------------------------------------+----------------------|
| +  |                                       |                      |
| -  |                                       |                      |
| /  |                                       |                      |
| *  |                                       |                      |
| == |                                       |                      |
| != |                                       |                      |
| <  |                                       |                      |
| >  |                                       |                      |
| ++ | Concatenating two lists               | [1, 2] ++ [3, 4]     |
| <> | Concatenating two strings or binaries | "Hello, " <> "World" |

** Logical
- left side of the operators and and or must be Boolean values

|     |   |
|-----+---|
| and |   |
| or  |   |
| not |   |

- accept truthy and falsy values on their left side.
- works with Booleans and values

|    |   |   |
|----+---+---|
| && |   |   |
| \\ |   |   |
| !  |   |   |

** Types
*** Strings
**** Functions
*****  <>
Join strings

#+begin_src elixir

"Hello, " <> name <> "!"

#+end_src
***** interpolation

#+begin_src elixir

"Hello, #{name}!"

"1 + 1 = #{1+1}"

#+end_src

** Functions

** Anonymous Functions
#+begin_src elixir

hello = fn name -> "Hello, " <> name <> "!" end
hello.("Foo")  # Hello Foo


greet = fn name ->
  greetings = "Hello, #{name}"
  "#{greetings}! Enjoy your stay."
end

fn -> 1 + 1 end.()

fair_price = fn price, quantity -> price * quantity end
fair_price.(5, 6)

#+end_src
** High Order Functions
** Pipe
