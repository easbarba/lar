#+TILE: Programming Languages - Study Annotations

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#ruby][Ruby]]
  - [[#progress][Progress]]
  - [[#features][Features]]
  - [[#rails][Rails]]
  - [[#concepts][Concepts]]
  - [[#instructions][Instructions]]
- [[#front-end][Front-end]]
  - [[#progress][Progress]]
  - [[#javascript][JavaScript]]
  - [[#html][HTML]]
  - [[#css][CSS]]
  - [[#web][Web]]
- [[#shell-script][Shell Script]]
  - [[#gnu-bash][GNU Bash]]
  - [[#zsh][Zsh]]
  - [[#fish][Fish]]
  - [[#tcsh][TCSH]]
  - [[#posix][Posix]]
- [[#yaml][Yaml]]
  - [[#traits][Traits]]
  - [[#resources][Resources]]
- [[#emacs-lisp][Emacs Lisp]]
  - [[#progress][Progress]]
- [[#misc][Misc]]
  - [[#terms][Terms]]
  - [[#books][Books]]
  - [[#skills][Skills]]
:END:

* Ruby
** Progress
*** Books
    | Books                                                     | Capitulo                                       | em                                                            | tarde                          | revisao |
    |-----------------------------------------------------------+------------------------------------------------+---------------------------------------------------------------+--------------------------------+---------|
    | Beginning Rails 6                                         | Working with a Database: Active Record         | Introducing Active Record: Object-Relational Mapping on Rails |                                |         |
    | Pragmatic Ruby (Pickaxe)                                  | Standard Types                                 |                                                               |                                |         |
    | Closure in Ruby                                           |                                                |                                                               |                                |         |
    | Practical Object-Oriented Design                          | Designing Classes with a Single Responsibility | 2.2.3 Determining If a Class Has a Single Responsibility      |                                |         |
    | Design Patterns in Ruby                                   | Strategy                                       |                                                               |                                |         |
    | Pragmatic Build Awesome Command-Line Applications in Ruby |                                                |                                                               |                                |         |
    | The Well Grounded Rubyist                                 | 12  File and I/O operations                    |                                                               |                                |         |
    | Eloquent Ruby                                             | Chapter 8. Embrace Dynamic Typing              | Shorter Programs, But Not the Way You Think                   | Spec: A Plethora of Assertions |         |

*** SLOC
    | Project | folder          | file       | @ |
    |---------+-----------------+------------+---|
    | ruby    | lib/bundler/cli | install.rb |   |
    | rails   |                 |            |   |
** Features
*** Ruby
**** class
     #+begin_src ruby
     # frozen_string_literal: true

     require 'pathname'

     # Class Description
     class Meh # Class name in Camel Case
       attr_reader :lo, :fi #

       OUCH = 'asdasd' #

       def initialize(lo, fi)
	 @lo = lo #
	 @fi = fi #
       end

       def alfa # instance method
	  @localVar = 1
       end

       def use_local_var # instance method
	 @localVar
       end

       def self.zeta #
       end
     end

     Eija = Class.new #

     def Eija.beta # singleton
     end


     # superclass

     class Parent
     end
     class Child < Parent
     end

     Child.superclass # => Parent

     #
     #+end_src
**** blocks
     #+begin_src ruby

     #+end_src
**** lambda
***** How
      #+begin_src ruby
      lambda { |params| ... } # form 1

      -> params { ... }  # form 2
      #+end_src
***** Usage
      #+begin_src ruby
      proc1 = -> arg { puts "In proc1 with #{arg}" }
      proc1.call "ant"

      def n_times(thing)
	lambda {|n| thing * n }
      end

      p1 = n_times(23)
      p1.call(3) # => 69
      #+end_src
**** methods
     default values, splat args (described later on page 120), keyword args, and a block parameter
**** procs
     #+begin_src ruby
     def pass_in_block(asdf, &block)
     end

     multiple_of_three = -> n { (n % 3).zero? }
     palindrome = -> n { n = n.to_s; n == n.reverse }

     p Integer
	 .all
	 .select(&multiple_of_three)
	 .select(&palindrome)
	 .first(10)

     a = Proc.new
     #+end_src
**** operators
     #+begin_src ruby
     val.to_s =~ /3/
     #+end_src
**** loop
     - when an enumerator object runs out of values inside a loop , the loop will terminate cleanly.
     #+begin_src ruby
     loop do
       puts "#{short_enum.next} - #{long_enum.next}"
     end
     #+end_src
**** enumerator
***** lazy
      #+begin_src ruby
      def Integer.all
	Enumerator.new do |yielder, n: 0|
	  loop { yielder.yield(n += 1) }
	end.lazy
      end
      #+end_src
***** each_car
***** each
***** to_enum/enum_for
      #+begin_src ruby
      a = [ 1, 3, "cat" ]
      h = { dog: "canine", fox: "vulpine" }

      # Create Enumerators
      enum_a = a.to_enum
      enum_h = h.to_enum

      enum_a.next # 1
      enum_h.next # [:dog, "canine"]
      enum_a.next # 3
      enum_h.next # [:fox, "vulpine"]

      enum_a = a.each # create an Enumerator using an internal iterator
      #+end_src
**** inject
     accumulate a value across the members of a collection
**** succ
     increments a string value
     #+begin_src ruby
     'e'.succ # f
     #+end_src
**** collect
     #+begin_src ruby
     ["H", "A", "L"].collect {|x| x.succ } # => ["I", "B", "M"]
     #+end_src
**** freeze
     #+begin_src ruby
     person1.freeze # prevent modifications to the object
     #+end_src
**** dup
     #+begin_src ruby
     person1 = "Tim"
     person2 = person1.dup # not aliasing person1
     #+end_src
**** dig
**** fetch
**** tap
**** Quoting
     %char{text}
     #+begin_src ruby
     a = %q(a b c d)

     b = %Q(a b c)
     #+end_src
**** heredocs
     #+begin_src ruby
     <<EOL

     EOL

     <<EOL.to_i * 10
     EOL

     <<'EOL'
     EOL

     <<-EOL
     EOL

     <<~EOL
     EOL

     [1,2, <<EO asdasd EO]

     a(false, <<EO asd... EO)
     #+end_src
**** proc
     #+begin_src ruby

     #+end_src
**** do end as param
     #+begin_src ruby
     x = (do  1 + 2 end)
     x = (do 'a' + 'b' end).join(',')
     #+end_src
**** array
     #+begin_src ruby
     a = [1, ["a", "b"], 4]
     arr[1][0]
     [1,2][0]
     arr.dig(3,0) value_at, a[2,3] = ..
     a[2..3]
     a.slice()
     a.[]=(0, "first")
     a.[](2)
     a = %w(a b c)
     a= %W({a} b c)
     x.to_ary
     x.to_arr
     Array()
     def string.to_arr
     end
     a.unshift(0)
     a.push(1,2,3)
     a << 5
     a.pop
     a.shift
     a.concat
     a.replace([1,2,3])
     a.flatten
     a.reverse
     a.join(" , ")
     a = *
     a.uniq
     a.compact
     a.size
     a.empty
     a.include?
     a.first
     a.last
     a.sample
     a.count(1)
     #+end_src
     [[file:path]]
**** date/time
     #+begin_src ruby
     require 'date'
     d = date.today

     require 'time'
     t = time.zxcz
     #+end_src
**** lambda
     #+begin_src ruby
     l = -> { xx; aa }
     l = lambda do
       yield xx
     end
     #+end_src
**** rescue
     #+begin_src ruby
     begin
       puts 'I am before the raise.'
       raise 'An error has occured.'
       puts 'I am after the raise.'
     rescue
       puts 'I am rescued.'
     end
     #+end_src
**** hash
     #+begin_src ruby
     h = Hash.new
     h = { one: 1, :two => 2 }
     h = Hash[1, "one", 2, "two"]
     h["1"] = 1
     h.[]=("New York", "NY")
     h.store("New York", "NY")
     a.update(b)
     a.merge(b)
     h.select {k,vk > 1 } !
     h.reject {  k,v  k > 1 } !
     h.reject! {  k,v  k > 1 }
     h = { street: "127th Street", apt: nil }.compact !
     h = { street: "127th Street", apt: nil }.compact!
     h.invert
     h.clear
     h = {...}.replace({...})
     h.key?
     h.empty?
     #+end_src
**** range
     #+begin_src ruby
     r = Range.new(1,100)
     r = Range.new(1,100, true)
     r =  1..99(inclusive) r = 1...199(exclusive)
     r.cover? 2
     r.include? 3
     #+end_src
**** sets
     #+begin_src ruby
     s = Set.new(array)
     s = Set.new(names) {name name.upcase }
     s << 5
     s.add 5
     s.delete(1)
     s.intersection|&| x
     s.union x
     s + x
     s.difference x
     s - x
     s ^ x
     s.merge [2]
     s.subset? b
     s.superset? b
     s.proper_subset? x
     s.proper_superset? x
     #+end_src
**** gsub
     Returns a copy of str with all occurrences of pattern substituted for the second argument.                                                                                                                                                                                                                                                                                                                              |
**** find
     #+begin_src ruby
     a.find { ¦n¦ n > 5 }
     a.find { ¦n¦ n > 5 }
     a.find_all
     a.select
     a.reject
     a.map
     #+end_src
**** map
     #+begin_src ruby
     a.map { |x| x.uppercase}
     a.map! { |x| x.uppercase}
     #+end_src
**** each_slice
     #+begin_src ruby
     animals.each_slice(2).map do |predator, prey|
     #+end_src
**** lazy
     #+begin_src ruby
     (1..Float::INFINITY).lazy.select {|n| n % 3 == 0 }
     #+end_src
**** with_index
     #+begin_src ruby
     ['a'..'z').map.with_index {|letter,i| [letter, i] } // Output: [["a", 0], ["b", 1], etc.]
     my_enum.take(5).force // actual result rather than lazy enumerator
     #+end_src
**** enum_for
     #+begin_src ruby
     e = names.enum_for(:inject, "Names: ")
     #+end_src
**** more

     | drop_while             | a.drop_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | take_while             | a.take_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | find_all               | a.find_all ¦ a.select                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | reject                 | a.reject { ¦i¦ i > 4 } ¦ a.reject! { ¦i¦ i > 4 }                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
     | select                 |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | grep                   | a.grep(//o//) ¦ a.grep(String) ¦ a.grep(50..100) ¦                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
     | group_by               | a.group_by { ¦s¦ s.size }                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | match                  | //n//.match(s)                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                             |
     | String                 | 'C'.size ¦ each_byte ¦ each_line ¦ each_codepoint ¦ each_char ¦ s.bytes ¦                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | min/min_by             | a.min { ¦a,b¦ a.size <=> b.size } ¦  a.min { ¦lang¦ lang.size } ¦ state_hash.min_by { ¦name, abbr¦ name }                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | max/max_by             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | minmax/minmax_by       | a.minmax ¦ a.minmax_by { ¦lang¦ lang.size }                                                                                                                                                                                                                                                                                                                                                                             |                                                                                                             |
     | reverse_each           | [1,2,3].reverse_each { ¦e¦ puts e * 10 }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     | with_index             | letters.each.with_index {¦(key,value),i¦ puts i }                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
     | each_index             | names.each.with_index(1) { ¦pres, i¦ p i }                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
     | each_slice             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | each_cons              |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | slice_before           | a.slice_before(\/=/).to_a ¦ (1..10).slice_before { ¦num¦ num % 2 == 0 }.to_a ¦                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
     | slice_after            |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | slice_when             | a.slice_when { ¦i,j¦ i == j }.to_a                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                             |
     | inject/reduce          | [1,2,3,4].inject(:+)                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                             |
     | cycle                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | map                    | names.map { ¦name¦ name.upcase } ¦  x = 5.times.map { Apple.new(rand(100..900)) }                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
     | map!                   |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | symbol-argument blocks | names.map(&:upcase)                                                                                                                                                                                                                                                                                                                                                                                                     |                                                                                                             |
     | <=>                    | Apple#<=> ¦ Apple.sort { ¦a,b¦ a.brand <=> b.brand } ¦                                                                                                                                                                                                                                                                                                                                                                  | implementing a spaceship test method is enough to sort a class, or use a block to sort, or even override it |
     | comparable             | Apple#<=> ¦                                                                                                                                                                                                                                                                                                                                                                                                             | include comparable                                                                                          |
     | clamp                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | between                |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | functions              | -> (args) {} ¦ Sum = -> (a, b) { a + b }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     | <<                     | yielder                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
     |                        | enum_for                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     |                        | to_enum                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
     | dup                    |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     ||
** Rails
*** concepts
    - Active Records: Ruby object-relational mapping (ORM) library
*** Models
    | what   | $ | ...         |
    |--------+---+-------------|
    | Models |   | Camel-Cased |
    |        |   |             |

*** Cli
**** Database
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | database | –d or --database=                                                      | use the database management system of your choice |
     |          | db:create:all                                                          |                                                   |
     |          | db:create                                                              |                                                   |
     |          | dbconsole                                                              |                                                   |
     |          | db:migrate                                                             |                                                   |
     |          | new <name>                                                             |                                                   |
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | destroy model Artile                                                   |                                                   |
     |          | db:rollback                                                            |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |
     |          | db:system:change                                                       | switch databases                                                  |

**** Models
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | rails destroy model Artile                                             |                                                   |
     |          | rails db:rollback                                                      |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |
**** ENV
     |   |                      |   |
     |---+----------------------+---|
     |   | RAILS_ENV=production |   |

** Concepts
*** Iterator
    - is a method
    - it start and finish in the same call
*** Methods
**** Methods chaining
     creates a new object at it chains
     #+begin_src ruby
     puts animals.select {¦n¦ n[0] < 'M' }.map(&:upcase).join(", ")
     #+end_src
*** Enumerator
    - is an object
    - chaining
    - block based
    - method attachment (enum_for)
    - un-overriding of methods in Enumerable
    - maintain state
    - is an enumerable object
    - can add enumerability to objects
    - can stop and resume collection cycling
** Instructions
*** Rbenv
    rbenv global 2.3.0 && rbenv rehash
* Front-end
** Progress
*** Books
    | Books                                     | Cap                                     | @                                     | late | revision |
    |-------------------------------------------+-----------------------------------------+---------------------------------------+------+---------|
    | JavaScript The Definitive Guide           | Chapter 3. Types, Values, and Variables | 3.9.3 Object to Primitive Conversions |      |         |
    | Essential TypeScript From Beginner to Pro |                                         | Marking Tasks Complete                |      |         |

*** SLOC
    | Project | folder | file | @ |
    |-------------+--------+------+---|
    | node        |        |      |   |
    | angular     |        |      |   |
    | inquirer    |        |      |   |
** JavaScript
*** JS Books
**** Eloquent JavaScript
***** 2. Program Structure
****** Exercises
******* Looping a triangle
        #+BEGIN_SRC javascript

        let Hash = "#";
        let numberLoop = 1;

        do {
            console.log(Hash);
            Hash = Hash + "#";
            numberLoop++;
        } while (numberLoop <= 7)

        #+END_SRC
******* FizzBuzz
        #+BEGIN_SRC javascript

        let numberIncreasing = 1;

        while (numberIncreasing <= 100) {

            if ((numberIncreasing % 3) == 0 && (numberIncreasing % 5)  == 0)
                console.log("FizzBuzz");
            else
                if ((numberIncreasing % 3) == 0)
                    console.log("Fizz");
            else
                if ((numberIncreasing % 5)  == 0)
                    console.log("Buzz");
            else
                console.log(numberIncreasing);

            numberIncreasing++;
        }

        #+END_SRC
******* ChessBoard
        #+BEGIN_SRC javascript

        let columns = 1;

        while (columns <= 8) {
            let symbol = "# # # #";

            if ((columns % 2) === 0)
                console.log(" " + symbol);
            else
                console.log(symbol);

            columns++;
        }

        #+END_SRC
***** 3. Functions
****** examples
       #+BEGIN_SRC javascript

       // -----
       const makeNoise = function() {
           console.log(square("Pling!"));
       };

       makeNoise();


       // -----
       const power = function(base, exponent) {
           let result = 1;
           for (let count = 0; count < exponent; count++) {
	       result *= base;
           }
           return result;
       };

       console.log(power(2, 10));

       // -----
       const power = (base, exponent) => {
           let result = 1;
           for (let count = 0; count < exponent; count++) {
	       result *= base;
           }
           return result;
       };


       // -----
       const square1 = (x) => { return x * x; };
       const square1 = x => x * x;


       // -----
       const hummus = function(factor) {
           const ingredient = function(amount, unit, name){
	       let ingredientAmount = amount * factor;
	       if (ingredientAmount > 1) {
                   unit += "s";
	       }
	       console.log(`${ingredientAmount} ${unit} ${name}`);
           };

           ingredient(1, "can", "chickpeas");
           ingredient(0.25, "cup", "tahini");
           ingredient(0.25, "cup", "lemon juice");
           ingredient(1, "tablespoon", "olive oil");
           ingredient(0.5, "teaspoon", "cumin");
       };
       #+END_SRC
****** exercises
******* Minimum
        #+BEGIN_SRC javascript


        function min(a, b){
            return (a < b) ? a : b
        }

        console.log(min(20,2))

        #+END_SRC
******* Recursion - isEven
        #+BEGIN_SRC javascript

        function isEven(number){

            let numberIsEven = false;

            if (number == 0)
                return numberIsEven = true;
            else if (number == 1)
                return numberIsEven = false;
            else if (number <= 0)
                return console.log("Please, enter a natural(positive) number.")
            else
                return isEven(number - 2);
        }

        isEven(50); // true
        isEven(75); // false
        isEven(-1); // RangeError: Maximum call stack size exceeded
        isEven(-1); // Please, enter a positive number.

        #+END_SRC
******* Bean Counting
        #+BEGIN_SRC javascript

        // -----
        function countBs(string){

            let BinString = 0;

            for (let i = 0; i < string.length; i++) {
                if (string[i] == "B")
                    BinString++;
            }

            return BinString;
        }

        console.log(countBs("bbC"))


        // -----
        function countChar(string, charToMatch){

            let BinString = 0;

            for (let i = 0; i < string.length; i++) {
                if (string[i] == charToMatch)
                    BinString++;
            }

            return BinString;
        }

        console.log(countChar("bbC", "B"))

        #+END_SRC

*** JS Sites
**** Web JS - Misc
     https://bestofjs.org/

     https://leanpub.com/understandinges6/read/#leanpub-auto-block-bindings
**** Web JS - Online Tools
     https://jsperf.com/
*** JS Frameworks
    https://polyfill.io/v3/

    https://github.com/vuejs/vue

    https://api.jquery.com/
*** JS Refactoring
    https://medium.com/@jochasinga/how-i-refactor-my-code-561aa9132045
*** JS Articles
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference

    https://medium.com/womakerscode/10-dicas-para-se-tornar-ninja-em-javascript-31a963ad17a1

    https://medium.com/@oliver.grack/using-eslint-with-typescript-and-react-hooks-and-vscode-c583a18f0c75
*** JS Interview
    https://www.pixelstech.net/article/1552133174-JavaScript-interview-questions
** HTML
*** HTML Workaround
***** IE8 - HTML5
      #+BEGIN_SRC html
      <!--[if lt IE 9]><script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/ html5shiv.min.js"></script ><![endif]-->
      #+END_SRC
** CSS
*** CSS Pre-Processors
    [[https://sass-lang.com/][SASS]]
    less
    flexbox
*** CSS Resources
    https://jensimmons.github.io/

    https://labs.jensimmons.com

    https://daneden.github.io/animate.css/

    https://css-tricks.com

    https://flexboxfroggy.com/

    https://leaverou.github.io/css3patterns/#lined-paper
*** CSS Tools/Frameworks
    https://cssicon.space/#/

    greensock
    velocity,js
    anime.js

    https://animejs.com/

    https://postcss.org/

    https://autoprefixer.github.io/

    http://screensiz.es/

    http://mqtest.io/

    https://www.axis-praxis.org/
*** CSS Properties
    | Properties                         |                                                              |
    |------------------------------------+--------------------------------------------------------------|
    | font-variant-numeric: tabular-nums | aplied in time interval, ensure its number to use even space |
    |                                    |                                                              |
*** CSS Articles
**** CSS Grid
     https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/

     https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/

     https://medium.com/@elad/supporting-css-grid-in-internet-explorer-b38669e75d66

     https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/

     https://css-tricks.com/css-grid-in-ie-duplicate-area-names-now-supported/

**** CSS Flexbox
     https://philipwalton.github.io/solved-by-flexbox/demos/grids/

     https://codepen.io/chriscoyier/pen/vWEMWw?editors=1100
**** CSS Misc

     https://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/

     https://philipwalton.github.io/solved-by-flexbox/demos/grids/

     http://bradfrost.com/blog/post/responsive-nav-patterns/

     https://css-irl.info/how-to-convince-your-team-to-adopt-grid/

     https://love2dev.com/blog/html-css-underline/

     https://flaviocopes.com/css-centering/

     https://meyerweb.com/eric/tools/css/reset/index.html

     https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06

     https://css-tricks.com/dont-overthink-it-grids/

     https://www.sitepoint.com/understanding-css-grid-systems/

     https://www.sitepoint.com/css-architectures-refactor-your-css/

     https://www.smashingmagazine.com/2013/06/workflow-design-develop-modern-portfolio-website/

     https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/

     https://www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/

     https://medium.freecodecamp.org/how-to-get-better-at-writing-css-a1732c32a72f

     https://css-tricks.com/snippets/css/a-guide-to-flexbox/

     https://css-tricks.com/snippets/css/complete-guide-grid/

     https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#Keyword_index

     https://www.learnenough.com/css-and-layout-tutorial/css/introduction
*** CSS Blogs/Site
    csstriggers.com
    https://thecssworkshop.com/

    https://gridbyexample.com/

    http://www.csszengarden.com/

    http://learnlayout.com/

*** CSS Frameworks
    Compass
*** CSS Backward Compatibility
    https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks
** Web
*** Web Studies
**** Web Books
***** Learning Web Design
****** Exercises
****** Books/Articles recommended
       | Books/Articles                                                                                                             |   |
       |----------------------------------------------------------------------------------------------------------------------------+---|
       | Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement, 2nd Edition, by Aaron Gustafson (New Riders). |   |
       | The Uncertain Web: Web Development in a Changing Landscape by Rob Larson                                                   |   |
       | Designing with Progressive Enhancement by Todd Parker                                                                      |   |
       | https://webmasters.googleblog.com/2016/11/mobile-first-indexing.html                                                       |   |
       |                                                                                                                            |   |
**** Web Courses
     https://courses.wesbos.com/account
***** Web Courses Tips
      https://freefrontend.com/html-css-books/
      https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-1-7d4f7f0bff02
      https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-2-adfa4824da9b

*** Web Node
**** Node frameworks
     https://adonisjs.com/
*** Web Tools
***** Web Tools - Task Runners
****** Gulp
       https://css-tricks.com/gulp-for-beginners/
****** Grunt
***** Web Tools - Debug
****** Unitary Test:
****** UI Test
****** TDD:
       Selenium
       Test Complete
       Cuit
***** Web Tools - Dep Manger
      Bower
      Yarn
***** Web Tools - Misc
      https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=db

      http://gs.statcounter.com/

      https://caniuse.com/

      https://egghead.io/

      http://overapi.com

      https://web.dev/
***** Web Tools - Test Automation
      Selenium, Jest, or Enzyme
*** Web Design
    http://paletton.com/

    https://webgradients.com/
**** Web Design - Articles
     https://www.smashingmagazine.com/2019/05/svg-design-tools-practical-guide/

     https://www.yeseniaperezcruz.com/blog-1/2018/4/28/scenario-driven-design-systems

     https://jakearchibald.com/2015/anatomy-of-responsive-images/
**** Web Desing - People
     Aaron Draplin

**** Web Desing - Sites
     https://tympanus.net/codrops/
*** Web Frameworks
    bootstrap
    materalize
    foundation
*** Web Images
    http://responsiveimages.org/
*** Web Performance
    https://larahogan.me/design/

    High Performance Mobile Web: Best Practices for Optimizing Mobile Web Apps by Maximiliano Firtman

    https://developers.google.com/speed/?csw=1

    http://webpagetest.org/

    https://developers.google.com/speed/pagespeed/insights/

    http://yslow.org/

*** Web CrossBrowsers
**** <IE10 - Excuses:
     - E10 and below don't have support for the latest TLS encryption (out of the
     box), and thus if you handle any credit card payments, IE10 is no longer
     considered secure.
     - Entering passwords becomes risky too. Logging in no longer becomes
       secure. That will affect a much greater number of sites and is another
       good point to raise.

*** Web Backend
**** Web Backend - Node.js
     [[https://nodejs.org/en/][Node.js]]
****** NPM commands
       List all npm packages (no verbose): npm list -g --depth=0
****** NPM Tips
       https://www.sitepoint.com/beginners-guide-node-package-manager/
**** Web Backend - Ruby
**** Web Backend - PHP
**** Web Backend - Python
     https://welcometothedjango.com.br
*** Web Native Apps
    https://www.nativescript.org/
*** Web Security
    Strong understanding of web application security (e.g. XSS, CSRF, CORS)
*** Web More
    https://www.schoolofnet.com/plano-de-estudo-frontend-developer/

    https://www.htmldog.com/

    https://web.archive.org/web/20151110193658/https://www.drupal.org/node/1245650

    https://www.happybearsoftware.com/how-to-get-a-programmer-job

    https://developer.mozilla.org/en-US/Learn/Common_questions/How_does_the_Internet_work#Summary


    li <strong>Semantics:</strong> Semantic, SEO, HTTP Requests, Viewport.
    li <strong>CSS:</strong> Grid, Flexbox, Sizing, Queries.
    li <strong>JavaScript:</strong> Dynamic transitions, Complex/Immersive UI animations.
    li <strong>Design:</strong> Unified, Reusable & Flexible Design, Animated Illustrations, Infographics, Morphing Shapes.

**** Web Beginners - Books/Videos/Tips
     Books and w3.org Standards:
     Learning Web Design by Jennifer Niederst Robbins
     CSS Definitive Guide by Eric Meyer
     Eloquent Javascript by Marijn Haverbeke

     Youtube:
     Jen Simmons,
     Rachel Andrew,
     Brad Traversy Media,
     Kevin Powell,
     Dev Ed,
     Wes Bros
     whatsdev
     Joshua Fluke
     Logos by Nick
     Design Matters

     Blogs:
     aneventapart.com
     smashingmagazine.com
     css-tricks.com
     syntax.fm
     javascript weekly

**** Web More - Sites Eg
     https://projecteuler.net/archives

     https://html5up.net/

     https://codesandbox.io/

     https://www.awwwards.com/

     https://www.hackerrank.com/

     https://eusoudev.com.br/

     https://tableless.com.br/todos-os-posts/

**** Web More - Terms
     | Terms                     |   |
     |---------------------------+---|
     | standards-compliant sites |   |

**** Web More - PodCasts
     https://soundcloud.com/lambdatres
**** Web More - Articles
     https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-1-7d4f7f0bff02

     https://hackernoon.com/how-i-used-my-programming-skills-to-save-over-8-hours-of-writing-work-7aba154d4232

     https://soundcloud.com/lambdatres/100-aprendendo-javascript

     https://dev.to/gypsydave5/why-you-shouldnt-use-a-web-framework-3g24

     https://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/140-thank_youhelloyiibucom
**** Web More - Jobs
     https://vulpi.com.br/

     upwork
**** Web More - Learning resources
     https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web

     https://abookapart.com/

     https://www.learnenough.com/

     https://www.theodinproject.com/home
**** Web More - Standards
     https://www.w3.org/standards/
***** Web Standards - Best Pratices
      https://www.w3.org/standards/techs/htmlbp#w3c_all

**** Web More - Skill and Projects
     | Skill                 | ....                                                                                                                             |
     |-----------------------+----------------------------------------------------------------------------------------------------------------------------------|
     | Editors               | '(Emacs VSCode)                                                                                                                  |
     | Design/Mockup         | '(Gimp Krita Photoshop)                                                                                                          |
     | HTML                  | semantics HTML5                                                                                                                  |
     | CSS                   | (Positionint Box Model  Flexbox  CSS Grid  CSS Variables)                                                                        |
     | Browser               | Dev Tools                                                                                                                        |
     | Layout                | Responsive - Set viewport - Fluid width - Media Queries - rem over px - Mobile First/Stacked Columns                             |
     | Hosting/Domain        | FTP/SFTP(Filezilla...) - Sharing Hostesd (hostgator) - (Static hosting (Netlify Github Pages))                                   |
     | JS                    | DOM manipulation / Events - JSON - FetchAPI - ES8+                                                                               |
     | Frameworks            | ((HTML '(Bootstrap Materalize Bulma))  (CSS '(Sass)) (JS '(Vue React Angular)))                                                  |
     | Git & Tooling         | ((Packages Manager (NPM Yarn)) (Module Bundling (WebPack Parcel)) (TaskRunners (Gulp Grunt NPMscripts)))                         |
     | Server Side Languages | (Languages '(NodeJS ((Pack Managn) (HTTP Routing)) (Framework (Express Koa Adonis))))                                            |
     | Server Side Database  | ((Relational '(MySQL PosteSQL)) (NoSQL '(MongoDB CouchBase)) (Cloud '(Firebase AWS Azure)) (Lighweight '(SQLite NeDB Redis)))    |
     | State Management      | '(Redux ContextAPI (Apollo '(GraphQL Client)) (VueX NgRx))                                                                       |
     | Server Rendered Pages | '(Next.js Nuxt.js )                                                                                                              |
     | CMS                   | ((PHP '(WordPress Drupal)) (JS '(Ghost KeyStone)))                                                                               |
     | DevOPS Deploying      | ((Virtual '(Docker Vagrant)) (Testing '(Unit Integration Functional System) (Jest Mocha)) (Platform '(DigitalOcean AWS Heroku))) |
     | Mobile Apps           | (ReactNative Flutter)                                                                                                            |
     | Desktop               | (Electron)                                                                                                                       |


     | Projects              |                  |
     |-----------------------+------------------|
     | Static Website        | small, informal  |
     | UI Layouts            | create           |
     | Dynamic Functionality | modal, slideshow |
     | Deploy/Maintain       | ...              |

***** Interview Tips
***** Questions/Answers
      | Questions                                                  | Answers                                                                           |
      |------------------------------------------------------------+-----------------------------------------------------------------------------------|
      | 1. Why you are interested in this job?                     | What drivers and motivates to this choose this job?                               |
      | 2. Why/How do you want to sell this product (pen)?         | Why you are worthy their time ? Be thoughtful why you want to sell this product   |
      | 3. What do you know about our costumers? Why they chose us |                                                                                   |
      | 4. Tell me about our competitors,                          | Who we are, what they know about our clients, and why you can win their proposals |
      | 5. How you deal with work burnout                          | What you do solve it and keep up selling well...                                  |
      | 6. Last time you took risk and it did not pay out!         | Be honest. You should have take more risks and why it did not work out, SMILE!    |
      | 7.                                                         |                                                                                   |
      | 8.                                                         |                                                                                   |
      | 9. What last time you did what you learned and succed.     | Sources may vary from books, random ads...what you have learn from people         |
      | 10. What do you would take you sell yourself to them       | what on you makes you special...                                                  |
      | 11. Do you like this person and why would by its product?  | No one buys if they dont like who is selling                                      |
      | 12. How fast you sell this product                         | Taking long means less chance to sell                                             |
      | 13. Connections and network                                |                                                                                   |
      | 14. What are your prospect/strategy                        |                                                                                   |

      https://medium.freecodecamp.org/9-books-for-junior-developers-in-2019-e41fc7ecc586
**** Web More - Organizations
     https://www.w3.org
* Shell Script
** GNU Bash
*** Features
**** read
**** shift
     shift: shift cli args to next right
**** <<<
     here-string, give a pre-made string of text to a program
**** >&2
**** shopt
**** options
***** --init-file
      use alternative init file
***** -c
      run command and arguments
**** man
     - bash-builtins: describe bash built in features
**** >
     echo 'asd' > temp  | create a file or overwrite existent one
**** >>
     echo 'asd' >> temp | create a file or append to end of existent one
**** << EOF > OEF
     here documents
**** <<<
     here-string
*** Tips
    #+begin_src shell-script
    #  get word after $char in string $var
    ${var##*char}

    # return s
    ${var%sub}

    # variable inline assignment
    var=$(test && echo "A" || echo "B")

    # variable inline assignment numeric    |
    (( a = b==5 ? c : d )) or let a=b==5?c:d;

    # return arguments of function as array |
    $@
						 |                                       |

    #+end_src

*** Resources
    - http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html#toc6

    - https://bash.cyberciti.biz/guide/Main_Page

    - https://wiki.bash-hackers.org

    - https://explainshell.com/
**** Bash Articles
     https://wiki.bash-hackers.org/syntax/arrays

     https://phoxis.org/2010/03/14/read-multiple-arg-bash-script/

     https://likegeeks.com/linux-command-line-tricks/

     https://linuxize.com/post/bash-while-loop/

     https://www.linuxjournal.com/content/return-values-bash-functions

     https://natelandau.com/bash-scripting-utilities/

**** Bash Quick Tutorial
     #+BEGIN_SRC shell-script
     # Check if string contains a sub-string.
     if [[ "$var" == *sub_string* ]]; then
	 printf '%s\n' "sub_string is in var."
     fi

     # Inverse (substring not in string).
     if [[ "$var" != *sub_string* ]]; then
	 printf '%s\n' "sub_string is not in var."
     fi

     # This works for arrays too!
     if [[ "${arr[*]}" == *sub_string* ]]; then
	 printf '%s\n' "sub_string is in array."
     fi

     # Check if string starts with sub-string.
     if [[ "$var" == sub_string* ]]; then
	 printf '%s\n' "var starts with sub_string."
     fi

     # Inverse (var doesn't start with sub_string).
     if [[ "$var" != sub_string* ]]; then
	 printf '%s\n' "var does not start with sub_string."
     fi

     # Check if string ends with sub-string.
     if [[ "$var" == *sub_string ]]; then
	 printf '%s\n' "var ends with sub_string."
     fi

     # Inverse (var doesn't start with sub_string).
     if [[ "$var" != *sub_string ]]; then
	 printf '%s\n' "var does not end with sub_string."
     fi

     # Variables
     Assign and access a variable using a variable.

     hello_world="test"

     # Create the variable name.
     var1="world"
     var2="hello_${var1}"

     # Print the value of the variable name stored in 'hello_$var1'.
     printf '%s\n' "${!var2}"

     # Loop over a range of numbers.
     # Loop from 0-100 (no variable support).
     for i in {0..100}; do
	 printf '%s\n' "$i"
     done

     # Loop over a variable range of numbers.

     # Don't use seq.

     # Loop from 0-VAR.
     VAR=50
     for ((i=0;i<=VAR;i++)); do
	 printf '%s\n' "$i"
     done

     # Loop over an array.

     arr=(apples oranges tomatoes)

     # Just elements.
     for element in "${arr[@]}"; do
	 printf '%s\n' "$element"
     done

     # Loop over an array with an index.

     arr=(apples oranges tomatoes)

     # Elements and index.
     for i in "${!arr[@]}"; do
	 printf '%s\n' "${arr[$i]}"
     done

     # Alternative method.
     for ((i=0;i<${#arr[@]};i++)); do
	 printf '%s\n' "${arr[$i]}"
     done

     # Loop over the contents of a file.

     while read -r line; do
	 printf '%s\n' "$line"
     done < "file"

     # Loop over files and directories.

     # Don’t use ls.

     # Greedy example.
     for file in *; do
	 printf '%s\n' "$file"
     done

     # PNG files in dir.
     for file in ~/Pictures/*.png; do
	 printf '%s\n' "$file"
     done

     # Iterate over directories.
     for dir in ~/Downloads/*/; do
	 printf '%s\n' "$dir"
     done

     # Iterate recursively.
     shopt -s globstar
     for file in ~/Pictures/**/*; do
	 printf '%s\n' "$file"
     done
     shopt -u globstar

     # File handling
     # Read a file to a string.

     # Alternative to the cat command.

     file_data="$(<"file")"

     # Read a file to an array (by line).

     # Alternative to the cat command.

     # Bash <4
     IFS=$'\n' read -d "" -ra file_data < "file"

     # Bash 4+
     mapfile -t file_data < "file"

     # Split a string on a delimiter. string="1,2,3"
     # To multiple variables.
     IFS=, read -r var1 var2 var3 <<< "$string"

     # To an array.
     IFSA=, read -ra vars <<< "$string"

     # Create an empty file.

     # Alternative to touch.

     # Shortest.
     > file
     :> file

     # Longer alternatives:
     echo -n > file
     printf '' > file

     # Arithmetic
     # Simpler syntax to set variables.

     # Simple math
     ((var=1+2))

     # Decrement/Increment variable
     ((var++))
     ((var--))
     ((var+=1))
     ((var-=1))

     # Using variables
     ((var=var2*arr[2]))

     # Ternary tests.

     # Set the value of var to var2 if var2 is greater than var.
     # var: variable to set.
     # var2>var: Condition to test.
     # ?var2: If the test succeeds.
     # :var: If the test fails.
     ((var=var2>var?var2:var))

     # Shorter for loop syntax.

     # Tiny C Style.
     for((;i++<10;)){ echo "$i";}

	# Undocumented method.
	for i in {1..10};{ echo "$i";}

		 # Expansion.
		 for i in {1..10}; do echo "$i"; done

		 # C Style.
		 for((i=0;i<=10;i++)); do echo "$i"; done

		 # Shorter infinite loops.

		 # Normal method
		 while :; do echo hi; done

		 # Shorter
		 for((;;)){ echo hi;}

		     # Shorter function declaration.

		     # Normal method
		     f(){ echo hi;}

		     # Using a subshell
		     f()(echo hi)

		     # Using arithmetic
		     # You can use this to assign integer values.
		     # Example: f a=1
		     #          f a++
		     f()(($1))

		     # Using tests, loops etc.
		     # NOTE: You can also use ‘while’, ‘until’, ‘case’, ‘(())’, ‘[[]]’.
		     f()if true; then echo "$1"; fi
		     f()for i in "$@"; do echo "$i"; done

		     Shorter if syntax.

		     # One line
		     # Note: The 3rd statement may run when the 1st is true
		     [[ "$var" == hello ]] && echo hi || echo bye
		     [[ "$var" == hello ]] && { echo hi; echo there; } || echo bye

		     # Multi line (no else, single statement)
		     # Note: The exit status may not be the same as with an if statement
		     [[ "$var" == hello ]] && \
			 echo hi

		     # Multi line (no else)
		     [[ "$var" == hello ]] && {
			 echo hi
			 # ...
		     }

		     # Simpler case statement to set variable.

		     # We can use the : builtin to avoid repeating variable= in a case statement. The $_ variable stores the last argument of the last successful command. : always succeeds so we can abuse it to store the variable value.

		     # Example snippet from Neofetch.
		     case "$(uname)" in
			 "Linux" | "GNU"*)
			     : "Linux"
			     ;;

			 ,*"BSD" | "DragonFly" | "Bitrig")
			     : "BSD"
			     ;;

			 "CYGWIN"* | "MSYS"* | "MINGW"*)
			     : "Windows"
			     ;;

			 ,*)
			     printf '%s\n' "Unknown OS detected, aborting..." >&2
			     exit 1
			     ;;
		     esac

		     # Finally, set the variable.
		     os="$_"

		     #     Internal Variables

		     #     NOTE: This list does not include every internal variable (You can help by adding a missing entry!).

		     #     For a complete list, see: http://tldp.org/LDP/abs/html/internalvariables.html
		     # Get the location to the bash binary.

		     "$BASH"

		     # Get the version of the current running bash process.

		     # As a string.
		     "$BASH_VERSION"

		     # As an array.
		     "${BASH_VERSINFO[@]}"

		     # Open the user's preferred text editor.

		     "$EDITOR" "$file"

		     # NOTE: This variable may be empty, set a fallback value.
		     "${EDITOR:-vi}" "$file"

		     Get the name of the current function.

		     # Current function.
		     "${FUNCNAME[0]}"

		     # Parent function.
		     "${FUNCNAME[1]}"

		     # So on and so forth.
		     "${FUNCNAME[2]}"
		     "${FUNCNAME[3]}"

		     # All functions including parents.
		     "${FUNCNAME[@]}"

		     Get the host-name of the system.

		     "$HOSTNAME"

		     # NOTE: This variable may be empty.
		     # Optionally set a fallback to the hostname command.
		     "${HOSTNAME:-$(hostname)}"

		     # Get the architecture of the Operating System.

		     "$HOSTTYPE"

		     # Get the name of the Operating System / Kernel.

		     # This can be used to add conditional support for different Operating Systems without needing to call uname.

		     "$OSTYPE"

		     # Get the current working directory.

		     # This is an alternative to the pwd built-in.

		     "$PWD"

		     # Get the number of seconds the script has been running.

		     # Check if a program is in the user's PATH.

		     # There are 3 ways to do this and you can use either of
		     # these in the same way.
		     type -p executable_name &>/dev/null
		     hash executable_name &>/dev/null
		     command -v executable_name &>/dev/null

		     # As a test.
		     if type -p executable_name &>/dev/null; then
			 # Program is in PATH.
		     fi

		     # Inverse.
		     if ! type -p executable_name &>/dev/null; then
			 # Program is not in PATH.
		     fi

		     # Example (Exit early if program isn't installed).
		     if ! type -p convert &>/dev/null; then
			 printf '%s\n' "error: convert isn't installed, exiting..."
			 exit 1
		     fi

		     "$SECONDS"

		     # Bypass shell aliases.

		     # alias
		     ls

		     # command
		     # shellcheck disable=SC1001
		     \ls

		     # Bypass shell functions.

		     # function
		     ls

		     # command
		     command ls
     #+END_SRC
** Zsh
** Fish
** TCSH
** Posix
*** Shell Commands
    |         |                                                                 |
    |---------+-----------------------------------------------------------------|
    | sudo !! | run last command as sudo                                        |
    | xargs   |                                                                 |
    | set -e  | -e  Exit immediately if a command exits with a non-zero status. |
* Yaml
** Traits
*** pair = key: value
*** | =  pipe
*** > = pipe
*** indentaion = new objects
*** - = list
*** # = commentary
*** --- = multi archive
*** {{ var }} = use variables
*** quotes
     "barri go ta" or
     barri go ta
** Resources
   https://yamllint.com
* Emacs Lisp
** Progress
*** Books
    | Books      | Cap | @ | late | revision |
    |------------+-----+---+------+----------|
    | Emacs Lisp |     |   |      |          |

*** SLOC
    | Source Code | folder      | file        | @ |
    |-------------+-------------+-------------+---|
    | emacs       | lisp/eshell | esh-util.el |   |
    |             |             |             |   |
* Misc
** Terms
*** Search Traversal
    - depth-first traversal
    - breadth-first traversal
** Books
   Designing Data Intensive Apps
** Skills
  - Language
  - Unit Test
  - Framework
  - Database
  - Git
  - Docker
