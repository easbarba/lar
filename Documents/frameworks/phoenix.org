#+TITLE: Phoenix

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 3 :ignore this
  :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#packages][Packages]]
    - [[#gem][gem]]
    - [[#bundle][bundle]]
      - [[#outdated][outdated]]
      - [[#gem][gem]]
      - [[#install][install]]
      - [[#update][update]]
    - [[#irb][irb]]
      - [[#cli][cli]]
      - [[#inside][inside]]
    - [[#rspec][rspec]]
    - [[#unit-test][unit test]]
    - [[#pry][pry]]
  - [[#features][Features]]
    - [[#project-structure][project structure]]
    - [[#system-errors][System Errors]]
      - [[#usage][usage]]
    - [[#exceptions][exceptions]]
      - [[#errors][Errors]]
      - [[#usage][usage]]
    - [[#writable-object-attribute][writable object attribute]]
    - [[#multithreading][Multithreading]]
      - [[#usage][usage]]
    - [[#modules][modules]]
    - [[#continuation][continuation]]
    - [[#fibers][Fibers]]
      - [[#errors][errors]]
      - [[#usage][usage]]
    - [[#delimited-input][delimited input]]
    - [[#rake][rake]]
      - [[#usage][usage]]
    - [[#gem][gem]]
    - [[#variables][Variables]]
      - [[#class-variables][class variables]]
      - [[#global-variables][global variables]]
    - [[#self][self]]
    - [[#commentary][commentary]]
    - [[#defined][defined?]]
    - [[#iterators][iterators]]
    - [[#block-local-variables][block-local variables]]
    - [[#loops][loops]]
    - [[#statement-modifiers][statement modifiers]]
    - [[#comparison][comparison]]
    - [[#conditional][conditional]]
    - [[#class][class]]
      - [[#class][class]]
    - [[#append-][append <<]]
    - [[#blocks][blocks]]
    - [[#lambda][lambda]]
      - [[#how][How]]
      - [[#usage][Usage]]
    - [[#methods][methods]]
    - [[#yield][yield]]
    - [[#procs][procs]]
    - [[#operators][operators]]
    - [[#enumerable][enumerable]]
    - [[#enumerator][enumerator]]
      - [[#lazy][lazy]]
      - [[#each_car][each_car]]
      - [[#each][each]]
      - [[#to_enumenum_for][to_enum/enum_for]]
    - [[#inject][inject]]
    - [[#select][select]]
    - [[#succ][succ]]
    - [[#collect][collect]]
    - [[#freeze][freeze]]
    - [[#dup][dup]]
    - [[#dig][dig]]
    - [[#fetch][fetch]]
    - [[#tap][tap]]
    - [[#map][map]]
    - [[#pluck][pluck]]
    - [[#quoting][Quoting]]
    - [[#here-documents][here documents]]
    - [[#proc][proc]]
    - [[#do-end-as-param][do end as param]]
    - [[#array][array]]
    - [[#datetime][date/time]]
    - [[#lambda][lambda]]
    - [[#begin-rescue][begin rescue]]
    - [[#hash][hash]]
    - [[#range][range]]
    - [[#sets][sets]]
    - [[#gsub][gsub]]
    - [[#find][find]]
    - [[#map][map]]
    - [[#each_slice][each_slice]]
    - [[#lazy][lazy]]
    - [[#with_index][with_index]]
    - [[#enum_for][enum_for]]
    - [[#more][more]]
    - [[#concepts][Concepts]]
      - [[#iterator][Iterator]]
      - [[#methods][Methods]]
      - [[#enumerator][Enumerator]]
    - [[#instructions][Instructions]]
      - [[#rbenv][Rbenv]]
      - [[#misc][misc]]
  - [[#toolings][Toolings]]
  - [[#videos][Videos]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
  :END:
* Progress
** Books
| Books               | Chapter                          | @                      | late | revision |
|---------------------+----------------------------------+------------------------+------+----------|
| Programming Phoenix | Chapter 5 - Authenticating Users | Restricting Access     |      |          |
| Phoenix @ hexdocs   | Request life cycle               | From endpoint to views |      |          |

** SLOC
| Project | folder | file | @ |
|---------+--------+------+---|
| phoenix |        |      |   |
| ecto    |        |      |   |
| plug    |        |      |   |

* Features
** [[https://hexdocs.pm/phoenix/plug.html][plug]]
Plug lives at the heart of Phoenix's HTTP layer, and Phoenix puts Plug front and
center. We interact with plugs at every step of the request life-cycle, and the
core Phoenix components like Endpoints, Routers, and Controllers are all just
Plugs internally. Let's jump in and find out just what makes Plug so special.

** [[https://hexdocs.pm/phoenix/contexts.html][context]]
Contexts are dedicated modules that expose and group related functionality.

** [[https://hexdocs.pm/phoenix/routing.html][routing]]
Routers are the main hubs of Phoenix applications. They match HTTP requests to
controller actions, wire up real-time channel handlers, and define a series of
pipeline transformations scoped to a set of routes.

*** pipeline

** controllers
** view
** templates
** embedded elixir
#+begin_src elixir

<h1>Listing Users</h1>

<table>
  <%= for user <- @users do %>
    <tr>
      <td><%= render "user.html", user: user %></td>
      <td><%= link "View", to: Routes.user_path(@conn, :show, user.id) %></td>
    </tr>
  <% end %>
</table>

#+end_src

* cli
Set environment. (default: env)
#+begin_src elixir
export MIX_ENV=env
#+end_src

You can also run your app inside IEx (Interactive Elixir) as:
#+begin_src elixir
iex -S mix phx.server
#+end_src

same as above but do not run phoenix server
#+begin_src elixir
iex -S mix
#+end_src

see all available routes
#+begin_src elixir
mix phx.routes
#+end_src

* config
* Misc
** Presence / Tracking
** LiveView
* Packages
** Ecto
*** Via iex
#+begin_src elixir
alias Rumbl.Repo
alias Rumbl.Accounts.User

Repo.insert(%User{name: "Bruce", username: "redrapids"})
Repo.all User
Repo.get User,1

#+end_src

* controllers
* templates
* routers
