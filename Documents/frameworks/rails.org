#+TITLE: Ruby On Rails

* Summary
    :PROPERTIES:
    :TOC:      :include all :depth 3 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#cli][Cli]]
    - [[#database][Database]]
    - [[#misc][Misc]]
    - [[#tasks-rake][Tasks (rake)]]
    - [[#log][Log]]
    - [[#migration][Migration]]
    - [[#models][Models]]
    - [[#console][Console]]
    - [[#enviroment][Enviroment]]
  - [[#methods][Methods]]
  - [[#logger][Logger]]
    - [[#methods][Methods]]
  - [[#active-record][Active Record]]
    - [[#associations][Associations]]
    - [[#validations][Validations]]
    - [[#migrations][Migrations]]
    - [[#callbacks][Callbacks]]
    - [[#query-interface][Query Interface]]
    - [[#find][Find]]
      - [[#sql-syntax][SQL Syntax]]
      - [[#array-condition][Array Condition]]
      - [[#association-proxies][Association Proxies]]
      - [[#more][more]]
    - [[#named-scope][Named Scope]]
  - [[#database][Database]]
  - [[#views][Views]]
  - [[#controller][Controller]]
  - [[#models][Models]]
    - [[#fat-models][Fat models]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
    - [[#rails][Rails]]
      - [[#cli][cli]]
      - [[#files][files]]
  - [[#rest][REST]]
  - [[#json][JSON]]
  - [[#traits][Traits]]
  - [[#i18n][i18n]]
  - [[#models][Models]]
  - [[#misc][Misc]]
  - [[#priorities][Priorities]]
  :END:
* Progress
** Books
|                         |                               |                                      |
|-------------------------+-------------------------------+--------------------------------------|
| Beginning Rails 6       | 7 Action Pack:                | Rendering Responses                  |
| Agile Development Rails | 11 Task F: Add a Dash of Ajax |                                      |
| Sustainable Rails       | 5 Bussines logic              | 5.3 Business Logic in Active Records |
| Rails Guide             | Action Controller             | 4.4 default_url_options              |

** SLOC
|       |                                      |                 |
|-------+--------------------------------------+-----------------|
| rails | actioncable/lib/action_cable/channel | broadcasting.rb |

* cli
** database
| cmd              | desc                                                                   |
|------------------+------------------------------------------------------------------------|
| dbconsole        |                                                                        |
| console          |                                                                        |
| db:create        |                                                                        |
| db:create:all    | create test,production and development database                        |
| db:migrate       | create schema                                                          |
| db:rollback      | rollback recently created schema                                       |
| db:system:change | switch databases                                                       |
| db:seed          |                                                                        |
| db:setup         | recreate database and adds the seed data as you may expect.            |
| db:reset         | drop database, recreates it, loads the schema, and seeds your database |
** new
| how               | desc                                              |
+-------------------+---------------------------------------------------|
| –d or --database= | use the database management system of your choice |
| new <name>        |                                                   |
** test
|                  |   |
|------------------+---|
| test             |   |
| test:controllers |   |
** destroy
| cmd                         | desc |
+-----------------------------+------|
| destroy controller articles |      |
| destroy model Artile        |      |

** routes
** generate
*** resource
*** scaffold
| how                                 | desc |
+-------------------------------------+------|
| generate scaffold Article <options> |   |
|                                     |   |

*** models
| what   | how                                                                    | desc |
|--------+------------------------------------------------------------------------+------|
| models | generate model <Name>                                                  |      |
|        | destroy controller articles                                            |      |
|        | destroy model Artile                                                   |      |
| a      |                                                                        |      |
|        | generate scaffold Article title:string body:text published_at:datetime |      |
|        |                                                                        |      |

** server
|                               |   |
|-------------------------------+---|
| --binding=[PORT] or -b [PORT] |   |

** misc
| what       | how         | desc |
|------------+-------------+------|
| destroy    | destroy / d |      |
| belongs_to |             |      |

** tasks
Rails 6 uses rake as task runner

|              |                         |
|--------------+-------------------------|
| --task or -T | list all task available |
|              |                         |

** log
|                  |   |
|------------------+---|
| :clear LOGS=test |   |

** migration
|                    |   |
|--------------------+---|
| AddXXXToTABLE      |   |
| RemoveXXXFromTABLE |   |

** console
| what              | how                                                                | desc                                                                                                                               |
|-------------------+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| create            | create(title: "foo", body: "bar", published_at: '2020-01-31')      | create new and save to db                                                                                                          |
| save              | a.save  / a.save!                                                  | save object to db / save and show errors                                                                                           |
| new               | a.new                                                              | create an empty object                                                                                                             |
| count             | A.count                                                            |                                                                                                                                    |
| find              | A.find(3) / A.find([4,5])                                          |                                                                                                                                    |
| first             | A.first   / A.first.title                                          |                                                                                                                                    |
| last              | A.last                                                             |                                                                                                                                    |
| all               | A.all / A.all.size / A.all.each { \a\ puts a.title }               | relational collection                                                                                                              |
| order             | A.order(:order) / A.order(:order :desc)                            | order per title / order descedent                                                                                                  |
| where             | A.where(title: 'foo')                                              |                                                                                                                                    |
| update_attributes | update_attributes(title: "foo", published_at: 1.day.ago)           |                                                                                                                                    |
| find_or_create_by |                                                                    | find or if none is found create a db anew                                                                                          |
| <<                | a.x << x                                                           |                                                                                                                                    |
| delete            |                                                                    | don’t instantiate or perform callbacks on the object they’re deleting. They remove the row immediately from the database.          |
| destroy           | A.destroy(1) / .destroy([3,4])                                     | finds a single row first and then deletes the row /works on the instance                                                           |
| delete_by         |                                                                    |                                                                                                                                    |
| errors            | a.errors.any? / a.errors.full_messages / a.errors.messages[:title] |                                                                                                                                    |
|                   | a.valid?                                                           |                                                                                                                                    |
| reload            |                                                                    | reloads the Rails application environment within your console session. You need to call it when you make changes to existing code. |
| routes --expanded |                                                                    |                                                                                                                                    |
| byebug            |                                                                    |                                                                                                                                    |

* bin
Useful personal scripts

- brakeman
- bundle-audit
- lograge

** run
correctly forward port in a docker/wm setup
#+begin_src shell
#!/usr/bin/env bash
set -e

# We must bind to 0.0.0.0 inside a
# Docker container or the port won't forward
bin/rails server --binding=0.0.0.0
#+end_src
** setup
** rails
** ci
run tests and quality checks.

- check `bin/setup` idempodency by running that script twice to check.
-

#+begin_src shell
bin/setup # perform the actual setup
bin/setup # ensure setup is idempotent
bin/ci # perform all checks
#+end_src

* Models
|                   |                            |
|-------------------+----------------------------|
| naming convention | CamelCased or snake_cased  |

** validations
*** validates
#+begin_src ruby
class Article < ApplicationRecord
  validates :title, :body, presence: true
end
#+end_src


** concerns
** best pratices
*** fat models
An intelligent model like this is often called fat. Instead of performing model-related logic in
other places (i.e., in controllers or views), you keep it in the model, thus making it fat. This
makes your models easier to work with and helps your code stay DRY.
* Routes
- localhost:xxxx/rails/info/routes

** eg
#+begin_src ruby
get '/teams/home', to: 'teams#index' # http://example.com/teams
get '/teams/search/:query', to: 'teams#search' # http://example.com/teams/search/toronto
#+end_src
** named routes


#+begin_src ruby
get '/teams/search/:query', to: 'teams#search', as: 'search' #search_url and search_path

#+end_src
* Controller
* Views
** Templates
*** Embedded Ruby
**** evaluation embedding tags (<% %>)
**** output embedding tags (<%= %>)
* Enviroment
|                      |                                                                          |
|----------------------+--------------------------------------------------------------------------|
| RAILS_ENV=production |                                                                          |

* Logger
- live log feed: tail -f log/development.log
-  Every controller has a logger attribute.
** Methods
|       |   |
|-------+---|
| error |   |
| debug |   |
| warn  |   |

#+begin_src ruby
Rails.logger.debug "This will only show in development"
Rails.logger.warn "This will show in all environments"
#+end_src

* Debugging
** Views

** <% console %>
 abre um console na página que vc coloca <% console %> aí vc pode chamar as variáveis daquela página pra entender o que tá rolando
#+begin_src ruby
<% console %>
#+end_src

* Components
** Action Cable
*** concept
- create a channel, broadcast some data, and receive the data.
- support multiple streams
*** cli
|                          |                 |
|--------------------------+-----------------|
| generate channels <name> | in /app/channel |
|                          |                 |
* Database
** Active Record
- Single-Table Inheritance

*** methods
#+begin_src ruby
# new
Article.new(title: "Introduction to Active Record",
body: "Active Record is Rails's default ORM..", published_at: Time.zone.now)

# create
Article.create(title: "RubyConf 2020", body: "The annual RubyConf will
take place in..", published_at: '2020-01-31')

article.save
article.new_record?
article.attributes
article.id
article.update_attributes(title: "RailsConf2020", published_at: 1.day.ago)
article.destroy
article.valid?
article.errors.size
article.errors.messages[:title]
article.errors.full_messages

articles.size

Article.count
Article.find(3)
Article.first
Article.last
Article.all
Article.order(:title)
Article.where(title: 'RailsConf').first
Article.destroy([2,3])
Article.delete(4) # don’t instantiate or perform callbacks on the object they’re deleting
Article.delete_by("published_at < '2011-01-01'")
#+end_src
*** associations
|                         |                                                                                    |
|-------------------------+------------------------------------------------------------------------------------|
| has_many                |                                                                                    |
| has_one                 |                                                                                    |
| belongs_to              | goes in the class with the foreign key                                             |
| many_to_many            |                                                                                    |
| has_and_belongs_to_many | join table that keeps a reference to the foreign keys involved in the relationship |
|                         |                                                                                    |


#+begin_src ruby
class Message < ApplicationRecord
  has_many :attachments
end

class Attachment < ApplicationRecord
  belongs_to :message
end

user = User.create(email: "user@example.com", password: "secret"
profile = Profile.create(name: "John Doe", bio: "Ruby developer trying to learn Rails")
profile.user = user
user.profile.destroy
user.create_profile name: 'Jane Doe', color: 'pink'
user.build_profile(bio: 'eats leaves')
#+end_src

*** exceptions
|                |                                             |
|----------------+---------------------------------------------|
| RecordNotFound | couldn’t find any record with the id given. |

*** Validations
*** Migrations
*** Migration
**** drop_table
drop existing migration table
#+begin_src
ActiveRecord::Migration.drop_table :articles
#+end_src

*** Filters
- before_create
- after_create
- before_save
- after_save
- before_destroy
- after_destroy
*** Query Interface
*** Finding
**** SQL Syntax
#+begin_src ruby
Obj.where(title: 'AwesomeWM is really awesome')
#+end_src
**** Array Condition Syntax
#+begin_src ruby
Article.where("published_at < ?", Time.now)
Article.where("published_at < ?", Time.now).to_sql # inspect the issued SQL statement

Article.where("title LIKE :search OR body LIKE :search", {search: '%association%'})
Article.where("created_at > '2020-02-04' AND body NOT LIKE '%model%'")
#+end_src

**** Association Proxies
- Chain together multiple calls to Active Record

#+begin_src ruby
User.first.articles.all
current_user.articles.find(1)
current_user.articles.create(title: 'Private', body: ‘Body here..’)
#+end_src
**** more
#+begin_src ruby
Article.order("published_at DESC")
Article.limit(1) Article.joins(:comments)
Article.includes(:comments)
Article.order("title DESC").limit(2)

#+end_src
**** methods
***** where
Specifies the conditions in which the records are returned as a WHERE SQL
fragment.
#+begin_src ruby
Article.where("title = 'Advanced Active Record'")
#+end_src

***** find
***** findby
***** order
Specifies the order in which the records are returned as an ORDER BY SQL
fragment.

#+begin_src ruby
Article.order("published_at DESC")
#+end_src
***** limit
Specifies the number of records to be returned as a LIMIT SQL fragment.
#+begin_src ruby
Article.limit(1)
#+end_src
***** joins
Specifies associated tables to be joined in as a JOIN SQL fragment.
#+begin_src ruby
Article.joins(:comments)
#+end_src
***** includes
Specifies associated tables to be joined and loaded as Active Record objects in a JOIN SQL fragment.
#+begin_src ruby
Article.includes(:comments)
#+end_src
*** Named Scope
     #+begin_src ruby
     scope :published, -> { where.not(published_at: nil) }
     scope :draft, -> { where(published_at: nil) }
     #+end_src
** Seeds
*** methods
#+begin_src ruby
.create({})
.create({})
.find_or_create_by({})
#+end_src

* Cache
|                      |                                                                          |
|----------------------+--------------------------------------------------------------------------|
| dev:cache            | toggle caching on and off in the development environment(restart server) |
* Tests
|                 |             |
|-----------------+-------------|
| assert_select   | integration |
| assert_response |             |

** RSpec
** Unit

* Traits
- Active Records: Ruby object-relational mapping (ORM) library
- root_path
** REST
** JSON
** Terms
- accepts_nested_attributes_for
- validates_presence_of
- content_tag
- stylesheet_tag bootstrap_url @ application_html.erb
- HTTP status codes: Rack::Atolls::HTTP_STATUS_CODES
* Internationalization

#+begin_src ruby

#+end_src
** methods
- i18n.t()
- i18n.l()
- i18n.locale
- i18n.available_locales
* External Toolings
** Direnv

Guix + Direnv example file
#+begin_src shell
use guix --ad-hoc nss-certs gawk git \
    ruby@3.0 libyaml \
    libsass gcc-toolchain \
    node sqlite
# ===================================================

# * GUIX
# Direnv do not set $GUIX_ENVIRONMENT
export GUIX_ENVIRONMENT="$(echo $LIBRARY_PATH | gawk -F '/lib' '{print $1}')"

# * RUNTIME LIBRARIES
# needed by Rails toolings.
# gcc-toolchain complains if $LD_LIBRARY_PATH is set
# export LD_LIBRARY_PATH="$GUIX_ENVIRONMENT/lib"

# SSL AUTH
# gems need this.
export SSL_CERT_FILE="$GUIX_ENVIRONMENT/etc/ssl/certs/ca-certificates.crt"
# ===================================================

# * GEM
# Install gems locally
export GEM_HOME=$PWD/.gems
export GEM_PATH=$GEM_HOME:$GEM_PATH
export PATH=$GEM_HOME/bin:$PATH
# ===================================================

# * NPM
# Install npm packages locally
export NPM_CONFIG_PREFIX="$PWD/.npm"
export NPM_CONFIG_USERCONFIG="$PWD/.npm/config"
export NPM_CONFIG_CACHE="$PWD/.npm/cache"
export NPM_CONFIG_TMP="$PWD/.npm/tmp"
export NPM_HOME="$NPM_CONFIG_PREFIX"
export NPM_BIN="$NPM_HOME/bin"
export PATH="$NPM_BIN":$PATH
# ===================================================


# * GUIX ANNOTATIONS
# ** FFI:
# install ffi w/: gem install ffi -- --disable-system-libffi

# ** GCC-TOOLCHAIN:
# libsass need it to compile files

# ** SQLITE
#+end_src
** Docker
#+begin_src dockerfile
FROM ruby:2.5.1-alpine

ENV BUNDLER_VERSION=2.0.2

RUN apk add --update --no-cache \
      binutils-gold \
      build-base \
      curl \
      file \
      g++ \
      gcc \
      git \
      less \
      libstdc++ \
      libffi-dev \
      libc-dev \
      linux-headers \
      libxml2-dev \
      libxslt-dev \
      libgcrypt-dev \
      make \
      netcat-openbsd \
      nodejs \
      openssl \
      pkgconfig \
      postgresql-dev \
      python \
      tzdata \
      yarn

RUN gem install bundler -v 2.0.2

WORKDIR /app

COPY Gemfile Gemfile.lock ./

RUN bundle config build.nokogiri --use-system-libraries

RUN bundle check || bundle install

COPY package.json yarn.lock ./

RUN yarn install --check-files

COPY . ./

ENTRYPOINT ["./entrypoints/docker-entrypoint.sh"]
#+end_src
*** docker-compose
#+begin_src yml
version: '3.4'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database
      - redis
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development

  database:
    image: postgres:12.1
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:5.0.7

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - app
      - database
      - redis
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development
    entrypoint: ./entrypoints/sidekiq-entrypoint.sh

volumes:
  gem_cache:
  db_data:
  node_modules:
#+end_src

