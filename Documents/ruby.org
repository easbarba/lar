#+TILE: Ruby - Study Annotations

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#quotes][Quotes]]
- [[#progress][Progress]]
  - [[#books][Books]]
  - [[#sloc][SLOC]]
- [[#features][Features]]
  - [[#rails][rails]]
  - [[#ruby][ruby]]
- [[#concepts][Concepts]]
  - [[#enumerator][Enumerator]]
- [[#skills][Skills]]
- [[#annotations][Annotations]]
:END:
* Quotes
  I do what you dont want to do that you know you've got to do to be where you want to be - Dan Pena

  A receita do fracasso é ficar tentando 1001 coisas diferentes e nunca investir energia real em algo por muito tempo - Jabur

* Progress
** Books
   | Books                                                     | Capitulo                                           | em                                              | tarde                          | revisao |
   |-----------------------------------------------------------+----------------------------------------------------+-------------------------------------------------+--------------------------------+---------|
   | Beginning Rails 6                                         | Getting Something Running                          | Creating the Article Model                      |                                |         |
   | The Well Grounded Rubyist                                 | 10  Collections central: Enumerable and Enumerator | 10.10.3 Fine-grained iteration with enumerators |                                |         |
   | Mastering Ruby Closures                                   |                                                    |                                                 |                                |         |
   | Practical Object-Oriented Design                          | 4 Creating Flexible Interfaces                     | 4.1 Understanding Interfaces                    |                                |         |
   | Design Patterns in Ruby                                   | Observer                                           |                                                 |                                |         |
   | Pragmatic Build Awesome Command-Line Applications in Ruby |                                                    |                                                 |                                |         |
   | Eloquent Ruby                                             | Chapter 8. Embrace Dynamic Typing                  | Shorter Programs, But Not the Way You Think     | Spec: A Plethora of Assertions |         |
   | Ruby On Rails Tutorial                                    | A Toy App                                          | Box 2.2: REpresentational State Transfer (REST) |                                |         |
** SLOC
   | Source Code | folder          | file       | @ |
   |-------------+-----------------+------------+---|
   | ruby        | lib/bundler/cli | install.rb | ] |
   | robe        |                 |            |   |
   | rubocop     |                 |            |   |
   | rails       |                 |            |   |
* Features
** rails
*** models
    | what   | $ | ...         |
    |--------+---+-------------|
    | Models |   | Camel-Cased |
    |        |   |             |

*** cli
**** database
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | database | –d or --database=                                                      | use the database management system of your choice |
     |          | db:create:all                                                          |                                                   |
     |          | db:create                                                              |                                                   |
     |          | dbconsole                                                              |                                                   |
     |          | db:migrate                                                             |                                                   |
     |          | new <name>                                                             |                                                   |
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | rails destroy model Artile                                             |                                                   |
     |          | rails db:rollback                                                      |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |

**** models
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | rails destroy model Artile                                             |                                                   |
     |          | rails db:rollback                                                      |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |
**** env
     |   |                      |   |
     |---+----------------------+---|
     |   | RAILS_ENV=production |   |

** ruby
   | features               | options                                                                                                                                                                                                                                                                                                                                                                                                                 | ...                                                                                                         |
   |------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
   | Quoting - %char{text}  | %q ¦ %Q ¦                                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
   | heredocs               | <<EOL EOL ¦ a = <<EOL.to_i * 10 EOL ¦  <<'EOL' EOL ¦ <<-EOL EOL ¦  <<~EOL EOL ¦ [1,2, <<EO asdasd EO] ¦ a(false, <<EO asd... EO)                                                                                                                                                                                                                                                                                        |                                                                                                             |
   | proc                   |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | do end as param        | (do ... end)  ¦ (do ... end).join(',')                                                                                                                                                                                                                                                                                                                                                                                  |                                                                                                             |
   | array                  | a = [1, ["a", "b"], 4] ¦ arr[1][0] ¦ [1,2][0] ¦ arr.dig(3,0) ¦ value_at, a[2,3] = .. ¦ a[2..3] ¦ slice(), a.[]=(0, "first") ¦ a.[](2) ¦ %w(a b c) ¦ %W({a} b c) ¦ .to_ary ¦ .to_arr ¦ Array() ¦ def string.to_arr ¦ unshift(0) ¦ push(1,2,3) ¦ a << 5 ¦ pop ¦ shift ¦ concat ¦ a.replace([1,2,3]) ¦ flatten ¦ .reverse ¦ .join(" , ") ¦ * ¦ uniq ¦ compact ¦ size ¦ empty ¦ include? ¦ first ¦ last ¦ sample ¦ count(1) |                                                                                                             |
   | date, time             | require ¦ date.today ¦ time.zxcz                                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
   | lambda                 | -> { xx; aa } ¦ lambda do xx;aa; end                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                             |
   | rescue                 | begin ... rescue ... end ¦                                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
   | hash                   | Hash.new ¦ { one: 1, :two => 2 } ¦ Hash[1, "one", 2, "two"] ¦ h["1"] = 1 ¦ h.[]=("New York", "NY") ¦ h.store("New York", "NY") ¦  a.update(b) ¦ a.merge(b) ¦ h.select {k,vk > 1 } ! ¦ h.reject {  k,v  k > 1 } ! ¦ { street: "127th Street", apt: nil }.compact ! ¦  h.invert ¦ h.clear ¦ {...}.replace({...})  ¦ key? ¦ empty? ¦                                                                                       |                                                                                                             |
   | ranges                 | Range.new(1,100) ¦ Range.new(1,100, true) ¦ 1..99(inclusive) ¦ 1...199(exclusive) ¦ d.cover? 2 ¦ d.include? 3                                                                                                                                                                                                                                                                                                           |                                                                                                             |
   | sets                   | Set.new(array) ¦ Set.new(names) {name name.upcase } ¦ s << 5 ¦ s.add 5 ¦ s.delete(1) ¦ intersection¦& ¦ union/+/¦ ¦ difference/- ¦ ^ ¦ s.merge [2] ¦ a.subset? b ¦ a.superset? b ¦ proper_subset?/proper_superset? ¦¦                                                                                                                                                                                                   |                                                                                                             |
   | gsub                   | Returns a copy of str with all occurrences of pattern substituted for the second argument.                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
   | find                   | a.find { ¦n¦ n > 5 } ¦ a.find { ¦n¦ n > 5 } ¦ find_all ¦ select ¦ reject ¦ map                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
   | map                    | a.map ¦ a.map!                                                                                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
   | drop_while             | a.drop_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
   | take_while             | a.take_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
   | find_all               | a.find_all ¦ a.select                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
   | reject                 | a.reject { ¦i¦ i > 4 } ¦ a.reject! { ¦i¦ i > 4 }                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
   | select                 |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | grep                   | a.grep(//o//) ¦ a.grep(String) ¦ a.grep(50..100) ¦                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
   | group_by               | a.group_by { ¦s¦ s.size }                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
   | match                  | //n//.match(s)                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                             |
   | String                 | 'C'.size ¦ each_byte ¦ each_line ¦ each_codepoint ¦ each_char ¦ s.bytes ¦                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
   | min/min_by             | a.min { ¦a,b¦ a.size <=> b.size } ¦  a.min { ¦lang¦ lang.size } ¦ state_hash.min_by { ¦name, abbr¦ name }                                                                                                                                                                                                                                                                                                               |                                                                                                             |
   | max/max_by             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | minmax/minmax_by       | a.minmax ¦ a.minmax_by { ¦lang¦ lang.size }                                                                                                                                                                                                                                                                                                                                                                             |                                                                                                             |
   | reverse_each           | [1,2,3].reverse_each { ¦e¦ puts e * 10 }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
   | with_index             | letters.each.with_index {¦(key,value),i¦ puts i }                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
   | each_index             | names.each.with_index(1) { ¦pres, i¦ p i }                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
   | each_slice             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | each_cons              |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | slice_before           | a.slice_before(\/=/).to_a ¦ (1..10).slice_before { ¦num¦ num % 2 == 0 }.to_a ¦                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
   | slice_after            |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | slice_when             | a.slice_when { ¦i,j¦ i == j }.to_a                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                             |
   | inject/reduce          | [1,2,3,4].inject(:+)                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                             |
   | cycle                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | map                    | names.map { ¦name¦ name.upcase } ¦  x = 5.times.map { Apple.new(rand(100..900)) }                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
   | map!                   |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | symbol-argument blocks | names.map(&:upcase)                                                                                                                                                                                                                                                                                                                                                                                                     |                                                                                                             |
   | <=>                    | Apple#<=> ¦ Apple.sort { ¦a,b¦ a.brand <=> b.brand } ¦                                                                                                                                                                                                                                                                                                                                                                  | implementing a spaceship test method is enough to sort a class, or use a block to sort, or even override it |
   | comparable             | Apple#<=> ¦                                                                                                                                                                                                                                                                                                                                                                                                             | include comparable                                                                                          |
   | clamp                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | between                |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
   | functions              | -> (args) {} ¦ Sum = -> (a, b) { a + b }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
   | <<                     | yielder                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
   |                        | enum_for                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
   |                        | to_enum                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
   | dup                    |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |

* Concepts
** Enumerator
   - enumerators chaining
   - enumerator block based
   - enumerator method attachment (enum_for)
   - enumerator un-overriding of methods in Enumerable
   - Enumerators maintain state
* Skills
  - Ruby
  - Ruby on Rails
  - Ágil, TDD, CI, CD e gestão visual;
  - Sistemas Distribuídos WEB;
  - Clean Code, SOLID e Design Patterns;
  - JavaScript e Front End;
  - PostgreSQL
  - Redis, Memcached ou ElasticSearch;
  - Docker,AWS
  - Familiaridade com infraestrutura, deployment e servidores;
  - Inglês
  - RabbitMQ/ Kafka
  - Firebase
  - Postfix, Nginx
* Annotations
  rbenv global 2.3.0 && rbenv rehash
