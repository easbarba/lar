#+TILE: Ruby - Study Annotations

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progress][Progress]]
  - [[#books][Books]]
  - [[#sloc][SLOC]]
- [[#features][Features]]
  - [[#ruby][Ruby]]
  - [[#rails][Rails]]
- [[#concepts][Concepts]]
  - [[#iterator][Iterator]]
  - [[#methods][Methods]]
  - [[#enumerator][Enumerator]]
- [[#instructions][Instructions]]
  - [[#rbenv][Rbenv]]
:END:
* Progress
** Books
   | Books                                                     | Capitulo                          | em                                              | tarde                          | revisao |   |   |   |   |
   |-----------------------------------------------------------+-----------------------------------+-------------------------------------------------+--------------------------------+---------+---+---+---+---|
   | Design Patterns in Ruby                                   | Strategy                          |                                                 |                                |         |   |   |   |   |
   | Closure in Ruby                                           |                                   |                                                 |                                |         |   |   |   |   |
   | Practical Object-Oriented Design                          | 4 Creating Flexible Interfaces    | 4.1 Understanding Interfaces                    |                                |         |   |   |   |   |
   | The Well Grounded Rubyist                                 | 12  File and I/O operations       |                                                 |                                |         |   |   |   |   |
   | Beginning Rails 6                                         | Getting Something Running         | Creating the Article Model                      |                                |         |   |   |   |   |
   | Pragmatic Build Awesome Command-Line Applications in Ruby |                                   |                                                 |                                |         |   |   |   |   |
   | Eloquent Ruby                                             | Chapter 8. Embrace Dynamic Typing | Shorter Programs, But Not the Way You Think     | Spec: A Plethora of Assertions |         |   |   |   |   |
   | Ruby On Rails Tutorial                                    | A Toy App                         | Box 2.2: REpresentational State Transfer (REST) |                                |         |   |   |   |   |
** SLOC
   | Source Code | folder          | file       | @ |
   |-------------+-----------------+------------+---|
   | ruby        | lib/bundler/cli | install.rb |   |
   | rails       |                 |            |   |
* Features
** Ruby
*** Features
**** dig
**** fetch
**** tap
**** Quoting
     %char{text}
     #+begin_src ruby
     a = %q(a b c d)

     b = %Q(a b c)
     #+end_src
**** heredocs
     #+begin_src ruby
     <<EOL

     EOL

     <<EOL.to_i * 10
     EOL

     <<'EOL'
     EOL

     <<-EOL
     EOL

     <<~EOL
     EOL

     [1,2, <<EO asdasd EO]

     a(false, <<EO asd... EO)
     #+end_src
**** proc
     #+begin_src ruby

     #+end_src
**** do end as param
     #+begin_src ruby
     x = (do  1 + 2 end)
     x = (do 'a' + 'b' end).join(',')
     #+end_src
**** array
     #+begin_src ruby
     a = [1, ["a", "b"], 4]
     arr[1][0]
     [1,2][0]
     arr.dig(3,0) value_at, a[2,3] = ..
     a[2..3]
     a.slice()
     a.[]=(0, "first")
     a.[](2)
     a = %w(a b c)
     a= %W({a} b c)
     x.to_ary
     x.to_arr
     Array()
     def string.to_arr
     end
     a.unshift(0)
     a.push(1,2,3)
     a << 5
     a.pop
     a.shift
     a.concat
     a.replace([1,2,3])
     a.flatten
     a.reverse
     a.join(" , ")
     a = *
     a.uniq
     a.compact
     a.size
     a.empty
     a.include?
     a.first
     a.last
     a.sample
     a.count(1)
     #+end_src
     [[file:path]]
**** date/time
     #+begin_src ruby
     require 'date'
     d = date.today

     require 'time'
     t = time.zxcz
     #+end_src
**** lambda
     #+begin_src ruby
     l = -> { xx; aa }
     l = lambda do
       yield xx
     end
     #+end_src
**** rescue
     #+begin_src ruby
     begin
       puts 'I am before the raise.'
       raise 'An error has occured.'
       puts 'I am after the raise.'
     rescue
       puts 'I am rescued.'
     end
     #+end_src
**** hash
     #+begin_src ruby
     h = Hash.new
     h = { one: 1, :two => 2 }
     h = Hash[1, "one", 2, "two"]
     h["1"] = 1
     h.[]=("New York", "NY")
     h.store("New York", "NY")
     a.update(b)
     a.merge(b)
     h.select {k,vk > 1 } !
     h.reject {  k,v  k > 1 } !
     h.reject! {  k,v  k > 1 }
     h = { street: "127th Street", apt: nil }.compact !
     h = { street: "127th Street", apt: nil }.compact!
     h.invert
     h.clear
     h = {...}.replace({...})
     h.key?
     h.empty?
     #+end_src
**** range
     #+begin_src ruby
     r = Range.new(1,100)
     r = Range.new(1,100, true)
     r =  1..99(inclusive) r = 1...199(exclusive)
     r.cover? 2
     r.include? 3
     #+end_src
**** sets
     #+begin_src ruby
     s = Set.new(array)
     s = Set.new(names) {name name.upcase }
     s << 5
     s.add 5
     s.delete(1)
     s.intersection|&| x
     s.union x
     s + x
     s.difference x
     s - x
     s ^ x
     s.merge [2]
     s.subset? b
     s.superset? b
     s.proper_subset? x
     s.proper_superset? x
     #+end_src
**** gsub
     Returns a copy of str with all occurrences of pattern substituted for the second argument.                                                                                                                                                                                                                                                                                                                              |
**** find
     #+begin_src ruby
     a.find { ¦n¦ n > 5 }
     a.find { ¦n¦ n > 5 }
     a.find_all
     a.select
     a.reject
     a.map
     #+end_src
**** map
     #+begin_src ruby
     a.map { |x| x.uppercase}
     a.map! { |x| x.uppercase}
     #+end_src
**** each_slice
     #+begin_src ruby
     animals.each_slice(2).map do |predator, prey|
     #+end_src
**** lazy
     #+begin_src ruby
     (1..Float::INFINITY).lazy.select {|n| n % 3 == 0 }
     #+end_src
**** with_index
     #+begin_src ruby
     ['a'..'z').map.with_index {|letter,i| [letter, i] } // Output: [["a", 0], ["b", 1], etc.]
     my_enum.take(5).force // actual result rather than lazy enumerator
     #+end_src
**** enum_for
     #+begin_src ruby
     e = names.enum_for(:inject, "Names: ")
     #+end_src
**** more

     | drop_while             | a.drop_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | take_while             | a.take_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | find_all               | a.find_all ¦ a.select                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
     | reject                 | a.reject { ¦i¦ i > 4 } ¦ a.reject! { ¦i¦ i > 4 }                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
     | select                 |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | grep                   | a.grep(//o//) ¦ a.grep(String) ¦ a.grep(50..100) ¦                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
     | group_by               | a.group_by { ¦s¦ s.size }                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | match                  | //n//.match(s)                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                             |
     | String                 | 'C'.size ¦ each_byte ¦ each_line ¦ each_codepoint ¦ each_char ¦ s.bytes ¦                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | min/min_by             | a.min { ¦a,b¦ a.size <=> b.size } ¦  a.min { ¦lang¦ lang.size } ¦ state_hash.min_by { ¦name, abbr¦ name }                                                                                                                                                                                                                                                                                                               |                                                                                                             |
     | max/max_by             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | minmax/minmax_by       | a.minmax ¦ a.minmax_by { ¦lang¦ lang.size }                                                                                                                                                                                                                                                                                                                                                                             |                                                                                                             |
     | reverse_each           | [1,2,3].reverse_each { ¦e¦ puts e * 10 }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     | with_index             | letters.each.with_index {¦(key,value),i¦ puts i }                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
     | each_index             | names.each.with_index(1) { ¦pres, i¦ p i }                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
     | each_slice             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | each_cons              |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | slice_before           | a.slice_before(\/=/).to_a ¦ (1..10).slice_before { ¦num¦ num % 2 == 0 }.to_a ¦                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
     | slice_after            |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | slice_when             | a.slice_when { ¦i,j¦ i == j }.to_a                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                             |
     | inject/reduce          | [1,2,3,4].inject(:+)                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                             |
     | cycle                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | map                    | names.map { ¦name¦ name.upcase } ¦  x = 5.times.map { Apple.new(rand(100..900)) }                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
     | map!                   |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | symbol-argument blocks | names.map(&:upcase)                                                                                                                                                                                                                                                                                                                                                                                                     |                                                                                                             |
     | <=>                    | Apple#<=> ¦ Apple.sort { ¦a,b¦ a.brand <=> b.brand } ¦                                                                                                                                                                                                                                                                                                                                                                  | implementing a spaceship test method is enough to sort a class, or use a block to sort, or even override it |
     | comparable             | Apple#<=> ¦                                                                                                                                                                                                                                                                                                                                                                                                             | include comparable                                                                                          |
     | clamp                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | between                |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     | functions              | -> (args) {} ¦ Sum = -> (a, b) { a + b }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     | <<                     | yielder                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
     |                        | enum_for                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
     |                        | to_enum                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
     | dup                    |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
     ||
** Rails
*** Models
    | what   | $ | ...         |
    |--------+---+-------------|
    | Models |   | Camel-Cased |
    |        |   |             |

*** Cli
**** Database
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | database | –d or --database=                                                      | use the database management system of your choice |
     |          | db:create:all                                                          |                                                   |
     |          | db:create                                                              |                                                   |
     |          | dbconsole                                                              |                                                   |
     |          | db:migrate                                                             |                                                   |
     |          | new <name>                                                             |                                                   |
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | rails destroy model Artile                                             |                                                   |
     |          | rails db:rollback                                                      |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |

**** Models
     | what     | how                                                                    | desc                                              |
     |----------+------------------------------------------------------------------------+---------------------------------------------------|
     | models   | generate model <Name>                                                  |                                                   |
     |          | destroy controller articles                                            |                                                   |
     |          | rails destroy model Artile                                             |                                                   |
     |          | rails db:rollback                                                      |                                                   |
     |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |
**** ENV
     |   |                      |   |
     |---+----------------------+---|
     |   | RAILS_ENV=production |   |

* Concepts
** Iterator
   - is a method
   - it start and finish in the same call
** Methods
*** Methods chaining
    creates a new object at it chains
    #+begin_src ruby
    puts animals.select {¦n¦ n[0] < 'M' }.map(&:upcase).join(", ")
    #+end_src
** Enumerator
   - is an object
   - chaining
   - block based
   - method attachment (enum_for)
   - un-overriding of methods in Enumerable
   - maintain state
   - is an enumerable object
   - can add enumerability to objects
   - can stop and resume collection cycling
* Instructions
** Rbenv
   rbenv global 2.3.0 && rbenv rehash
