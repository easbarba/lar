#+TILE: Infra - Annotations

* Inhaltsverzeichnis
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
  :CONTENTS:
  - [[#fortschritt][Fortschritt]]
    - [[#buch][Buch]]
  - [[#infra-provisioning][Infra Provisioning]]
    - [[#cloudformation][CloudFormation]]
    - [[#pulumi][Pulumi]]
    - [[#terraform][Terraform]]
  - [[#configuration-management][Configuration Management]]
    - [[#terms][terms]]
    - [[#alternatives][alternatives]]
  - [[#containers][Containers]]
    - [[#images][Images]]
  - [[#orchestration][Orchestration]]
    - [[#kubernetes-k8s][Kubernetes (k8s)]]
  - [[#cloud-providers][Cloud Providers]]
    - [[#heroku][Heroku]]
    - [[#azure][Azure]]
    - [[#aws][AWS]]
  - [[#linux][Linux]]
    - [[#progresso][Progresso]]
    - [[#text-manipulation][Text Manipulation]]
    - [[#process-monitoring][Process Monitoring]]
    - [[#df][Df]]
    - [[#strace][strace]]
    - [[#dstrace][dstrace]]
    - [[#multiplexers][Multiplexers]]
    - [[#firewall][Firewall]]
    - [[#lvm][LVM]]
    - [[#swap][Swap]]
    - [[#systemd][SystemD]]
    - [[#disk-space-and-partition][Disk Space and Partition]]
    - [[#sync][Sync]]
    - [[#laptop][Laptop]]
    - [[#steam][Steam]]
    - [[#boot][Boot]]
    - [[#xorg][X.org]]
    - [[#network][Network]]
    - [[#containers-virtualization][Containers, Virtualization]]
    - [[#terminal][Terminal]]
    - [[#home][$HOME]]
    - [[#commands][Commands]]
    - [[#packages][Packages]]
    - [[#udev-rules-udevrulesd][Udev rules (udev/rules.d)]]
  - [[#cicd][CI/CD]]
    - [[#gitlab][Gitlab]]
    - [[#github-actions][Github Actions]]
    - [[#circle-ci][Circle CI]]
    - [[#jenkins][Jenkins]]
  - [[#virtual-machine][Virtual Machine]]
  - [[#web-server][Web Server]]
    - [[#apache][Apache]]
    - [[#nginx][Nginx]]
  - [[#toolings][Toolings]]
    - [[#hcl][Hcl]]
  - [[#version-control][Version Control]]
    - [[#git][Git]]
  - [[#shell][Shell]]
    - [[#gnu-bash][GNU Bash]]
    - [[#bash-resources][Bash resources]]
    - [[#fish][Fish]]
    - [[#zsh][Zsh]]
    - [[#tcsh][TCSH]]
    - [[#posix][Posix]]
  - [[#compilers][Compilers]]
    - [[#gnu-gcc][GNU GCC]]
    - [[#clang][Clang]]
  - [[#editors][Editors]]
    - [[#nano][Nano]]
    - [[#vimneovim][Vim/NeoVim]]
    - [[#emacs][Emacs]]
  - [[#network][Network]]
    - [[#protocols][Protocols]]
    - [[#terms][Terms]]
  - [[#concepts][Concepts]]
  - [[#skills][Skills]]
  - [[#concepts][Concepts]]
  - [[#sites][Sites]]
  - [[#distros][Distros]]
    - [[#apt][APT]]
    - [[#rpm][RPM]]
    - [[#gentoo][Gentoo]]
    - [[#functional][Functional]]
  - [[#yet-to-learn][Yet to learn]]
  - [[#software][Software]]
    - [[#onlines][Onlines]]
    - [[#media][Media]]
    - [[#browser][Browser]]
  :END:

* Fortschritt
** Buch
   | Buch                                         | Capitulo       | em                        | tarde                                              | revisao |
   |----------------------------------------------+----------------+---------------------------+----------------------------------------------------+---------|
   | CompTIA Networkplus Certification All-in-One | Network Models |                           |                                                    |         |
   | Computer Networks                            | INTRODUCTION   | USES OF COMPUTER NETWORKS | Text messaging or texting is tremendously popular. |         |
   | Distributed Systems                          |                |                           |                                                    |         |
   | LPIC-1 101-400                               |                |                           |                                                    |         |
   | Chef                                         |                |                           |                                                    |         |
   | Puppet                                       |                |                           |                                                    |         |
   | CI/CD                                        |                |                           |                                                    |         |
   | Docker/Kubernetes                            |                |                           |                                                    |         |
* Infra Provisioning
** CloudFormation
** Pulumi
** Terraform
*** features
    - IaC
    - declarative
    - mainly provisioning
    - can deploy apps
    - no meant for management
    - more advanced in orchestration
    - better for infrastructure

*** commands
**** destroy
     - destroy resources/infrastructure
     - remove one by one
     - clean up resources
**** apply
     - execute plan
**** plan
     - create an execution plan
**** refresh
     - get from provider current state
*** Core
**** providers
     - IaaS: aws, azure
     - PaaS: Kubernetes
     - SaaS: Fastly
**** configuration
     - user
     - state
     - providers

* Configuration Management
** Traits
   - declarative vs procedural
   - mutable vs immutable
   - agent vs agentless
** Alternatives
*** Ansible
**** defition
     Tool to automate IT tasks
**** traits
     - requires python
     - agentless
     - support os, cloud
     - reusable file configuration for different env
     - yaml
     - configuration
     - mainly configuration
     - deployment
     - install/update software
     - better in configuring
**** cli
     |                           |                           |
     |---------------------------+---------------------------|
     | -m <MODULE> -a <OPT_ARGS> | use module with arguments |
     |                           |                           |

**** misc
     |                   |                     |
     |-------------------+---------------------|
     | --ask-become-pass | run command as sudo |
     | --ask-pass        | still require pass  |
     |                   |                     |

**** invetory lists
     - list of the hosts that you wish to run the automation commands against
     - Ip addres or hostname
     - webservers: groups multiple ip addresses or hosts names
     - databases
     - can dynamic inventories
     - invetory location: /etc/ansible/hosts
**** tower
     - ui dashboard from redhat
     - centrally automate tools
     - across teams
     - configure permissions
     - manage inventory
**** playbooks
***** usage
      - docker container
      - vagrant container
      - cloud instance
      - bare metal
***** tips
****** running ansible command locally
       ansible-playbook --connection=local --inventory 127.0.0.1, playbook.yml
***** good practices
      - naming plays
***** traits
      - hosts: execute tasks
      - execute multiple modules in sequence
      - organized in tasks
      - arguments
      - modules name

**** vars
***** ansible_env.HOME
      get remote home

**** modules
***** Trais
      - lots of modules avaiable: https://docs.ansible.com/ansible/2.8/modules/modules_by_category.html
      - grouped together
      - one action may require multiple module
      - applied in sequences
***** packages
      https://docs.ansible.com/ansible/latest/collections/ansible/builtin/package_module.html
***** Small specific taks
      - create file
      - install nginx
      - start docker container
      - create cloud instance
***** Perform one action
      -
*** Puppet
**** traits
     - ruby config
     - installation needed to manage servers
*** Salt
*** Chef
* Containers
** Fortschritt
   |                                           |   |                   |
   |-------------------------------------------+---+-------------------|
   | Docker Certified Associate DCA Exam Guide | 1 | Docker components |
   |                                           |   |                   |

** Engines
*** Podman
**** commands
     - podman info | grep rootless
**** fixes
***** "sudo -k -n podman version --format " exit status 1: sudo: a password is required
      Add your user to the 'sudoers' file: 'elxbarbosa ALL=(ALL) NOPASSWD: /usr/bin/podman'
***** user namespaces are not enabled in /proc/sys/kernel/unprivileged_userns_clone
      sudo sysctl -w kernel.unprivileged_userns_clone=1
*** Docker
**** Dockerfile
**** Traits
     - cgroups
     - use linux security primitives
     - prevent MITM attack
     - images are immutable
**** Commands
     | command             | description               |
     |---------------------+---------------------------|
     | login               |                           |
     | container ls        |                           |
     | images              |                           |
     | pull <img>          |                           |
     | ps                  |                           |
     | run <img>           |                           |
     | run -d <img>        |                           |
     | run -dp 80:80 <img> |                           |
     | stop <id>           |                           |
     | rm $(docker ps -aq) | remove all images running |
     | run --name <name>   |                           |

* Orchestration
** Kubernetes (k8s)
*** terms

*** alternatives
**** Kind
**** MiniKube
     |                       |                             |
     |-----------------------+-----------------------------|
     | start --driver=<NAME> | select what driver to start |
     |                       |                             |

* Monitoring
** Nagios
** Grafana
** Icinga
** ELK
** Prometheus
* Cloud Providers
** Heroku
** Azure
** AWS
   - vcp
   - subnet
   - ec2

* Linux/Unix
** Internals
*** Process
    kernel space
    user space
** Progresso
*** Buch
    | Buch                                          | capitulo                                   | em                           | @later | revisao |
    |-----------------------------------------------+--------------------------------------------+------------------------------+--------+---------|
    | UNIX and Linux System Administration Handbook |                                            |                              |        |         |
    | LPIC                                          | Part II Exam / Chapter 6 Configuring the X | Configuring Basic X Features |        |         |
    | The Art of Unix programming                   | 2 History                                  |                              |        |         |
    | RHCSA Red Hat Enterprise Linux 8              | Basic File Management                      |                              |        |         |
** Distros
*** APT
**** Debian
***** Apt commands
      | comando               | ... |
      |-----------------------+-----|
      | apt list --upgradable |     |
      | apt upgrade --dry-run |     |

****** debstrap
       - mmdebstrap --variant=minbase --include=init,python3 buster /tmp/chroot-python3 http://apt-proxy-ng:3142/debian
       chroot /tmp/chroot-python3 apt install --no-install-recommends xfce4  ===> 228 MB of additional disk space will be used.

****** update-alternatives
       $ update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
***** apt/preference
      #+begin_src conf
      Package: *
      Pin: release a=unstable
      Pin-Priority: 700

      Package: *
      Pin: release a=testing
      Pin-Priority: 500

      Package: *
      Pin: release a=stable
      Pin-Priority: 400

      Package: *
      Pin: release a=experimental
      Pin-Priority: -10

      #+end_src

***** source.list.
      #+begin_src conf
      # [Unstable]
      deb http://ftp.br.debian.org/debian/ unstable contrib non-free main
      deb-src http://ftp.br.debian.org/debian/ unstable contrib non-free main

      # Testing
      deb http://ftp.br.debian.org/debian testing main contrib non-free
      deb-src http://ftp.br.debian.org/debian testing main contrib non-free

      # Stable
      deb http://ftp.br.debian.org/debian stable main contrib non-free
      deb-src http://ftp.br.debian.org/debian stable main contrib non-free

      # Security updates
      deb http://security.debian.org/ stable/updates main contrib non-free
      deb http://security.debian.org/ testing/updates main contrib non-free
      deb-src http://security.debian.org/ stable/updates main contrib non-free
      deb-src http://security.debian.org/ testing/updates main contrib non-free

      #+end_src
***** Warning
      Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).
**** Ubuntu
*** RPM
**** CentOs
*** Gentoo
**** Emerge errors
***** Not enough ram
      when you see "Killed (program cc1plus)" that means some external process killed cc1plus, it didnt die of its own error.  95% of the time, that's oom-killer. it could in theory be grsec, or even
      just some joker running "killall cc1plus" from another terminal, etc.
*** Functional
**** NixOS
***** progress
      | manual  | @                                   |
      |---------+-------------------------------------|
      | nix     | Chapter 14. A Simple Nix Expression |
      | nixpkgs |                                     |

***** nix-shell
****** usage
       nix-shell -p pack1 pack2 --run 'make install PREFIX=/home/elxbarbosa/.local'

****** builds deps
******* rbenv
******** rbenv faster
	 gcc
******** rbenv ruby
******* st
	freetype glibc pkg-config fontconfig gtk3-x11
**** GNU Guix
***** Sumario
      :PROPERTIES:
      :TOC:      :include all :depth 2 :ignore this
      :END:
      :CONTENTS:
      - [[#progress][Progress]]
      - [[#guix-system][Guix system]]
      - [[#guix-commands][Guix Commands]]
      - [[#guix-read-later][Guix Read Later]]
      - [[#guix-articles][Guix Articles]]
      - [[#guix-tools][Guix tools]]
      - [[#guix-translations][Guix translations]]
      - [[#guix-config-templates][Guix config templates]]
	- [[#bare-bonestmpl][bare-bones.tmpl]]
	- [[#beaglebone-blacktmpl][beaglebone-black.tmpl]]
	- [[#desktoptmpl][desktop.tmpl]]
	- [[#docker-imagetmpl][docker-image.tmpl]]
	- [[#lightweight-desktoptmpl][lightweight-desktop.tmpl]]
	- [[#vm-imagetmpl][vm-image.tmpl]]
      - [[#guix-bug-report][Guix Bug report]]
	- [[#singularity-link][singularity link]]
	- [[#guix-find-funcionlibrary][guix find-funcion/library]]
      - [[#guix-configscm-examples][Guix config.scm examples]]
	- [[#orianj][Orianj]]
	- [[#nikolaev][nikolaev]]
	- [[#mes][Mes]]
	- [[#fusion809][fusion809]]
	- [[#mbakke][mbakke]]
	- [[#wingo][wingo]]
	- [[#yenda][yenda]]
	- [[#alex-kost][Alex Kost]]
	- [[#package-generic][PACKAGE GENERIC]]
      :END:
***** Progress
      | livro       | em           |
      |-------------+--------------|
      | Guix Manual | 5.1 Features |
***** Guix system
      guix system build (dry-run)
      export PATH="/root/.config/guix/current/bin${PATH:+:}$PATH"  [14:06]
***** Guix Commands
      guix package --search-paths  # env variables needed to export
      eval `guix package --search-paths=prefix` # eval env variables needed
***** Guix Read Later
      https://lists.gnu.org/archive/html/guix-devel/2018-10/msg00652.html

      http://guix.info/manual/en/Bootloader-Configuration.html#Bootloader-Configuration

      https://ambrevar.xyz/guix-advance/index.html

      https://guix-hpc.bordeaux.inria.fr/browse

      https://www.gnu.org/software/guix/blog/2018/customize-guixsd-use-stock-ssh-agent-everywhere/

      https://www.gnu.org/software/guix/manual/html_node/Base-Services.html

      https://www.gnu.org/software/guix/manual/html_node/index.html#SEC_Contents

      https://www.gnu.org/software/guix/manual/html_node/Invoking-guix-challenge.html#Invoking-guix-challenge

      https://gitlab.com/nckx/guix/tree/master
***** Guix Articles
      https://www.gnu.org/software/guile/manual/html_node/Keywords.html
      https://www.gnu.org/software/guix/manual/en/html_node/Build-Systems.html
      https://www.gnu.org/software/guix/blog/2018/a-packaging-tutorial-for-guix/
      https://www.gnu.org/software/guix/manual/html_node/Services.html#Services
      https://www.gnu.org/software/guix/manual/html_node/Using-the-Configuration-System.html#Using-the-Configuration-System
      https://www.gnu.org/software/guix/download/
      https://www.gnu.org/software/guix/manual/html_node/System-Installation.html
      https://hal.inria.fr/hal-00824004/en
      https://www.gnu.org/software/guix/packages/
      https://www.gnu.org/software/guix/
      https://www.gnu.org/software/guix/manual/html_node/Package-Management.html
      ftp://alpha.gnu.org/gnu/guix/
      https://gist.github.com/mbakke/c91e0eb3d906efd54c88a70c0e25c390
      https://www.gnu.org/software/guix/manual/html_node/Proceeding-with-the-Installation.html#Proceeding-with-the-Installation
      https://github.com/yenda/guix-config
      https://github.com/alezost/guix-config
      https://notabug.org/thomassgn/guixsd-configuration
      https://gitlab.com/pjotrp/guix-notes
      https://www.gnu.org/software/guix/manual/html_node/GNU-Distribution.html
      https://www.gnu.org/software/guix/manual/html_node/System-Configuration.html#System-Configuration
      https://www.gnu.org/software/guix/manual/html_node/G_002dExpressions.html#G_002dExpressions
      http://bootstrappable.org/
      https://github.com/oriansj/M2-Planet
      https://github.com/oriansj/mescc-tools
      https://github.com/oriansj/stage0
      https://www.gnu.org/software/guix/security/
      https://debbugs.gnu.org/cgi/pkgreport.cgi?pkg=guix#_4_2_5
      https://translationproject.org/html/translators.html
***** Guix tools
      https://guix-hpc.bordeaux.inria.fr/

      https://guix-hpc.bordeaux.inria.fr/browse

      (termbin.com:curl,netcat),wget
***** Guix translations
      https://translationproject.org/domain/guix-manual.html
***** Guix config templates
******** bare-bones.tmpl
	 #+BEGIN_SRC scheme
	 ;; This is an operating system configuration template
	 ;; for a "bare bones" setup, with no X11 display server.

	 (use-modules (gnu))
	 (use-service-modules networking ssh)
	 (use-package-modules screen ssh)

	 (operating-system
	  (host-name "komputilo")
	  (timezone "Europe/Berlin")
	  (locale "en_US.utf8")

	  ;; Assuming /dev/sdX is the target hard disk, and "my-root" is
	  ;; the label of the target root file system.
	  (bootloader (bootloader-configuration
		       (bootloader grub-bootloader)
		       (target "/dev/sdX")))
	  (file-systems (cons (file-system
			       (device "my-root")
			       (title 'label)
			       (mount-point "/")
			       (type "ext4"))
			      %base-file-systems))

	  ;; This is where user accounts are specified.  The "root"
	  ;; account is implicit, and is initially created with the
	  ;; empty password.
	  (users (cons (user-account
			(name "alice")
			(comment "Bob's sister")
			(group "users")

			;; Adding the account to the "wheel" group
			;; makes it a sudoer.  Adding it to "audio"
			;; and "video" allows the user to play sound
			;; and access the webcam.
			(supplementary-groups '("wheel"
						"audio" "video"))
			(home-directory "/home/alice"))
		       %base-user-accounts))

	  ;; Globally-installed packages.
	  (packages (cons* screen openssh %base-packages))

	  ;; Add services to the baseline: a DHCP client and
	  ;; an SSH server.
	  (services (cons* (dhcp-client-service)
			   (service openssh-service-type
				    (openssh-configuration
				     (port-number 2222)))
			   %base-services)))

	 #+END_SRC
******** beaglebone-black.tmpl
	 #+BEGIN_SRC scheme
	 ;; This is an operating system configuration template
	 ;; for a "bare bones" setup on BeagleBone Black board.

	 (use-modules (gnu) (gnu bootloader u-boot))
	 (use-service-modules networking)
	 (use-package-modules bootloaders screen ssh)

	 (operating-system
	  (host-name "komputilo")
	  (timezone "Europe/Berlin")
	  (locale "en_US.utf8")

	  ;; Assuming /dev/mmcblk1 is the eMMC, and "my-root" is
	  ;; the label of the target root file system.
	  (bootloader (bootloader-configuration
		       (bootloader u-boot-beaglebone-black-bootloader)
		       (target "/dev/mmcblk1")))

	  ;; This module is required to mount the SD card.
	  (initrd-modules (cons "omap_hsmmc" %base-initrd-modules))

	  (file-systems (cons (file-system
			       (device "my-root")
			       (title 'label)
			       (mount-point "/")
			       (type "ext4"))
			      %base-file-systems))

	  ;; This is where user accounts are specified.  The "root"
	  ;; account is implicit, and is initially created with the
	  ;; empty password.
	  (users (cons (user-account
			(name "alice")
			(comment "Bob's sister")
			(group "users")

			;; Adding the account to the "wheel" group
			;; makes it a sudoer.  Adding it to "audio"
			;; and "video" allows the user to play sound
			;; and access the webcam.
			(supplementary-groups '("wheel"
						"audio" "video"))
			(home-directory "/home/alice"))
		       %base-user-accounts))

	  ;; Globally-installed packages.
	  (packages (cons* screen openssh %base-packages))

	  (services (cons* (dhcp-client-service)
			   ;; mingetty does not work on serial lines.
			   ;; Use agetty with board-specific serial parameters.
			   (agetty-service
			    (agetty-configuration
			     (extra-options '("-L"))
			     (baud-rate "115200")
			     (term "vt100")
			     (tty "ttyO0")))
			   %base-services)))
	 #+END_SRC
******** desktop.tmpl
	 #+BEGIN_SRC scheme
	 ;; This is an operating system configuration template
	 ;; for a "desktop" setup with GNOME and Xfce where the
	 ;; root partition is encrypted with LUKS.

	 (use-modules (gnu) (gnu system nss))
	 (use-service-modules desktop)
	 (use-package-modules certs gnome)

	 (operating-system
	  (host-name "antelope")
	  (timezone "Europe/Paris")
	  (locale "en_US.utf8")

	  ;; Assuming /dev/sdX is the target hard disk, and "my-root"
	  ;; is the label of the target root file system.
	  (bootloader (bootloader-configuration
		       (bootloader grub-bootloader)
		       (target "/dev/sdX")))

	  ;; Specify a mapped device for the encrypted root partition.
	  ;; The UUID is that returned by 'cryptsetup luksUUID'.
	  (mapped-devices
	   (list (mapped-device
		  (source (uuid "12345678-1234-1234-1234-123456789abc"))
		  (target "my-root")
		  (type luks-device-mapping))))

	  (file-systems (cons (file-system
			       (device "my-root")
			       (mount-point "/")
			       (type "ext4")
			       (dependencies mapped-devices))
			      %base-file-systems))

	  (users (cons (user-account
			(name "bob")
			(comment "Alice's brother")
			(group "users")
			(supplementary-groups '("wheel" "netdev"
						"audio" "video"))
			(home-directory "/home/bob"))
		       %base-user-accounts))

	  ;; This is where we specify system-wide packages.
	  (packages (cons* nss-certs         ;for HTTPS access
			   gvfs              ;for user mounts
			   %base-packages))

	  ;; Add GNOME and/or Xfce---we can choose at the log-in
	  ;; screen with F1.  Use the "desktop" services, which
	  ;; include the X11 log-in service, networking with
	  ;; NetworkManager, and more.
	  (services (cons* (gnome-desktop-service)
			   (xfce-desktop-service)
			   %desktop-services))

	  ;; Allow resolution of '.local' host names with mDNS.
	  (name-service-switch %mdns-host-lookup-nss))

	 #+END_SRC
******** docker-image.tmpl
	 #+BEGIN_SRC scheme
	 ;; This is an operating system configuration template for a "Docker image"
	 ;; setup, so it has barely any services at all.

	 (use-modules (gnu))

	 (operating-system
	  (host-name "komputilo")
	  (timezone "Europe/Berlin")
	  (locale "en_US.utf8")

	  ;; This is where user accounts are specified.  The "root" account is
	  ;; implicit, and is initially created with the empty password.
	  (users (cons (user-account
			(name "alice")
			(comment "Bob's sister")
			(group "users")
			(supplementary-groups '("wheel"
						"audio" "video"))
			(home-directory "/home/alice"))
		       %base-user-accounts))

	  ;; Globally-installed packages.
	  (packages %base-packages)

	  ;; Because the system will run in a Docker container, we may omit many
	  ;; things that would normally be required in an operating system
	  ;; configuration file.  These things include:
	  ;;
	  ;;   * bootloader
	  ;;   * file-systems
	  ;;   * services such as mingetty, udevd, slim, networking, dhcp
	  ;;
	  ;; Either these things are simply not required, or Docker provides
	  ;; similar services for us.

	  ;; This will be ignored.
	  (bootloader (bootloader-configuration
		       (bootloader grub-bootloader)
		       (target "does-not-matter")))
	  ;; This will be ignored, too.
	  (file-systems (list (file-system
			       (device "does-not-matter")
			       (mount-point "/")
			       (type "does-not-matter"))))

	  ;; Guix is all you need!
	  (services (list (guix-service))))

	 #+END_SRC
******** lightweight-desktop.tmpl
	 #+BEGIN_SRC scheme
	 ;; This is an operating system configuration template
	 ;; for a "desktop" setup without full-blown desktop
	 ;; environments.

	 (use-modules (gnu) (gnu system nss))
	 (use-service-modules desktop)
	 (use-package-modules bootloaders certs ratpoison suckless wm)

	 (operating-system
	  (host-name "antelope")
	  (timezone "Europe/Paris")
	  (locale "en_US.utf8")

	  ;; Use the UEFI variant of GRUB with the EFI System
	  ;; Partition mounted on /boot/efi.
	  (bootloader (bootloader-configuration
		       (bootloader grub-efi-bootloader)
		       (target "/boot/efi")))

	  ;; Assume the target root file system is labelled "my-root",
	  ;; and the EFI System Partition has UUID 1234-ABCD.
	  (file-systems (cons* (file-system
				(device "my-root")
				(title 'label)
				(mount-point "/")
				(type "ext4"))
			       (file-system
				(device (uuid "1234-ABCD" 'fat))
				(title 'uuid)
				(mount-point "/boot/efi")
				(type "vfat"))
			       %base-file-systems))

	  (users (cons (user-account
			(name "alice")
			(comment "Bob's sister")
			(group "users")
			(supplementary-groups '("wheel" "netdev"
						"audio" "video"))
			(home-directory "/home/alice"))
		       %base-user-accounts))

	  ;; Add a bunch of window managers; we can choose one at
	  ;; the log-in screen with F1.
	  (packages (cons* ratpoison i3-wm i3status dmenu ;window managers
			   nss-certs                      ;for HTTPS access
			   %base-packages))

	  ;; Use the "desktop" services, which include the X11
	  ;; log-in service, networking with NetworkManager, and more.
	  (services %desktop-services)

	  ;; Allow resolution of '.local' host names with mDNS.
	  (name-service-switch %mdns-host-lookup-nss))

	 #+END_SRC
******** vm-image.tmpl
	 #+BEGIN_SRC scheme
	 ;;; This is an operating system configuration template for a "bare-bones" setup,
	 ;;; suitable for booting in a virtualized environment, including virtual private
	 ;;; servers (VPS).

	 (use-modules (gnu))
	 (use-package-modules bootloaders disk nvi)

	 (define vm-image-motd (plain-file "motd" "
	 This is the GNU system.  Welcome!

	 This instance of GuixSD is a bare-bones template for virtualized environments.

	 You will probably want to do these things first if you booted in a virtual
	 private server (VPS):

	 ,* Set a password for 'root'.
	 ,* Set up networking.
	 ,* Expand the root partition to fill the space available by 0) deleting and
	 recreating the partition with fdisk, 1) reloading the partition table with
	 partprobe, and then 2) resizing the filesystem with resize2fs.\n"))

	 (operating-system
	  (host-name "gnu")
	  (timezone "Etc/UTC")
	  (locale "en_US.utf8")

	  ;; Assuming /dev/sdX is the target hard disk, and "my-root" is
	  ;; the label of the target root file system.
	  (bootloader (bootloader-configuration
		       (bootloader grub-bootloader)
		       (target "/dev/sda")
		       (terminal-outputs '(console))))
	  (file-systems (cons (file-system
			       (device "my-root")
			       (title 'label)
			       (mount-point "/")
			       (type "ext4"))
			      %base-file-systems))

	  ;; This is where user accounts are specified.  The "root"
	  ;; account is implicit, and is initially created with the
	  ;; empty password.
	  (users %base-user-accounts)

	  ;; Globally-installed packages.
	  (packages (cons* nvi fdisk
			   grub   ; mostly so xrefs to its manual work
			   parted ; partprobe
			   %base-packages))

	  (services (modify-services %base-services
				     (login-service-type config =>
							 (login-configuration
							  (inherit config)
							  (motd vm-image-motd))))))

	 #+END_SRC
***** Guix Bug report
******** singularity link
	 <USER> hey, update the singularity link on guix manual to https://www.sylabs.io/docs/  [18:32]
	 <USER> guix / package management / guix pack
	 <USER> as you can see its website change to that one https://singularity.lbl.gov/  [18:33]
******** guix find-funcion/library
	 <USER> would be great if the Emacs guix package have a `guix-find-function` `guix-find-library`...  [19:46]
	 <USER> or even guix have those CLI functions hehe  [19:47]
	 <USER> guix package --find-library=PACAKGE, lol  [19:48]
	 <USER> guix find library   [19:49]

***** Guix config.scm examples
****** Orianj
       #+BEGIN_SRC scheme
       ;; This is an operating system configuration template
       ;; for a "desktop" setup without full-blown desktop
       ;; environments.

       (use-modules
	(gnu)
	(gnu system nss)
	(gnu services xorg)
	)
       (use-service-modules desktop networking)
       (use-package-modules
	admin
	bash
	certs
	compression
	curl
	emacs
	fonts
	gawk
	guile
	gnome
	gnupg
	gnuzilla
	less
	linux
	lxde
	man
	password-utils
	pciutils
	screen
	ssh
	suckless
	texinfo
	tmux
	tor
	version-control
	video
	wget
	wm
	xdisorg
	xfce
	xorg
	zile
	)

       (operating-system
	(host-name "encom")
	(timezone "America/New_York")
	(locale "en_US.UTF-8")

	;; Assuming /dev/sdX is the target hard disk, and "my-root"
	;; is the label of the target root file system.
	(bootloader (bootloader-configuration
		     (bootloader grub-bootloader)
		     (target "/dev/sda")))

	(file-systems
	 (list
	  (file-system
	   (device "/dev/sda1")
	   ;;(title 'label)
	   (mount-point "/")
	   (type "ext4"))

	  ;; List of basic file systems to be mounted.  Note that /proc and /sys are
	  ;; currently mounted by the initrd.

	  ;; The pseudo-terminal file system.  It needs to be mounted so that
	  ;; statfs(2) returns DEVPTS_SUPER_MAGIC like libc's getpt(3) expects (and
	  ;; thus openpty(3) and its users, such as xterm.)
	  (file-system
	   (device "none")
	   (mount-point "/dev/pts")
	   (type "devpts")
	   (check? #f)
	   (needed-for-boot? #f)
	   (create-mount-point? #t)
	   ;; ID of the 'tty' group.
	   (options "gid=996,mode=620"))

	  ;; Shared memory.
	  (file-system
	   (device "tmpfs")
	   (mount-point "/dev/shm")
	   (type "tmpfs")
	   (check? #f)
	   (flags '(no-suid no-dev))
	   (options "size=50%")                         ;TODO: make size configurable
	   (create-mount-point? #t))

	  ;; Read-only store to avoid users or daemons accidentally modifying it.
	  ;; 'guix-daemon' has provisions to remount it read-write in its own name
	  ;; space.
	  (file-system
	   (device "/gnu/store")
	   (mount-point "/gnu/store")
	   (type "none")
	   (check? #f)
	   (flags '(read-only bind-mount)))
	  )
	 )

	(users
	 (list
	  ;; Desired user accounts
	  (user-account
	   (name "oriansj")
	   (comment "Sysadmin")
	   (group "users")
	   (supplementary-groups '("wheel" "netdev" "audio" "video"))
	   (home-directory "/home/oriansj"))

	  ;; Service accounts required
	  (user-account
	   (name "nobody")
	   (uid 65534)
	   (group "nogroup")
	   (shell (file-append shadow "/sbin/nologin"))
	   (home-directory "/nonexistent")
	   (create-home-directory? #f)
	   (system? #t))))

	;; The barebones programs needed to get work done
	(packages
	 (list
	  bash               ; Get a standard shell
	  bash-completion    ; Get proper tab completion
	  bzip2              ; Support bz2
	  coreutils          ; Make bash useful
	  curl               ; Web scripting
	  diffutils          ; For diffing files
	  dmenu              ; Application spawner
	  e2fsprogs          ; EXT filesystem manipulation tools
	  emacs              ; gui text editor
	  eudev              ; Userspace hotplug daemon
	  findutils          ; Be able to leverage find
	  font-dejavu        ; Baseline font
	  gawk               ; Awk is rather handy
	  git                ; Primary version control
	  gnupg              ; Encryption
	  grep               ; For searching for strings
	  guile-2.2          ; XXX: We don't use (canonical-package guile-2.2) here because that would create a collision in the global profile.
	  gzip               ; Support gz
	  htop               ; System performance
	  i3-wm              ; window manager
	  icecat             ; Web Browser
	  inetutils          ; For hostname
	  info-reader        ;the standalone Info reader (no Perl)
	  iproute            ; Core network routing tools
	  isc-dhcp           ; For DHCP
	  iw                 ; New standard tool for configuring wireless devices
	  kbd                ; Keyboard and key map utilities
	  kmod               ; Get 'insmod' & co. from kmod, not module-init-tools, since udev  already depends on it anyway.
	  less               ; No explaination required
	  lzip               ; Support lz
	  man-db             ; Enable manpages
	  net-tools          ; XXX: remove when Inetutils suffices
	  nss-certs          ; for HTTPS access
	  openssh            ; ssh client
	  patch              ; Patch files are useful
	  pciutils           ; For manipulating PCI devices (lspci and setpci)
	  pcmanfm            ; File browser
	  pinentry-gtk2      ; gnupg agent
	  procps             ; /proc process tools (vmstat, ps, w, etc)
	  psmisc             ; More /proc process tools
	  rfkill             ; Even more wireless tools
	  rxvt-unicode       ; Terminal
	  sed                ; Search and replace
	  shadow             ; User management tools (and passwd)
	  sudo               ; The 'sudo' command is already in %SETUID-PROGRAMS, but we also want the other commands and the man pages.
	  tar                ; Packing of files
	  tig                ; git diff viewing
	  tor                ; Anonymity
	  torsocks           ; Wrapping alternate apps with tor
	  tree               ; Handy file directory map generator
	  usbutils           ; For manipulating USB devices (lsusb)
	  util-linux         ; For dmesg
	  vlc                ; Media player
	  wget               ; Downloader
	  which              ; Find full path
	  wireless-tools     ; wireless-tools is deprecated in favor of iw, but it's still what  many people are familiar with, so keep it around.
	  xfce4-terminal     ; Gui Console
	  xz                 ; Support xz
	  zile               ; In the event emacs breaks
	  )
	 )

	;; Essential Minimal services
	(services
	 (list
	  (service slim-service-type)
	  (dhcp-client-service)
	  (login-service)

	  (service console-font-service-type
		   (map (lambda (tty) (cons tty %default-console-font)) '("tty1" "tty2")))

	  (mingetty-service (mingetty-configuration (tty "tty1")))
	  (mingetty-service (mingetty-configuration (tty "tty2")))

	  (service static-networking-service-type
		   (list (static-networking
			  (interface "lo")
			  (ip "127.0.0.1")
			  (provision '(loopback)))))

	  (syslog-service)
	  ;; (service urandom-seed-service-type)
	  (guix-service)
	  ;; (nscd-service)

	  ;; The LVM2 rules are needed as soon as LVM2 or the device-mapper is
	  ;; used, so enable them by default.  The FUSE and ALSA rules are
	  ;; less critical, but handy.
	  (udev-service #:rules (list lvm2 fuse alsa-utils crda))

	  (service special-files-service-type `(("/bin/sh" ,(file-append (canonical-package bash) "/bin/sh"))))
	  (service special-files-service-type `(("/usr/bin/env" ,(file-append (canonical-package coreutils) "/bin/env"))))
	  )
	 )
	)

       #+END_SRC
****** nikolaev
       #+BEGIN_SRC scheme
       (use-modules (gnu)
		    (gnu packages admin)
		    (gnu packages fonts)
		    (gnu packages gl)
		    (gnu packages gnome)
		    (gnu packages gnuzilla)
		    (gnu packages guile)
		    (gnu packages java)
		    (gnu packages linux)
		    (gnu packages ntp)
		    (gnu packages pulseaudio)
		    (gnu packages ruby)
		    (gnu packages screen)
		    (gnu packages slim)
		    (gnu packages suckless)
		    (gnu packages version-control)
		    (gnu packages wget)
		    (gnu packages wicd)
		    (gnu packages wm)
		    (gnu packages xdisorg)
		    (gnu packages xorg)
		    (gnu packages zip)
		    (gnu services)
		    (gnu services avahi)
		    (gnu services dbus)
		    (gnu services desktop)
		    (gnu services xorg)
		    (gnu system nss)
		    (guix gexp)
		    (guix monads)
		    (guix store)
		    (srfi srfi-1)
		    ;; (linux-nonfree)
		    ;; (xorg-ati)
		    ;; (font-hack)
		    )
       ;; (use-service-modules xorg ati avahi dbus desktop networking ssh)
       ;; (use-package-modules admin certs slim xorg)
       (use-service-modules avahi dbus networking ssh)
       (use-package-modules admin certs ntp)

       (define libinput.conf "
       # Use the libinput driver for all event devices
       Section \"InputClass\"
	   Identifier \"libinput keyboard catchall\"
	   MatchIsKeyboard \"on\"
	   MatchDevicePath \"/dev/input/event*\"
	   Driver \"libinput\"
	   Option \"XkbLayout\" \"us,ru\"
	   Option \"XkbOptions\" \"grp_led:scroll,grp:caps_toggle,grp:lwin_compose\"
       EndSection
       ")

       (operating-system
	;; (kernel linux-nonfree)
	;; (firmware (cons* radeon-RS780-firmware-non-free
	;;                  RTL8188CE-firmware-non-free %base-firmware))
	(host-name "camelot")
	(timezone "Europe/Moscow")
	(locale "en_US.UTF-8")

	(bootloader (grub-configuration (device "/dev/sda")))
	(file-systems (cons (file-system
			     (device "root")
			     (title 'label)
			     (mount-point "/")
			     (type "ext4"))
			    %base-file-systems))

	(users (cons (user-account
		      (name "camel")
		      (comment "Camel")
		      (group "users")
		      (supplementary-groups '("wheel" "netdev"
					      "audio" "video"))
		      (home-directory "/home/camel"))
		     %base-user-accounts))

	;; This is where we specify system-wide packages.
	(packages (cons*
		   evince
		   font-dejavu
		   ;; font-hack
		   font-inconsolata
		   font-liberation
		   font-terminus
		   font-ubuntu
		   git
		   ;; guile
		   htop
		   i3-wm
		   icecat
		   icedtea
		   lm-sensors
		   mesa
		   mesa-utils
		   nss-certs          ;for HTTPS access
		   screen
		   slim
		   pavucontrol
		   ;; perf-nonfree
		   ruby
		   rxvt-unicode
		   tcpdump
		   wget
		   wicd
		   wpa-supplicant
		   xf86-input-evdev
		   xf86-video-ati
		   xf86-video-fbdev
		   xf86-video-modesetting
		   xorg-server
		   xsensors
		   unzip
		   %base-packages))

	(services
	 (cons*
	  (lsh-service #:port-number 2222)
	  (gnome-desktop-service)
	  (xfce-desktop-service)
	  (console-keymap-service "ru")
	  (slim-service
	   #:allow-empty-passwords? #f #:auto-login? #f
	   #:startx (xorg-start-command
		     #:configuration-file
		     (xorg-configuration-file
		      #:extra-config (list libinput.conf)
		      #:drivers '("radeon" "vesa")
		      #:resolutions
		      '((1366 768) (1024 768)))))

	  ;; (screen-locker-service slock)
	  ;; (screen-locker-service xlockmore "xlock")
	  ;; ;; The D-Bus clique.
	  ;; (avahi-service)
	  ;; (wicd-service)
	  ;; (udisks-service)
	  ;; (upower-service)
	  ;; (colord-service)
	  ;; (geoclue-service)
	  ;; (polkit-service)
	  ;; (elogind-service)
	  ;; (dbus-service)
	  ;; (ntp-service)
	  ;; %base-services))

	  (remove (lambda (service)
		    (eq? (service-kind service) slim-service-type))
		  %desktop-services)))
	;; Allow resolution of '.local' host names with mDNS.
	(name-service-switch %mdns-host-lookup-nss))

       #+END_SRC
****** Mes
       #+BEGIN_SRC scheme
       ;;; guix.scm -- Guix package definition

       ;;; Mes --- Maxwell Equations of Software
       ;;; Copyright © 2016,2017,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>

       ;;; Also borrowing code from:
       ;;; guile-sdl2 --- FFI bindings for SDL2
       ;;; Copyright © 2015 David Thompson <davet@gnu.org>

       ;;;
       ;;; guix.scm: This file is part of Mes.
       ;;;
       ;;; Mes is free software; you can redistribute it and/or modify it
       ;;; under the terms of the GNU General Public License as published by
       ;;; the Free Software Foundation; either version 3 of the License, or (at
       ;;; your option) any later version.
       ;;;
       ;;; Mes is distributed in the hope that it will be useful, but
       ;;; WITHOUT ANY WARRANTY; without even the implied warranty of
       ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       ;;; GNU General Public License for more details.
       ;;;
       ;;; You should have received a copy of the GNU General Public License
       ;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

       ;;; Commentary:
       ;;
       ;; GNU Guix development package.  To build and install, run:
       ;;
       ;;   guix package -f guix.scm
       ;;
       ;; To build it, but not install it, run:
       ;;
       ;;   guix build -f guix.scm
       ;;
       ;; To use as the basis for a development environment, run:
       ;;
       ;;   guix environment -l guix.scm
       ;;
       ;;; Code:

       (use-modules (srfi srfi-1)
		    (srfi srfi-26)
		    (ice-9 match)
		    (ice-9 popen)
		    (ice-9 rdelim)
		    (gnu packages)
		    (gnu packages base)
		    (gnu packages commencement)
		    (gnu packages cross-base)
		    (gnu packages gcc)
		    (gnu packages guile)
		    (gnu packages mes)
		    (gnu packages package-management)
		    (gnu packages perl)
		    ((guix build utils) #:select (with-directory-excursion))
		    (guix build-system gnu)
		    (guix build-system trivial)
		    (guix gexp)
		    (guix download)
		    (guix git-download)
		    (guix licenses)
		    (guix packages))

       (define %source-dir (dirname (current-filename)))

       (define git-file?
	 (let* ((pipe (with-directory-excursion %source-dir
						(open-pipe* OPEN_READ "git" "ls-files")))
		(files (let loop ((lines '()))
			 (match (read-line pipe)
				((? eof-object?)
				 (reverse lines))
				(line
				 (loop (cons line lines))))))
		(status (close-pipe pipe)))
	   (lambda (file stat)
	     (match (stat:type stat)
		    ('directory #t)
		    ((or 'regular 'symlink)
		     (any (cut string-suffix? <> file) files))
		    (_ #f)))))

       (define-public nyacc-for-mes
	 (package
	  (inherit nyacc)
	  (version "0.80.42")
	  (source (origin
		   (method url-fetch)
		   (uri (string-append "https://gitlab.com/janneke/nyacc"
				       "/-/archive/v" version
				       "/nyacc-" version ".tar.gz"))
		   (sha256
		    (base32
		     "101k3hy4jk5p109k6w4dpx3bjm0g53zwb1yxvvad8khfq00wb8hd"))))))

       (define-public mescc-tools
	 (package
	  (name "mescc-tools")
	  (version "0.4")
	  (source (origin
		   (method url-fetch)
		   (uri (string-append
			 "https://github.com/oriansj/mescc-tools/archive/Release_"
			 version
			 ".tar.gz"))
		   (file-name (string-append name "-" version ".tar.gz"))
		   (sha256
		    (base32
		     "1iwc8xqwzdaqckb4jkkisljrgn8ii4bl7dzk1l2kpv98hsyq9vi1"))))
	  (build-system gnu-build-system)
	  (supported-systems '("i686-linux" "x86_64-linux"))
	  (arguments
	   `(#:make-flags (list (string-append "PREFIX=" (assoc-ref %outputs "out")))
			  #:test-target "test"
			  #:phases (modify-phases %standard-phases
						  (delete 'configure)
						  (add-after 'install 'install-2
							     (lambda _
							       (let ((out (assoc-ref %outputs "out")))
								 (copy-file "bin/blood-elf" (string-append out "/bin/blood-elf"))))))))
	  (synopsis "Tools for the full source bootstrapping process")
	  (description
	   "Mescc-tools is a collection of tools for use in a full source
       bootstrapping process.  Currently consists of the M1 macro assembler and the
       hex2 linker.")
	  (home-page "https://github.com/oriansj/mescc-tools")
	  (license gpl3+)))

       (define-public mes
	 (let ((commit "3e5215b4853fe0b3bfa012d343ce62a79017c04c")
	       (revision "0")
	       (triplet "i686-unknown-linux-gnu")
	       (version "0.15"))
	   (package
	    (name "mes")
	    (version (string-append version "-" revision "." (string-take commit 7)))
	    (source (origin
		     (method git-fetch)
		     (uri (git-reference
			   (url "https://gitlab.com/janneke/mes")
			   (commit commit)))
		     (file-name (string-append name "-" version))
		     (sha256
		      (base32 "1r82lpwmzqp9ih83s79zicvcza89walydn0yhjlkzvvwfiiqqg08"))))
	    (build-system gnu-build-system)
	    (supported-systems '("i686-linux" "x86_64-linux"))
	    (propagated-inputs
	     `(("mescc-tools" ,mescc-tools)
	       ("nyacc" ,nyacc-for-mes)))
	    (native-inputs
	     `(("guile" ,guile-2.2)
	       ,@(if (string-prefix? "x86_64-linux" (or (%current-target-system)
							(%current-system)))
		     ;; Use cross-compiler rather than #:system "i686-linux" to get
		     ;; MesCC 64 bit .go files installed ready for use with Guile.
		     `(("i686-linux-binutils" ,(cross-binutils triplet))
		       ("i686-linux-gcc" ,(cross-gcc triplet)))
		     '())
	       ("perl" ,perl)))               ;build-aux/gitlog-to-changelog
	    (arguments
	     `(#:phases
	       (modify-phases %standard-phases
			      (add-before 'build 'make-git-source-writable
					  (lambda* (#:key outputs #:allow-other-keys)
						   (for-each make-file-writable
							     (find-files "." ".*\\.M1"))))
			      (add-before 'install 'generate-changelog
					  (lambda _
					    (with-output-to-file "ChangeLog"
					      (lambda ()
						(display "Please run
	   build-aux/gitlog-to-changelog --srcdir=<git-checkout> > ChangeLog\n")))
					    #t))
			      (delete 'strip)))) ; binutil's strip b0rkes Mescc/M1/hex2 binaries
	    (synopsis "Scheme interpreter and C compiler for full source bootstrapping")
	    (description
	     "Mes [Maxwell Equations of Software] aims to create full source
       bootstrapping for GuixSD.  It consists of a mutual self-hosting [close to
       Guile-] Scheme interpreter prototype in C and a Nyacc-based C compiler in
       [Guile] Scheme.")
	    (home-page "https://gitlab.com/janneke/mes")
	    (license gpl3+))))

       (define-public mes.git
	 (let ((version "0.15")
	       (revision "0")
	       (commit (read-string (open-pipe "git show HEAD | head -1 | cut -d ' ' -f 2" OPEN_READ))))
	   (package
	    (inherit mes)
	    (name "mes.git")
	    (version (string-append version "-" revision "." (string-take commit 7)))
	    (source (local-file %source-dir #:recursive? #t #:select? git-file?)))))

       ;; Return it here so `guix build/environment/package' can consume it directly.
       mes.git

       #+END_SRC
****** fusion809
       #+BEGIN_SRC scheme
       ;; This is an operating system configuration template
       ;; for a "desktop" setup with GNOME and Xfce where the
       ;; root partition is encrypted with LUKS.

       (use-modules
	(gnu)
	(gnu system nss)
	(gnu packages base)
	(gnu packages shells)
	)
       (use-service-modules desktop)
       (use-package-modules certs gnome)
       (use-package-modules shells)

       (operating-system
	(host-name "fusion809-vbox")
	(timezone "Australia/Brisbane")
	(locale "en_AU.utf8")
	;;  (shell "/run/current-system/profile/bin/zsh")

	;; Assuming /dev/sdX is the target hard disk, and "my-root"
	;; is the label of the target root file system.
	(bootloader (bootloader-configuration
		     (bootloader grub-bootloader)
		     (target "/dev/sda")))

	;; Specify a mapped device for the encrypted root partition.
	;; The UUID is that returned by 'cryptsetup luksUUID'.
	(file-systems (cons (file-system
			     (device "guixsd")
			     (mount-point "/")
			     (type "btrfs"))
			    %base-file-systems))

	(users (cons (user-account
		      (name "fusion809")
		      (comment "Brenton Horne")
		      (group "users")
		      (supplementary-groups '("wheel" "netdev"
					      "audio" "video"))
		      (home-directory "/home/fusion809")
		      (shell "/run/current-system/profile/bin/zsh"))
		     %base-user-accounts))

	;; This is where we specify system-wide packages.
	(packages (cons* nss-certs         ;for HTTPS access
			 zsh               ; for Z shell
			 gvfs              ;for user mounts
			 %base-packages))

	;; Add GNOME and/or Xfce---we can choose at the log-in
	;; screen with F1.  Use the "desktop" services, which
	;; include the X11 log-in service, networking with Wicd,
	;; and more.
	(services (cons* (gnome-desktop-service)
			 %desktop-services))

	(sudoers-file (local-file "/etc/guix/sudoers"))
	;; Allow resolution of '.local' host names with mDNS.
	(name-service-switch %mdns-host-lookup-nss))

       #+END_SRC
****** mbakke
       #+BEGIN_SRC scheme
       (define-module (my packages)
	 #:use-module ((guix licenses) #:prefix license:)
	 #:use-module (gnu packages linux)
	 #:use-module (guix build-system trivial)
	 #:use-module (gnu)
	 #:use-module (guix download)
	 #:use-module (guix git-download)
	 #:use-module (guix packages))

       (define (linux-nonfree-urls version)
	 "Return a list of URLs for Linux-Nonfree VERSION."
	 (list (string-append
		"https://www.kernel.org/pub/linux/kernel/v4.x/"
		"linux-" version ".tar.xz")))

       ;; Remove this and native-inputs below to use the default config from Guix.
       ;; Make sure the kernel minor version matches, though.
       (define kernel-config
	 (string-append (dirname (current-filename)) "/kernel.config"))

       (define-public linux-nonfree
	 (package
	  (inherit linux-libre)
	  (name "linux-nonfree")
	  (version "4.13.11")
	  (source (origin
		   (method url-fetch)
		   (uri (linux-nonfree-urls version))
		   (sha256
		    (base32
		     "1vzl2i72c8iidhdc8a490npsbk7q7iphjqil4i9609disqw75gx4"))))
	  (native-inputs
	   `(("kconfig" ,kernel-config)
	     ,@(alist-delete "kconfig"
			     (package-native-inputs linux-libre))))
	  (synopsis "Mainline Linux kernel, nonfree binary blobs included")
	  (description "Linux is a kernel.")
	  (license license:gpl2)              ;XXX with proprietary firmware
	  (home-page "https://kernel.org")))

       (define (linux-firmware-version) "9d40a17beaf271e6ad47a5e714a296100eef4692")
       (define (linux-firmware-source version)
	 (origin
	  (method git-fetch)
	  (uri (git-reference
		(url (string-append "https://git.kernel.org/pub/scm/linux/kernel"
				    "/git/firmware/linux-firmware.git"))
		(commit version)))
	  (file-name (string-append "linux-firmware-" version "-checkout"))
	  (sha256
	   (base32
	    "099kll2n1zvps5qawnbm6c75khgn81j8ns0widiw0lnwm8s9q6ch"))))

       (define-public iwlwifi-firmware-nonfree
	 (package
	  (name "iwlwifi-firmware-nonfree")
	  (version (linux-firmware-version))
	  (source (linux-firmware-source version))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware/")))
				     (mkdir-p fw-dir)
				     (for-each (lambda (file)
						 (copy-file file
							    (string-append fw-dir (basename file))))
					       (find-files source
							   "iwlwifi-.*\\.ucode$|LICENSE\\.iwlwifi_firmware$"))
				     #t))))
	  (home-page "https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi")
	  (synopsis "Non-free firmware for Intel wifi chips")
	  (description "Non-free iwlwifi firmware")
	  (license (license:non-copyleft
		    "https://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/tree/LICENCE.iwlwifi_firmware?id=HEAD"))))



       (define %sysctl-activation-service
	 (simple-service 'sysctl activation-service-type
			 #~(let ((sysctl
				  (lambda (str)
				    (zero? (apply system*
						  #$(file-append procps
								 "/sbin/sysctl")
						  "-w" (string-tokenize str))))))
			     (and
			      ;; Enable IPv6 privacy extensions.
			      (sysctl "net.ipv6.conf.eth0.use_tempaddr=2")
			      ;; Enable SYN cookie protection.
			      (sysctl "net.ipv4.tcp_syncookies=1")
			      ;; Log Martian packets.
			      (sysctl "net.ipv4.conf.default.log_martians=1")))))

       (define %powertop-service
	 (simple-service 'powertop activation-service-type
			 #~(zero? (system* #$(file-append powertop "/sbin/powertop")
					   "--auto-tune"))))



       (use-modules (gnu)
		    (guix store)               ;for %default-substitute-urls
		    (gnu system nss)
		    (my packages)
		    (srfi srfi-1))
       (use-service-modules admin base dbus desktop mcron networking ssh xorg sddm)
       (use-package-modules admin bootloaders certs disk fonts file emacs
			    libusb linux version-control
			    ssh tls tmux wm xdisorg xorg)

       (operating-system
	(host-name "kirby")
	(timezone "Europe/Oslo")
	(kernel linux-nonfree)
	(kernel-arguments '("modprobe.blacklist=pcspkr,snd_pcsp"))
	;; (locale "en_GB.utf8")
	;; (locale-libcs (list glibc-2.24 (canonical-package glibc)))
	(firmware (append (list
			   iwlwifi-firmware-nonfree)
			  %base-firmware))

	(mapped-devices (list (mapped-device
			       (source "/dev/sda4")
			       (type luks-device-mapping)
			       (target "guixhome"))))

	(bootloader (bootloader-configuration
		     (bootloader grub-efi-bootloader)
		     (target "/boot/efi")))

	(file-systems (cons* (file-system
			      (device "guixroot")
			      (title 'label)
			      (mount-point "/")
			      (needed-for-boot? #t)
			      (type "ext4"))
			     (file-system
			      (device "/dev/mapper/guixhome")
			      (mount-point "/home")
			      (type "ext4"))
			     (file-system
			      (device "/dev/sda2")
			      (mount-point "/boot")
			      (type "vfat"))
			     %base-file-systems))

	(groups (cons (user-group
		       (name "marius"))
		      %base-groups))
	(users (cons (user-account
		      (name "marius")
		      (comment "Meh")
		      (group "marius")
		      (supplementary-groups '("wheel" "netdev" "audio" "video" "kvm" "disk"))
		      (home-directory "/home/marius"))
		     %base-user-accounts))

	(packages (cons*
		   dosfstools
		   nss-certs
		   htop
		   wpa-supplicant
		   acpid
		   i3-wm
		   i3status
		   xscreensaver
		   %base-packages))
	(services (cons*
		   (sddm-service)
		   (screen-locker-service xscreensaver)
		   (service wpa-supplicant-service-type)
		   (service network-manager-service-type)
		   (upower-service)
		   (colord-service)
		   ;;(geoclue-service)
		   (polkit-service)
		   (elogind-service)
		   (dbus-service)
		   (service rottlog-service-type (rottlog-configuration))
		   (service mcron-service-type)
		   %sysctl-activation-service
		   %powertop-service

		   ;; Add udev rules for MTP devices so that non-root users can access
		   ;; them.
		   (simple-service 'mtp udev-service-type (list libmtp))

		   ;; Store the current configuration with the generation.
		   (simple-service 'store-my-config
				   etc-service-type
				   `(("current-config.scm"
				      ,(local-file (assoc-ref
						    (current-source-location)
						    'filename)))))
		   (ntp-service #:servers '("nissen.uio.no"
					    "2.no.pool.ntp.org"
					    "1.no.pool.ntp.org"
					    "0.sv.pool.ntp.org"))
		   (modify-services %base-services
				    (guix-service-type
				     config =>
				     (guix-configuration
				      (inherit config)
				      (substitute-urls
				       (cons* "http://192.168.2.11:8181"
					      "http://192.168.2.5:3000"
					      "http://137.205.52.16"
					      %default-substitute-urls))))))))
       #+END_SRC
****** wingo
       #+BEGIN_SRC scheme
       ;;; GNU Guix --- Functional package management for GNU
       ;;; Copyright © 2012, 2013, 2014, 2015, 2017 Ludovic Courtès <ludo@gnu.org>
       ;;; Copyright © 2013, 2014 Andreas Enge <andreas@enge.fr>
       ;;; Copyright © 2012 Nikita Karetnikov <nikita@karetnikov.org>
       ;;; Copyright © 2014, 2015 Mark H Weaver <mhw@netris.org>
       ;;; Copyright © 2015 Federico Beffa <beffa@fbengineering.ch>
       ;;; Copyright © 2015 Taylan Ulrich Bayırlı/Kammer <taylanbayirli@gmail.com>
       ;;; Copyright © 2015, 2017 Andy Wingo <wingo@igalia.com>
       ;;;
       ;;; This file is part of GNU Guix.
       ;;;
       ;;; GNU Guix is free software; you can redistribute it and/or modify it
       ;;; under the terms of the GNU General Public License as published by
       ;;; the Free Software Foundation; either version 3 of the License, or (at
       ;;; your option) any later version.
       ;;;
       ;;; GNU Guix is distributed in the hope that it will be useful, but
       ;;; WITHOUT ANY WARRANTY; without even the implied warranty of
       ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       ;;; GNU General Public License for more details.
       ;;;
       ;;; You should have received a copy of the GNU General Public License
       ;;; along with GNU Guix.  If not, see <http://www.gnu.org/licenses/>.

       (define-module (gnu packages linux-nonfree)
	 #:use-module ((guix licenses) #:prefix license:)
	 #:use-module (gnu packages linux)
	 #:use-module (gnu packages tls)
	 #:use-module (guix build-system trivial)
	 #:use-module (guix git-download)
	 #:use-module (guix packages)
	 #:use-module (guix download))

       (define (linux-nonfree-urls version)
	 "Return a list of URLs for Linux-Nonfree VERSION."
	 (list (string-append
		"https://www.kernel.org/pub/linux/kernel/v4.x/"
		"linux-" version ".tar.xz")))

       (define-public linux-nonfree
	 (let* ((version "4.14.12"))
	   (package
	    (inherit linux-libre)
	    (name "linux-nonfree")
	    (version version)
	    (source (origin
		     (method url-fetch)
		     (uri (linux-nonfree-urls version))
		     (sha256
		      (base32
		       "1bsn73h3ilf7msyiqm5ny2zdj30b9r7k9sc8i03w3iggh3agf236"))))
	    (synopsis "Mainline Linux kernel, nonfree binary blobs included.")
	    (description "Linux is a kernel.")
	    (license license:gpl2)
	    (home-page "http://kernel.org/"))))

       ;;; Forgive me Stallman for I have sinned.

       (define-public radeon-firmware-non-free
	 (package
	  (name "radeon-firmware-non-free")
	  (version "65b1c68c63f974d72610db38dfae49861117cae2")
	  (source (origin
		   (method git-fetch)
		   (uri (git-reference
			 (url "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git")
			 (commit version)))
		   (sha256
		    (base32
		     "1anr7fblxfcrfrrgq98kzy64yrwygc2wdgi47skdmjxhi3wbrvxz"))))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware/radeon/")))
				     (mkdir-p fw-dir)
				     (for-each (lambda (file)
						 (copy-file file
							    (string-append fw-dir "/"
									   (basename file))))
					       (find-files source
							   (lambda (file stat)
							     (string-contains file "radeon"))))
				     #t))))

	  (home-page "")
	  (synopsis "Non-free firmware for Radeon integrated chips")
	  (description "Non-free firmware for Radeon integrated chips")
	  ;; FIXME: What license?
	  (license (license:non-copyleft "http://git.kernel.org/?p=linux/kernel/git/firmware/linux-firmware.git;a=blob_plain;f=LICENCE.radeon_firmware;hb=HEAD"))))

       (define-public ath10k-firmware-non-free
	 (package
	  (name "ath10k-firmware-non-free")
	  (version "65b1c68c63f974d72610db38dfae49861117cae2")
	  (source (origin
		   (method git-fetch)
		   (uri (git-reference
			 (url "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git")
			 (commit version)))
		   (sha256
		    (base32
		     "1anr7fblxfcrfrrgq98kzy64yrwygc2wdgi47skdmjxhi3wbrvxz"))))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware/")))
				     (mkdir-p fw-dir)
				     (copy-recursively (string-append source "/ath10k")
						       (string-append fw-dir "/ath10k"))
				     #t))))

	  (home-page "")
	  (synopsis "Non-free firmware for ath10k wireless chips")
	  (description "Non-free firmware for ath10k integrated chips")
	  ;; FIXME: What license?
	  (license (license:non-copyleft "http://git.kernel.org/?p=linux/kernel/git/firmware/linux-firmware.git;a=blob_plain;f=LICENCE.radeon_firmware;hb=HEAD"))))

       (define-public linux-firmware-non-free
	 (package
	  (name "linux-firmware-non-free")
	  (version "65b1c68c63f974d72610db38dfae49861117cae2")
	  (source (origin
		   (method git-fetch)
		   (uri (git-reference
			 (url "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git")
			 (commit version)))
		   (sha256
		    (base32
		     "1anr7fblxfcrfrrgq98kzy64yrwygc2wdgi47skdmjxhi3wbrvxz"))))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware/")))
				     (mkdir-p fw-dir)
				     (copy-recursively source fw-dir)
				     #t))))

	  (home-page "")
	  (synopsis "Non-free firmware for Linux")
	  (description "Non-free firmware for Linux")
	  ;; FIXME: What license?
	  (license (license:non-copyleft "http://git.kernel.org/?p=linux/kernel/git/firmware/linux-firmware.git;a=blob_plain;f=LICENCE.radeon_firmware;hb=HEAD"))))

       (define-public perf-nonfree
	 (package
	  (inherit perf)
	  (name "perf-nonfree")
	  (version (package-version linux-nonfree))
	  (source (package-source linux-nonfree))
	  (license (package-license linux-nonfree))))

       (define-public iwlwifi-firmware-nonfree
	 (package
	  (name "iwlwifi-firmware-nonfree")
	  (version "65b1c68c63f974d72610db38dfae49861117cae2")
	  (source (origin
		   (method git-fetch)
		   (uri (git-reference
			 (url "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git")
			 (commit version)))
		   (sha256
		    (base32
		     "1anr7fblxfcrfrrgq98kzy64yrwygc2wdgi47skdmjxhi3wbrvxz"))))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware")))
				     (mkdir-p fw-dir)
				     (for-each (lambda (file)
						 (copy-file file
							    (string-append fw-dir "/"
									   (basename file))))
					       (find-files source "iwlwifi-.*\\.ucode$|LICENCE\\.iwlwifi_firmware$"))
				     #t))))

	  (home-page "https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi")
	  (synopsis "Non-free firmware for Intel wifi chips")
	  (description "Non-free firmware for Intel wifi chips")
	  ;; FIXME: What license?
	  (license (license:non-copyleft "http://git.kernel.org/?p=linux/kernel/git/firmware/linux-firmware.git;a=blob_plain;f=LICENCE.iwlwifi_firmware;hb=HEAD"))))

       (define-public ibt-hw-firmware-nonfree
	 (package
	  (name "ibt-hw-firmware-nonfree")
	  (version "65b1c68c63f974d72610db38dfae49861117cae2")
	  (source (origin
		   (method git-fetch)
		   (uri (git-reference
			 (url "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git")
			 (commit version)))
		   (sha256
		    (base32
		     "1anr7fblxfcrfrrgq98kzy64yrwygc2wdgi47skdmjxhi3wbrvxz"))))
	  (build-system trivial-build-system)
	  (arguments
	   `(#:modules ((guix build utils))
		       #:builder (begin
				   (use-modules (guix build utils))
				   (let ((source (assoc-ref %build-inputs "source"))
					 (fw-dir (string-append %output "/lib/firmware/intel")))
				     (mkdir-p fw-dir)
				     (for-each (lambda (file)
						 (copy-file file
							    (string-append fw-dir "/"
									   (basename file))))
					       (find-files source "ibt-hw-.*\\.bseq$|LICENCE\\.ibt_firmware$"))
				     #t))))

	  (home-page "http://www.intel.com/support/wireless/wlan/sb/CS-016675.htm")
	  (synopsis "Non-free firmware for Intel bluetooth chips")
	  (description "Non-free firmware for Intel bluetooth chips")
	  ;; FIXME: What license?
	  (license (license:non-copyleft "http://git.kernel.org/?p=linux/kernel/git/firmware/linux-firmware.git;a=blob_plain;f=LICENCE.ibt_firmware;hb=HEAD"))))

       #+END_SRC
****** yenda
       #+BEGIN_SRC scheme
       ;; This is an operating system configuration template
       ;; for a "desktop" setup with X11.

       (use-modules (gnu) (gnu system nss) (linux-nonfree))
       (use-service-modules desktop)
       (use-package-modules wicd avahi xorg certs suckless i3)

       (operating-system
	(host-name "project2501")
	(timezone "Europe/Paris")
	(locale "en_US.UTF-8")

	(kernel linux-nonfree)
	(firmware (cons* radeon-RS780-firmware-non-free %base-firmware))

	;; Assuming /dev/sdX is the target hard disk, and "root" is
	;; the label of the target root file system.
	(bootloader (grub-configuration (device "/dev/sda")))
	(file-systems (cons* (file-system
			      (device "root")
			      (title 'label)
			      (mount-point "/")
			      (type "ext4"))
			     (file-system
			      (device "home")
			      (title 'label)
			      (mount-point "/home")
			      (type "ext4"))
			     (file-system
			      (device "/dev/sdb1")
			      (mount-point "/mnt/Monster1")
			      (type "ext4"))
			     %base-file-systems))

	(swap-devices '("/dev/sda2"))
	(groups (cons (user-group (name "nixbld")) %base-groups))
	(users (list (user-account
		      (name "yenda")
		      (comment "Lisp rocks")
		      (group "users")
		      (supplementary-groups '("wheel" "netdev"
					      "audio" "video"
					      "nixbld"))
		      (home-directory "/home/yenda"))))

	;; Add Xfce and Ratpoison; that allows us to choose
	;; sessions using either of these at the log-in screen.
	(packages (cons* i3-wm i3status dmenu		     ;desktop environments
			 xterm wicd avahi  ;useful tools
			 nss-certs         ;for HTTPS access
			 xorg-server xf86-input-evdev
			 xf86-video-fbdev
			 xf86-video-modesetting
			 xf86-video-ati
			 %base-packages))

	;; Use the "desktop" services, which include the X11
	;; log-in service, networking with Wicd, and more.
	(services (cons* (console-keymap-service "fr")
			 %desktop-services))
	;;(services %desktop-services)
	;; Allow resolution of '.local' host names with mDNS.
	(name-service-switch %mdns-host-lookup-nss))

       #+END_SRC
****** Alex Kost
       #+BEGIN_SRC scheme
       (use-modules
	(srfi srfi-1)
	(gnu)
	(gnu system locale)
	(gnu services networking)
	(gnu services dbus)
	(gnu services desktop)
	(gnu services ssh)
	(gnu services lirc)
	(gnu packages base)            ; for 'canonical-package'
	(al places)
	(al files)
	(al utils)
	(al guix packages)
	(al guix services linux)
	(al guix utils))

       (define %user-name "al")
       (define %group-name "users")
       (define %host-name "leviafan")

       (define %extra-linux-modules
	 '("fuse"                      ; for sshfs
	   "nbd"                       ; to mount qcow2 images
	   "sata_nv"                   ; for my HDD to be recognized
	   "snd-seq"                   ; for MIDI-keyboard
	   ))

       (define %redundant-linux-modules
	 '("pcspkr" "snd_pcsp"))

       (define %redundant-packages
	 '("info-reader"
	   "iw"
	   "nano"
	   "net-tools"
	   "wireless-tools"
	   "zile"))

       (define os
	 (operating-system
	  ;; (locale-libcs
	  ;;  (cons (guix-package base glibc-2.23)
	  ;;        %default-locale-libcs))

	  (host-name %host-name)
	  (timezone "Europe/Moscow")

	  (locale "en_US.utf8")
	  (locale-definitions
	   (list (locale-definition (source "en_US")
				    (name   "en_US.utf8"))
		 (locale-definition (source "ru_RU")
				    (name   "ru_RU.utf8"))))

	  (bootloader
	   ;; Since I always use "guix system build --no-bootloader", I don't want
	   ;; to build grub, but guix wants to build it anyway (it is done by
	   ;; 'perform-action' procedure in (guix scripts system) module).  So
	   ;; I simply replace the default 'grub' with my 'empty-package'.
	   (bootloader-configuration
	    (bootloader (bootloader
			 (inherit grub-bootloader)
			 (name 'fake-grub)
			 (package (my-package misc empty-package))))
	    (device "/dev/sda")
	    (theme (grub-theme))))

	  (kernel-arguments
	   (list (string-append "modprobe.blacklist="
				(apply comma-separated
				       %redundant-linux-modules))))

	  (initrd-modules (append %extra-linux-modules %base-initrd-modules))

	  (file-systems
	   (cons* (file-system
		   (device "guix")
		   (title 'label)
		   (type "ext4")
		   (mount-point "/"))
		  (file-system
		   (device "storage")
		   (title 'label)
		   (type "ext4")
		   (mount-point "/mnt/storage")
		   (create-mount-point? #t)
		   (check? #f))
		  (file-system
		   (device "arch")
		   (title 'label)
		   (type "ext4")
		   (mount-point "/mnt/arch")
		   (create-mount-point? #t)
		   (check? #f))
		  (file-system
		   (device "boot")
		   (title 'label)
		   (type "ext4")
		   (mount-point "/mnt/boot")
		   (create-mount-point? #t)
		   (check? #f))
		  (file-system
		   (device "/dev/sr0")
		   (title 'device)
		   (type "iso9660")
		   (mount-point "/mnt/cdrom")
		   (mount? #f)
		   (create-mount-point? #t)
		   (check? #f)
		   (options (comma-separated "ro" "user" "noauto")))
		  (file-system
		   (device "teXet")
		   (title 'label)
		   (type "vfat")
		   (mount-point "/mnt/texet")
		   (mount? #f)
		   (create-mount-point? #t)
		   (check? #f)
		   (options (comma-separated
			     "rw" "user" "noauto" "utf8" "umask=0002"
			     (string-append "gid=" %group-name))))
		  %base-file-systems))

	  (users
	   (cons* (user-account
		   (name %user-name)
		   (uid 1000)
		   (comment "Alex Kost")
		   (home-directory (string-append "/home/" %user-name))
		   (group %group-name)
		   (supplementary-groups
		    '("wheel" "kvm" "audio" "video" "lp" "cdrom")))
		  %base-user-accounts))

	  (groups
	   ;; Use ID 100 for "users" group.  Actually, this wouldn't change ID
	   ;; of an existing group, because the following command (called by
	   ;; 'add-group' in (gnu build activation) module):
	   ;;
	   ;;   groupadd -g 100 --system users
	   ;;
	   ;; fails telling: "group 'users' already exists".
	   (replace (lambda (group)
		      (string=? "users" (user-group-name group)))
		    (user-group (name "users")
				(id 100)
				(system? #t))
		    %base-groups))


	  (sudoers-file (local-file (config-file "etc/sudoers")))
	  (hosts-file (local-file (config-file "etc/hosts")))

	  (issue "Guix is Great!  Ave Guix!!  Ave!!!\n\n")

	  (packages
	   (append (specifications->packages
		    "nss-certs" "iptables")
		   (my-packages
		    (misc suspend))
		   xorg-packages
		   (remove-packages %redundant-packages
				    %base-packages)))

	  (services
	   (list
	    (service virtual-terminal-service-type)
	    (service console-font-service-type
		     (map (lambda (tty)
			    (cons tty %default-console-font))
			  '("tty1" "tty2" "tty3" "tty4" "tty5" "tty6")))

	    (agetty-service (agetty-configuration
			     (extra-options '("-L")) ; no carrier detect
			     (term "vt100")
			     (tty #f)))

	    (mingetty-service (mingetty-configuration
			       (tty "tty1")
			       (auto-login %user-name)))
	    (mingetty-service (mingetty-configuration
			       (tty "tty2")))
	    (mingetty-service (mingetty-configuration
			       (tty "tty3")))
	    (mingetty-service (mingetty-configuration
			       (tty "tty4")))
	    (mingetty-service (mingetty-configuration
			       (tty "tty5")))
	    (mingetty-service (mingetty-configuration
			       (tty "tty6")))

	    (login-service (login-configuration
			    (motd (plain-file "motd" "\
       Welcome to Hyksos!  I mean GuixOS!  I mean GuixSD!\n\n"))))

	    (console-keymap-service (local-file
				     (config-file "kbd/dvorak-alt.map")))
	    (keycodes-from-file-service (local-file
					 (config-file "kbd/scancodes-msmult")))
	    (lirc-service #:device "name=i2c*" #:driver "devinput"
			  #:config-file (local-file
					 (config-file "lirc/devinput.conf")))

	    (tor-service)
	    (dhcp-client-service)
	    (service static-networking-service-type
		     (list ;; (static-networking (interface "enp0s7")
		      ;;                    (ip "192.168.1.32")
		      ;;                    (gateway "192.168.1.1")
		      ;;                    (name-servers '("77.88.8.8")))
		      (static-networking (interface "lo")
					 (ip "127.0.0.1")
					 (provision '(loopback)))))

	    (udisks-service)
	    (polkit-service)
	    (elogind-service)
	    (dbus-service)
	    (lsh-service)
	    (syslog-service (syslog-configuration
			     (config-file (local-file
					   (config-file "syslog/syslog.conf")))))
	    (service urandom-seed-service-type)
	    (guix-service)
	    (nscd-service)
	    (udev-service #:rules (specifications->packages
				   "alsa-utils" "fuse" "lvm2"))
	    (service special-files-service-type
		     ;; Using 'canonical-package' as bash and coreutils
		     ;; canonical packages are already a part of
		     ;; '%base-packages'.
		     `(("/bin/sh"
			,(file-append (canonical-package
				       (guix-package bash bash))
				      "/bin/bash"))
		       ("/bin/bash"
			,(file-append (canonical-package
				       (guix-package bash bash))
				      "/bin/bash"))
		       ("/usr/bin/env"
			,(file-append (canonical-package
				       (guix-package base coreutils))
				      "/bin/env"))))))))
       os

       #+END_SRC
****** PACKAGE GENERIC
       #+BEGIN_SRC scheme
       ;;; mescc-tools.scm -- Guix package definition
       ;;; Copyright © 2017 Jan Nieuwenhuizen <janneke@gnu.org>
       ;;; Copyright 2016 Jeremiah Orians
       ;;; guix.scm: This file is part of mescc-tools.
       ;;;
       ;;; mescc-tools is free software; you can redistribute it and/or modify it
       ;;; under the terms of the GNU General Public License as published by
       ;;; the Free Software Foundation; either version 3 of the License, or (at
       ;;; your option) any later version.
       ;;;
       ;;; mescc-tools is distributed in the hope that it will be useful, but
       ;;; WITHOUT ANY WARRANTY; without even the implied warranty of
       ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
       ;;; GNU General Public License for more details.
       ;;;
       ;;; You should have received a copy of the GNU General Public License
       ;;; along with mescc-tools.  If not, see <http://www.gnu.org/licenses/>.

       ;;; Commentary:
       ;; GNU Guix development package.  To build and install, run:
       ;;   guix package -f guix.scm
       ;;
       ;; To build it, but not install it, run:
       ;;   guix build -f guix.scm
       ;;
       ;; To use as the basis for a development environment, run:
       ;;   guix environment -l guix.scm
       ;;
       ;;; Code:

       (use-modules (ice-9 match)
		    (gnu packages)
		    (gnu packages gcc)
		    (guix build-system gnu)
		    (guix download)
		    (guix licenses)
		    (guix packages))

       (define-public mescc-tools
	 (package
	  (name "mescc-tools")
	  (version "0.5.2")
	  (source (origin
		   (method url-fetch)
		   (uri (string-append "http://git.savannah.nongnu.org/cgit/mescc-tools.git/snapshot/mescc-tools-Release_" version ".tar.gz"))
		   (sha256
		    (base32 "01x7bhmgwyf6mc2g1hcvibhps98nllacqm4f0j5l51b1mbi18pc2"))))
	  (build-system gnu-build-system)
	  (arguments
	   `(#:make-flags (list (string-append "PREFIX=" (assoc-ref %outputs "out")))
			  #:test-target "test"
			  #:phases
			  (modify-phases %standard-phases
					 (delete 'configure))))
	  (synopsis "tools for the full source bootstrapping process")
	  (description
	   "Mescc-tools is a collection of tools for use in full source bootstrapping process.
       Currently consists of the M0 macro assembler and the hex2 linker.")
	  (home-page "https://github.com/oriansj/mescc-tools")
	  (license gpl3+)))

       ;; Return it here so `guix build/environment/package' can consume it directly.
       mescc-tools


       #+END_SRC
** Cli Apps
*** Text Manipulation
**** grep
**** seq
**** awk
**** soft
**** uniq
**** cat
*** Process Monitoring
**** Ps
**** Htop
**** Top
*** Misc
**** who
**** w
**** ps
     ps auxwww | grep sshd: | grep -v grep
**** ss
     ss | grep -i ssh
**** last
     last -a | grep -i still
**** fc-cache
     |                        |                  |
     |------------------------+------------------|
     | fc-list : family style | get font family  |
     | fc-cache -fv           | reload all fonts |
     |                        |                  |
**** man
     - mandb: perform a keyword search on manual: man -k <TERM>
**** uname
     |          |                        |
     |----------+------------------------|
     | uname -a | all system information |
     |          |                        |
**** tty
**** uptime
**** lscpu
**** pwd
     returns working directory
**** lsof
**** sysctl
**** gpg
***** set up
      gpg --full-generate-key
      RSA
      4096 bits
***** list keys
      gpg --list-secret-keys --keyid-format LONG
  ***
**** Df
**** strace
**** dstrace
*** Multiplexers
**** Tmux
**** GNU Screen
*** Getters
**** wget
**** curl
** Firewall
** LVM
   # remount lvm volumes
   # vgscan --mknodes
   # lvchange -a y /dev/VolGroup00/home
   # lvchange -a y /dev/VolGroup00/swap

** Swap
   { Swap File }

   #2 Create Storage File (2GB)
   sudo dd if=/dev/zero of=/mnt/swapfile bs=1MB count=2000

   Step #3: Secure swap file
   sudo chmod 600 /mnt/swapfile

   Step #4: Set up a Linux swap area
   sudo mkswap /mnt/swapfile

   Step #5: Enabling the swap file
   sudo swapon /mnt/swapfile

   Step #6: Update /etc/fstab file
   /mnt/swapfile swap swap defaults 0 0
   UUID=2176ee83-1c3e-4a48-8dd0-4a12a3e7fe7b
   How do I verify swap is activated or not?
   swapon  -s
   or
   free -m
   or
   cat  /proc/swaps

** SystemD
*** SystemD random commands
    #  To prevent the laptop from suspending when the lid is closed:
    set in /etc/systemd/logind.conf: HandleLidSwitch=lock

    # Timezone
    sudo timedatectl list-timezones
    sudo timedatectl set-timezone REGION/CITY
    sudo timedatectl set-ntp true

    # SSD TRIM
    #Tell systemd to reload its unit files, then enable it:
    $ sudo systemctl daemon-reload
    $ sudo systemctl enable fstrim.timer
    $ sudo systemctl list-timers

    #Rtags
    sudo systemctl --user enable rdm.socket
    sudo systemctl --user start rdm.socket

    # boot analyze
    systemd-analyze

    # Crons

    # Syslogs


    # NEtwork Manager
    $ sudo systemctl enable NetworkManager
    $ sudo systemctl start NetworkManager

*** SystemD services
**** fstrim.service
     [Unit]
     Description=Runs fstrim on all mounted devices that support TRIM

     [Service]
     Type=oneshot
     ExecStart=/bin/sh -c '/sbin/fstrim -a'
**** fstrim.timer
     [Unit]
     Description=Run fstrim.service every 12 hours

     [Timer]
     OnUnitInactiveSec=12h
     Persistent=true

     [Install]
     WantedBy=multi-user.target
*** SystemD Read Later
    https://www.maketecheasier.com/make-linux-boot-faster/

** Disk Space and Partition
   # df - report file system disk space usage
   # du - estimate file space usage
   # dd - convert and copy a file

   # Writing iso to usb with DD
   sudo dd bs=4M if=/path/to/distro.iso of=/dev/sdx status=progress oflag=sync

   # How to Change UUID of Partition in Linux Filesystem
   umount /dev/sdb1
   tune2fs /dev/sdb1 -U random /dev/sdb1 # blkid | grep sdb1
   mount /dev/sdb1

   # Erase UsbStick contents
   sudo umount -f /dev/sdb
   sudo parted /dev/sdb mklabel msdos
   sudo parted -a none /dev/sdb mkpart  primary fat32 0 20484
   sudo mkfs.vfat -n "MACHO" /dev/sdb1

   # List devices
   $ lsblk - list block devices
   $ fdisk - manipulate disk partition table

   # Reboot and Poweroff without sudo add to /etc/sudoers:
   # user hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot

** Sync
   https://syncthing.net/

** Laptop
*** https://wiki.archlinux.org/index.php/Touchpad_Synaptics

*** https://www.thinkwiki.org/wiki/Category:T430

*** https://www.thinkpenguin.com/
** Boot
*** Coreboot / Libreboot
    https://www.chucknemeth.com/flash-lenovo-x230-coreboot/
** X.org
*** X11 (xorg.conf.d)
**** 70-synaptics.conf
     #+begin_src conf
     Section "InputClass"
     Identifier "touchpad"
     Driver "synaptics"
     MatchIsTouchpad "on"
     Option "TapButton1" "1"
     Option "TapButton2" "3"
     Option "TapButton3" "2"
     Option "VertEdgeScroll" "on"
     Option "VertTwoFingerScroll" "on"
     Option "HorizEdgeScroll" "on"
     Option "HorizTwoFingerScroll" "on"
     Option "CircularScrolling" "on"
     Option "CircScrollTrigger" "2"
     Option "EmulateTwoFingerMinZ" "40"
     Option "EmulateTwoFingerMinW" "8"
     Option "CoastingSpeed" "0"
     Option "FingerLow" "30"
     Option "FingerHigh" "50"
     Option "MaxTapTime" "125"
     EndSection

     #+end_src
*** Xwrapper.conf
    allowed_users=anybody
*** setxkbmap
    The list of predefined remapping options is in
    less /usr/share/X11/xkb/rules/evdev.lst

    eg: swap left alt and left crtl
    setxkbmap -option  ctrl:swap_lalt_lctlcac

    trace - trace system calls and signals

    man 7 signal

    Use your favorite desktop keyboard layout switcher applet. You can also switch the layout from the terminal, e. g.:
    setxkbmap us
    setxkbmap br

** Network
*** rc.conf
    #+begin_src conf
    moused_enable="YES"
    dbus_enable="YES" # windowns manager
    hald_enable="YES" # windowns manager
    kld_list="i915kms" # intel

    #+end_src
*** Networks Toolings
    |        |   |
    |--------+---|
    | TCP/IP |   |
*** Firewall
**** Firewalld
     https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7
*** KdeConnect
    qdbus org.kde.kdeconnect /modules/kdeconnect/devices//sftp getDirectories
    qdbus org.kde.kdeconnect /modules/kdeconnect/devices//sftp mountAndWait
*** NetworkManager
    nmcli radio
    nmcli device wifi rescan
    nmcli device wifi list
    nmcli device wifi connect SSID-Name wireless-password

** Containers, Virtualization
*** Qemu & KVM
**** Configuring
     sudo groupadd libvirt
     sudo groupadd libvirt-qemu
     sudo groupadd kvm
     sudo adduser "$USER" libvirt
     sudo adduser "$USER" libvirt-qemu
     sudo adduser "$USER" kvm

     Add (kvm) and (kvm-intel) to /etc/modules or temporarily active both kernel modules: # sudo modprobe kvm & # sudo modprobe kvm-intel (https://wiki.ubuntu.com/kvm)

     Uncomment (user) and (group) and set them to (root) (etc/libvirt/qemu.conf)

**** Creating an image : To set up your own guest OS image, you first need to create a blank disc image.
     qemu-img create -f qcow2 distro.img 25G
**** Uefi Support with ovmf
     cp /usr/share/OVMF/OVMF_VARS.fd OVMF_VARS.fd
**** Boot Qemu with UEFI support
     qemu-system-x86_64 -m 4G -vga qxl \
     -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
     -drive if=pflash,format=raw,file="$HOME"/Temps/distros/OVMF_VARS.fd \
     -enable-kvm \
     -hda "$HOME"/Temps/distros/distro.img  \
     -cdrom "$HOME"/Temps/distros/CentOS-7-x86_64-Minimal-1804.iso &
**** System76 way
     cp /usr/share/OVMF/OVMF_VARS.fd example_OVMF_VARS.fd
     qemu-img create -f qcow2 example.qcow2 16G
     qemu-system-x86_64 -m 4G -enable-kvm -vga qxl \
     -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
     -drive if=pflash,format=raw,file=example_OVMF_VARS.fd \
     -drive if=virtio,file=example.qcow2 \
     -cdrom xenial-desktop-amd64.iso
**** libvirt: The virtualization API
**** virt-manager: Desktop tool for managing virtual machines via libvirt
**** QEMU Manual & articles
     https://www.qemu.org/
     https://qemu.weilnetz.de/doc/qemu-doc.html

     https://wiki.archlinux.org/index.php/QEMU
     https://en.wikibooks.org/wiki/QEMU/Images
     https://ycnrg.org/vga-passthrough-with-ovmf-vfio/

**** Legacy
     KVM:-enable-kvm
     qemu-system-x86_64 -m 1G -hda temp.img -cdrom guixsd-install-0.14.0.x86_64-linux.iso -boot d

**** Setting up
     # sudo groupadd libvirt
     # sudo groupadd libvirt-qemu
     # sudo groupadd kvm
     # sudo adduser "$USER" libvirt
     # sudo adduser "$USER" libvirt-qemu
     # sudo adduser "$USER" kvm
     # add (kvm) and (kvm-intel) to /etc/modules or temporarily active both kernel modules: # sudo modprobe kvm & # sudo modprobe kvm-intel (https://wiki.ubuntu.com/kvm)
     # Uncomment (user) and (group) and set them to (root) (etc/libvirt/qemu.conf)

**** Windows
     <OriansJ> USER: the big problem we had was with fully encrypted /boot partitions is qemu with hardware acceleration tended to have a hashing
     bug, preventing the images from booting.  [20:32]
     <USER> hum...
     <OriansJ> But if /boot isn't encrypted but / is; the linux luks module works fine enough for proper boot
     <OriansJ> and unhardware accelerated qemu on Windows is very very painful for GUI work
     <OriansJ> a shell only image is a little slow but not painfully so but gnome is like watching paint dry  [20:34]
*** Wine
**** Winetricks nightbuild
     wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
     chmod +x winetricks
     sudo mv winetricks /usr/local/bin
     winetricks --self-update # update
**** Wine prefix 64 bits
     env WINEPREFIX=/data/wine/PREFIXNAME
**** Wine scripts
***** 64-steam-wine.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Description: Opens Steam of the given wineprefix

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "Name of the Wine prefix:"

      # Keyborad input to string
      read -r input_variable

      echo "disabling winedebug"
      export WINEDEBUG=-all

      echo "overriding dxvk variables on winecfg"
      export WINEDLLOVERRIDES=d3d11,dxgi=n # default
      # export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

      echo " exporting Vulkan Variables"
      # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
      # export DXVK_LOG_LEVEL=none
      # export DXVK_DEBUG_LAYERS=0  # Debug
      export DXVK_HUD=fps
      # devinfo,fps,frametimes,memory

      echo "running 64bits Wineprefix Steam"
      WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine "$HOME"/wine/prefixes/"$input_variable"/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox
      #! /usr/bin/env bash

      # Description: Opens Steam of the given wineprefix

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "Name of the Wine prefix:"

      # Keyborad input to string
      read -r input_variable

      echo "disabling winedebug"
      export WINEDEBUG=-all

      echo "overriding dxvk variables on winecfg"
      export WINEDLLOVERRIDES=d3d11,dxgi=n # default
      # export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

      echo " exporting Vulkan Variables"
      # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
      # export DXVK_LOG_LEVEL=none
      # export DXVK_DEBUG_LAYERS=0  # Debug
      export DXVK_HUD=fps
      # devinfo,fps,frametimes,memory

      echo "running 64bits Wineprefix Steam"
      WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine "$HOME"/wine/prefixes/"$input_variable"/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox


      #+END_SRC
***** dark_souls_wine.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "exporting wine variables"
      # export WINEDLLOVERRIDES=dinput8,xinput1_3
      # export WINEDEBUG=-all

      echo "running 32bits Wineprefix Steam"
      WINEARCH=win32 WINEPREFIX="$HOME"/wine/prefixes/dark/ wine "$HOME"/wine/prefixes/dark/drive_c/Program\ Files/Steam/Steam.exe
      # WINEARCH=win32 WINEPREFIX="$HOME"/wine/prefixes/dark/ wine  "$HOME"/wine/prefixes/dark/drive_c/Program\ Files/Steam/steamapps/common/Dark\ Souls\ Prepare\ to\ Die\ Edition/DATA/dsmfixgui.exe

      #+END_SRC
***** dark_souls_wineprefix.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

      # Description: Create wineprefix with given name and get dxvk lastest dll and dependencies

      # What this script does:

      # - Create wineprefix with given name
      # - Install vulkanskd and steam (winetricks)
      # - Download latest Dxvk dll from Haag site!
      # - Uses setup_dxvk.sh to symlink both 64/32 dll
      # - add Wine-Vulkan regedit keys
      # - creates winevulkan.json file on C:\windows

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      # Check if ~/wine/prefixes/ folder exist
      if [ ! -d "$HOME/wine/prefixes/" ]; then
	  mkdir -p "$HOME"/wine/prefixes/
      fi

      # Where Wine prefixes using DXVK are to be set up
      wine_prefix_folder="$HOME/wine/prefixes"

      # Where scripts are located
      SCRIPTS="$HOME/.config/scripts"

      echo "Disable Wine debugging"
      # export WINEDEBUG=-all

      echo "Create Wine prefix, press Ok"
      WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/dark/ winecfg

      echo "Install Winetricks packages"
      WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/dark/ winetricks steam corefonts d3dx9 tahoma vcrun2008 vlc dotnet46

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      #+END_SRC
***** dxvk_get_latest_dll.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Dependecies: GNU Coreutils, GNU Bash

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      under="______________________"

      echo $under
      echo "Get dxvk 32/64 lastest dll binaries into ~/wine/dxvk/"
      echo $under

      echo "Making dxvk folder and its sub folders"
      if [ ! -d "$HOME/wine/dxvk/" ]; then
	  mkdir -vp "$HOME"/wine/dxvk/{win32,win64}
      fi

      echo "Assigning dxvk dlls folder"
      dxvk_folder="$HOME/wine/dxvk"

      echo "If there are old dxvk dlls remove those"
      if [ ! -d "$dxvk_folder/wine32-old" ]; then
	  rm -rf "$dxvk_folder"/win32-old/ || exit
	  rm -rf "$dxvk_folder"/win64-old  || exit
      fi

      echo "Backing up existent folders"
      if [ ! -d "$dxvk_folder/wine32" ]; then
	  mv "$dxvk_folder"/win32 "$dxvk_folder"/win32-old || exit
	  mv "$dxvk_folder"/win64 "$dxvk_folder"/win64-old || exit
      fi

      echo $under
      echo "Downloading Dxvk Dlls"
      echo $under

      if [ ! -d "$dxvk_folder/win32" ]; then
	  echo "Making win32 folder"
	  mkdir -p "$dxvk_folder"/win32

	  echo "Downloading dxvk 32 dlls from source page"
	  wget https://haagch.frickel.club/files/dxvk/latest/32/bin/d3d11.dll -O "$dxvk_folder"/win32/d3d11.dll
	  wget https://haagch.frickel.club/files/dxvk/latest/32/bin/dxgi.dll -O "$dxvk_folder"/win32/dxgi.dll
	  wget https://haagch.frickel.club/files/dxvk/latest/32/bin/setup_dxvk.sh -O "$dxvk_folder"/win32/setup_dxvk.sh
      fi

      if [ ! -d "$dxvk_folder/win64" ]; then
	  echo "create win64 folder"
	  mkdir -p "$dxvk_folder"/win64

	  echo "Downloading dxvk 64 dlls from source page"
	  wget https://haagch.frickel.club/files/dxvk/latest/64/bin/d3d11.dll -O "$dxvk_folder"/win64/d3d11.dll
	  wget https://haagch.frickel.club/files/dxvk/latest/64/bin/dxgi.dll -O "$dxvk_folder"/win64/dxgi.dll
	  wget https://haagch.frickel.club/files/dxvk/latest/64/bin/setup_dxvk.sh -O "$dxvk_folder"/win64/setup_dxvk.sh
      fi

      echo $under
      echo "Done, all dxvk dlls present and ready"
      echo $under

      #+END_SRC
***** dxvk_one_script.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      echo "Dependecies: wine staging (debian/ubuntu), winetricks (github), GNU Coreutils, GNU Bash"

      echo "Description: Create wineprefix with given name and get dxvk lastest dll and dependencies"

      # What this script does:

      # - Create wineprefix with given name
      # - Install vulkanskd and steam (winetricks)
      # - Download latest Dxvk dll from Haag site!
      # - Uses setup_dxvk.sh to symlink both 64/32 dll
      # - add Wine-Vulkan regedit keys
      # - creates winevulkan.json file on C:\windows


      echo "Killing wineserver"
      wineserver -k

      echo "Making ~/wine/prefixes/ if not present"
      if [ ! -d "$HOME/wine/prefixes/" ]; then
	  mkdir -p "$HOME"/wine/prefixes/
      fi

      echo "Assigning Wine prefixes folder"
      wine_prefix_folder="$HOME/wine/prefixes"

      echo "If not present making script folder"
      if [ ! -d "$HOME/.config/scripts/" ]; then
	  mkdir -p "$HOME/.config/scripts"
      else
	  echo "Script folder exist"
      fi

      echo "Location of scripts and files"
      SCRIPTS="$HOME/.config/scripts"

      echo "Please name your Wine prefix:"

      # keyboard input to string
      read -r input_variable

      echo "Disable Wine debugging"
      export WINEDEBUG=-all

      echo "Create Wine prefix, press Ok"
      WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

      echo "Install Winetricks packages"
      WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vulkansdk steam

      # Checks if dxvk_get_latest_dll.sh exist and runs it
      if [ ! -e "$SCRIPTS/dxvk_get_latest_dll.sh" ]; then
	  echo "Downloading latest Dxvk dll"
	  wget https://gitlab.com/USER/dots/raw/master/config/.config/scripts/dxvk_get_latest_dll.sh
	  bash "$SCRIPTS"/dxvk_get_latest_dll.sh
      else
	  bash  "$SCRIPTS"/dxvk_get_latest_dll.sh
      fi

      echo "Copy Dxvk's dll into prefix"
      WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ bash "$HOME"/wine/dxvk/win32/setup_dxvk.sh
      WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ bash "$HOME"/wine/dxvk/win64/setup_dxvk.sh

      echo "If vulkan.reg is not present download it"
      if [ ! -e "$SCRIPTS/vulkan.reg" ]; then
	  wget https://gitlab.com/USER/dots/raw/master/config/.config/scripts/vulkan.reg
      fi

      echo "Creates regedit /kronos/Driver keys"
      WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine regedit /S "$SCRIPTS"/vulkan.reg

      echo "Creates winevulkan.json file under C:\\Windows"
      create_json_file() {
	  cat > "$wine_prefix_folder"/"$input_variable"/drive_c/windows/winevulkan.json <<EOF
      {
	"file_format_version": "1.0.0",
	"ICD": {
	  "library_path": "c:\\\\windows\\\\system32\\\\winevulkan.dll",
	  "api_version": "1.0.51"
	}
      }
      EOF
      }

      create_json_file

      #+END_SRC
***** wineprefix
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash
      ,**
      # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

      # Description: Create wineprefix with given name and get dxvk lastest dll and dependencies

      # What this script does:

      # - Create wineprefix with given name
      # - Install vulkanskd and steam (winetricks)
      # - Download latest Dxvk dll from Haag site!
      # - Uses setup_dxvk.sh to symlink both 64/32 dll
      # - add Wine-Vulkan regedit keys
      # - creates winevulkan.json file on C:\windows

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      # Check if ~/wine/prefixes/ folder exist
      if [ ! -d "$HOME/wine/prefixes/" ]; then
	  mkdir -p "$HOME"/wine/prefixes/
      fi

      # Where Wine prefixes using DXVK are to be set up
      wine_prefix_folder="$HOME/wine/prefixes"

      # Where scripts are located
      SCRIPTS="$HOME/.config/scripts"

      echo "Please name your Wine prefix:"

      # keyboard input to string
      read -r input_variable

      echo "Disable Wine debugging"
      # export WINEDEBUG=-all

      echo "Create Wine prefix, press Ok"
      WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

      echo "Install Winetricks packages"
      WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks steam

      #+END_SRC
***** wine_cfg.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Description: Open winecfg of given wineprefix

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "Name of the Wine prefix:"

      # Keyboard input to string
      read -r input_variable

      echo "running Winecfg"
      WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ winecfg

      #+END_SRC
***** wine_regedit.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Description: Open regedit of given wineprefix

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "Name of the Wine prefix:"

      # Keyboard input to string
      read -r input_variable

      echo "running Winecfg"
      WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine regedit

      #+END_SRC
***** wine_steam
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # Description: Opens Steam of the given wineprefix

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "disabling winedebug"
      export WINEDEBUG=-all

      echo "overriding dxvk variables on winecfg"
      # export WINEDLLOVERRIDES=d3d11,dxgi=n # default
      export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

      echo " exporting Vulkan Variables"
      # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
      # export DXVK_LOG_LEVEL=none
      # export DXVK_DEBUG_LAYERS=0  # Debug
      export DXVK_HUD=fps
      # devinfo,fps,frametimes,memory

      echo "running 64bits Wineprefix Steam"
      WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/dx/ wine "$HOME"/wine/prefixes/dx/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox

      #+END_SRC
***** wine_vulkan_cube.sh
      #+BEGIN_SRC shell-script
      #! /usr/bin/env bash

      # kill wineserver before installation to make sure correct wine version is used
      wineserver -k

      echo "Name of the Wine prefix:"

      # Keyborad input to string
      read -r input_variable

      echo "running Winecfg"
      WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine cube

      #+END_SRC
***** vulkan.reg
      #+BEGIN_SRC conf
      REGEDIT4

      [HKEY_LOCAL_MACHINE\SOFTWARE\Khronos\Vulkan\Drivers]
      "C:\\Windows\\winevulkan.json"=dword:00000000

      [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Khronos\Vulkan\Drivers]
      "C:\\Windows\\winevulkan.json"=dword:00000000


      #+END_SRC
**** Wine prefix 32bits
     env WINEARCH=win32 WINEPREFIX=/data/wine/PREFIXNAME
**** Winetricks and windows settings
     env WINEPREFIX=/data/wine/prefix/PREFIXNAME winetricks videomemorysize=4096
**** Winetricks basic packages
     winetricks tahome corefonts
**** Winetricks DX packages
     winetricks d3dx9
**** Winetricks misc packages
     winetricks vcrun2008

**** Misc Software
***** Fred's ImageMagick Scripts
      http://www.fmwconcepts.com/imagemagick/index.php

***** Style and Grammar Checker for 25+ Languages
      https://github.com/languagetool-org/languagetool

***** next-browser/next: Next - Be Productive.
      https://github.com/nEXT-Browser/nEXT

***** Misc Software read later
      https://wiki.archlinux.org/index.php/List_of_applications

      https://jvns.ca/blog/2016/11/21/things-to-learn-about-linux/


      https://github.com/alebcay/awesome-shell

      https://github.com/herrbischoff/awesome-command-line-apps

      Sensible Bash · Small & opinionated selection of basic Bash configurations for a better command-line user experience
      http://mrzool.cc/writing/sensible-bash/

      https://www.commandlinefu.com/commands/browse/sort-by-votes

*** Virtualbox
    VirtualBox kernel modules do not match the version of VirtualBox. Executing /sbin/vboxconfig ...
    Solution: vboxreload

    --------------------
    From my experience Guest Additions that are bundled with VirtualBox work better. Here are steps to install them:

    Install kernel headers (installer needs them to build the kernel module):

    $ sudo apt-get update
    $ sudo apt-get install build-essential linux-headers-$(uname -r)

    Insert the virtual CD using appropriate menu item in VirtualBox menu:

    Menu screenshot

    Mount the CD:

    $ sudo mount /dev/cdrom /media/cdrom

    cd into the mounted directory:

    $ cd /media/cdrom

    Run the installer:

    $ sudo ./VBoxLinuxAdditions.run

    Or alternatively, if you really want to install from repository, try to find the package by name

    $ sudo apt-cache pkgnames | grep virtualbox

    virtualbox-ose-guest-utils is available for me, so is virtualbox-guest-utils (they should be identical since VirtualBox 4.0).

    ------------------
** Terminal
   http://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html
*** Coreutils:
    https://git.savannah.gnu.org/cgit/coreutils.git
**** MAKE
     after populating /usr/loca cal for ldconfig: ldconfig - configure dynamic linker run-time bindings
     ldconfig /usr/local/lib
**** Grep
***** Grep read later
      https://www.cyberciti.biz/faq/grep-regular-expressions/

** XDG
*** https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
*** Applications Desktop Files
    /usr/share/applications/
    xdg-settings set default-web-browser google-chrome.desktop
** Commands
   | command        |                                  |
   |----------------+----------------------------------|
   | lsb_release -a | distro info                      |
   | ldd            | print shared object dependencies |
   | ldconfig       |                                  |
** Online
   https://pkgs.org/
** Udev rules
*** udev/rules.d
*** brightnessctl
**** backlight.rules
     get backlight device: brightnessctl -l
     add user to VIDEO: usermod -aG video $USER
     #+begin_src conf
     ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<intel_backlight>", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
     ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<intel_backlight>", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
     #+end_src

* System
** Progresso
*** Buch
    | Buch                    | capitulo | em | @later | revisao |
    |-------------------------+----------+----+--------+---------|
    | Modern Operating System | Intro    |    |        |         |
* Pipeline CI/CD
** Gitlab
** Github Actions
** Circle CI
** Jenkins
* Virtual Machine
* Web Server
** Apache
** Nginx
* Toolings
** Hcl
* Version Control
** [[https://git-scm.com/][Git]]
*** Git Resources
    https://git-scm.com/docs

    https://medium.com/sweetmeat/how-to-keep-a-downstream-git-repository-current-with-upstream-repository-changes-10b76fad6d97

    http://gitready.com/intermediate/2009/02/13/list-remote-branches.html
*** Git Commands
    | git command                              | description                                                           |
    |------------------------------------------+-----------------------------------------------------------------------|
    | log --pretty=oneline                     |                                                                       |
    | push                                     | Update remote refs along with associated objects                      |
    | commit                                   | Record changes to the repository, call editor                         |
    | add                                      | Add file contents to the index                                        |
    | remote                                   | Manage set of tracked repositories                                    |
    | revert                                   | Revert some existing commits                                          |
    | reset                                    | Reset current HEAD to the specified state                             |
    | commit -m "detailed commit"              |                                                                       |
    | push origin master                       |                                                                       |
    | log --statgit log --stat                 | abbreviated stats for each commit                                     |
    | diff --git $FILE                         |                                                                       |
    | log -p -2                                | difference (the patch output) introduced in each commit               |
    | log                                      | log in this project                                                   |
    | mv                                       | rename                                                                |
    | commit -a -m "commit message"            | commit all files and commit message                                   |
    | log --pretty=format:"%h - %an, %ar : %s" |                                                                       |
    | log --pretty=format:"%h %s" --graph      | adds a nice little ASCII graph                                        |
    | log --since=2.weeks                      | time-limiting                                                         |
    | log --author=user                        | filter on a specific author                                           |
    | log --grep                               | search for keywords in the commit messages                            |
    | git log -S function_name                 | last commit that added or removed a reference to a  specific function |
    | --since, --after                         | Limit the commits to those made after the specified date.             |
    | --until, --before                        | Limit the commits to those made before the specified date.            |
    | --no-merges                              | prevent the display of merge commits cluttering up your log history   |
    | --force-with-lease                       |                                                                       |

    | GIT eg                                                                                                              |
    |-----------------------------------------------------------------------------------------------------------------------|
    | git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \   --before="2008-11-01" --no-merges -- t/ |
    |                                                                                                                       |

    | add    | Add file contents to the index.                         |
    | bisect | Find by binary search the change that introduced a bug. |
    | branch | List, create, or delete branches.                       |
    | checkout | Switch branches or restore working tree files. |

    |          |                                                |
    cherry  Find commits yet to be applied to upstream (branch on the remote).
    cherry-pick  Apply the changes introduced by some existing commits.
    clone  Clone a repository into a new directory.
    commit  Record changes to the repository.
    config  Get and set repository or global options.
    diff  Show changes between commits, commits and working tree, and so on.
    fetch  Download objects and refs from another repository.
    grep  Print lines matching a pattern.
    help  Display help information.
    log  Show commit logs.
    merge  Join two or more development histories together.
    mv  Move or rename a file, directory, or symlink.
    pull  Fetch from, or integrate with, another repository or a local branch.
    push  Update remote refs along with associated objects.
    rebase  Forward-port local commits to the updated upstream head.
    rerere  Reuse recorded resolution for merged conflicts.
    reset  Reset current HEAD to the specified state.
    revert  Revert some existing commits.
    rm  Remove files from the working tree and from the index.
    show  Show various types of objects.
    status  Show the working tree status.
    submodule  Initialize, update, or inspect submodules.
    subtree  Merge subtrees and split repositories into subtrees.
    tag  Create, list, delete, or verify a tagged object.
    worktree  Manage multiple working trees.
*** Git Tips
**** Pull Request a specific commit
     #+BEGIN_SRC shell-script

     git remote add upstream https://github.com/upstream_github_username/upstream_github_repo_name.git

     git fetch --all
     git checkout -b my-single-change upstream/master
     git cherry-pick b50b2e7
     git push -u origin my-single-change
     #+END_SRC

**** Force reset Fork to upstream state
     #+BEGIN_SRC shell-script

     # local
     git remote add upstream https://github.com/some_user/some_repo
     git fetch upstream
     git checkout master
     git reset --hard upstream/master

     # remote
     git push origin master --force
     #+END_SRC
*** Git - Fixing Common Errors
**** Git Push Error: insufficient permission for adding an object to repository
     cd .git/objects
     ls -al
     sudo chown -R yourname:yourgroup *
*** Git read later
    https://chris.beams.io/posts/git-commit/
    [[https://www.learnenough.com/git-tutorial][Learn enough to be dangerous]]
* Compilers
** GNU GCC
** Clang
* Editors
** Nano
** Vim/NeoVim
** [[https://www.gnu.org/software/emacs/][Emacs]]
*** Emacs Resources
    - Development Group: https://lists.gnu.org/archive/html/emacs-devel/
*** Emacs Important Commands
    | Command                                       | Description                                                                                                                                           |
    |-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------|
    | dired-mark-extension                          | Mark all files with a certain extension for use in later commands.                                                                                    |
    | check-parens                                  | Check for unbalanced parentheses in the current buffer.                                                                                               |
    | ffap                                          | find file at point                                                                                                                                    |
    | ruler-mode                                    | (you can adjust the margins on the fly) neat.                                                                                                         |
    | skeletons                                     | the emacs built-in answer to yasnippets. The cool thing is they have a global "skeleton" and a mode specific.                                         |
    | org                                           | Org has a built in context mode (setq org-use-speed-commands t) where if you are on the first star certain things like n and p will navigate headers. |
    | C-u C-x                                       | ( executes the last macro and lets you put in more input. Extremely useful for when I forget to type C-n or whatever to link the macro.               |
    | redshank                                      |                                                                                                                                                       |
    | elint                                         |                                                                                                                                                       |
    | elp                                           |                                                                                                                                                       |
    | ert                                           |                                                                                                                                                       |
    | set-selective-display                         |                                                                                                                                                       |
    | hideshow                                      | folding sections                                                                                                                                      |
    | occur                                         |                                                                                                                                                       |
    | reveal-mode                                   |                                                                                                                                                       |
    | substitute-in-file-name                       |                                                                                                                                                       |
    | expand-file-name                              |                                                                                                                                                       |
    | string-match                                  |                                                                                                                                                       |
    | list-display-colors                           |                                                                                                                                                       |
    | read-file-name                                |                                                                                                                                                       |
    | read-directory-name                           | Read directory name, prompting with PROMPT and completing in directory DIR.                                                                           |
    | custom-reevaluate-setting                     | Reset the value of SYMBOL by re-evaluating its saved or standard value.                                                                               |
    | (info "(elisp) key binding conventions")      |                                                                                                                                                       |
    | M-x apropos RET print\                        | insert\                                                                                                                                               |
    | Compile el files conflict: find -name "*.elc" | xargs rm                                                                                                                                              |
    | var: system-configuration-options             | emacs enabled configure options                                                                                                                       |
    | url-hexify-string                             |                                                                                                                                                       |
    | artist-mode                                   | painting in emacs                                                                                                                                     |

*** Emacs RegExp
    | regexp           | desc                          |
    |------------------+-------------------------------|
    | \(\<\w+-?\w+\>\) | match any "word-word" pattern |

*** Emacs Packages Brainstorm
**** TODO EXWM notify dbus notification as tool-box
**** TODO EXWM status bar
     #+begin_src emacs-lisp
     (defun my-setup-header-line-format ()
       "Hide header line if required."
       (set-window-parameter (next-window) 'header-line-format
			     (unless (window-at-side-p (next-window) 'top)
			       'none)))

     (add-hook 'exwm-update-class-hook #'my-setup-header-line-format)

     (set-face-attribute 'header-line nil
			 :background "#000000"
			 :foreground "#cccccc"
			 :height 100)

     ;; See https://github.com/TatriX/good-line
     (defun good-line-format (left right)
       "Return a string of `window-width' length containing LEFT and RIGHT, aligned respectively."
       (let ((reserve (length right)))
	 (when (and (display-graphic-p) (eq 'right (get-scroll-bar-mode)))
	   (setq reserve (- reserve 3)))
	 (concat
	  left
	  " "
	  (propertize  " "
		       'display `((space :align-to (- (+ right right-fringe right-margin) ,(+ reserve 0)))))
	  right)))

     (setq display-time-default-load-average nil)
     (setq display-time-interval 1)
     (setq display-time-format "%a %d/%m/%Y %H:%M:%S")
     (display-time-mode 1)

     (setq-default header-line-format
		   '(:eval (good-line-format
			    ;; Left
			    (when
				(and (window-at-side-p nil 'top)
				     (window-at-side-p nil 'left))
			      (format " [%s]" exwm-workspace-current-index))
			    ;; Right
			    (when (and (window-at-side-p nil 'top)
				       (window-at-side-p nil 'right))
			      (format "CPU %s | MEM %s |%s| %s"
				      (let ((cpu (format "%02d%%%%" my-cpu-usage)))
					(if (> my-cpu-usage 75)
					    (propertize cpu 'font-lock-face '(:foreground "#ff2222"))
					  cpu))
				      (let* ((used (car my-mem-usage))
					     (total (cdr my-mem-usage))
					     (mem (format "%.2f/%.2f"  used total)))
					(if (> (/ used total) 0.75)
					    (propertize mem 'font-lock-face '(:foreground "#ff2222"))
					  mem))
				      telega-mode-line-string
				      display-time-string)))))

     ;; Install "systat" package via yor distro package manager
     (defvar my-cpu-usage 0
       "Current CPU usage percent.")

     (defun my-start-cpu-usage-process ()
       "Start `mstat' process updating `my-cpu-usage' variable."
       (when-let ((old-process (get-process "mpstat")))
	 (kill-process old-process))
       (make-process :name "mpstat"
		     :command '("mpstat" "2")
		     :connection-type 'pipe
		     :filter (lambda (process output)
			       (let* ((last-column (car (last (split-string output))))
				      (idle (cl-parse-integer last-column :junk-allowed t)))
				 (when idle
				   (setq my-cpu-usage (- 100 idle)))))))


     (my-start-cpu-usage-process)

     (defvar my-mem-usage '(0 . 0)
       "Current MEM usage in GB (used . free).")

     (defun my-start-mem-usage-process ()
       "Start `free' process updating `my-cpu-usage' variable."
       (when-let ((old-process (get-process "free")))
	 (kill-process old-process))
       (make-process :name "free"
		     :command '("free" "--mebi" "-s" "2")
		     :connection-type 'pipe
		     :filter (lambda (process output)
			       (let ((columns (split-string output)))
				 (let ((total (string-to-number (nth 7 columns)))
				       (used (string-to-number (nth 8 columns)))
				       (shared (string-to-number (nth 10 columns))))
				   (setq my-mem-usage (cons (/ (+ used shared) 1024.0)
							    (/ total 1024.0))))))))

     (my-start-mem-usage-process)

     (add-hook 'window-configuration-change-hook #'my-setup-header-line-format)


     ;; X Windows Names
     ;; (defun exwm-rename-buffer-to-title ()
     ;;   (exwm-workspace-rename-buffer)
     ;;   (add-hook 'exwm-update-title-hook 'exwm-rename-buffer-to-title)
     #+end_src
**** TODO ffmpeg: trim audio
**** TODO ereader: fix toc, add feature "n" jump to next head
**** TODO package.el functional - Add fallback, pack per version...
**** TODO ido-everywhere - for real
***** TODO ido-popup > ido as completion similar to company but using all available ido packages as fuzzy match(flx)
**** TODO ido-quick-help > similar to company-quick-help
**** TODO echo-box > an eldoc-box for echo **messages** to pop up box
**** TODO Emacs Interface with system packages as emms,vc...
***** TODO vc-mode: Improve/Modernize - a real alternative to Magit
****** vc-mode: remove pass-sh
***** TODO Emacs default PDF viewer fix & add TOC discover feature
***** FFmpeg
***** kdeconnect
**** TODO Emacs Replace system packages as elfeed, nov...
***** LOWriter's .odt files: Editing from Emacs
**** TODO Org mode packages ideas
***** TODO Org package similar to Google docs collaborative: real time comments(using erc), save comments, pop-up box(eldoc-box) as we hover up comments
***** TODO epub-to-org: converting epubs to org package and more: reading progress, comments, TODO, thumbnails, agenda integration
***** TODO #+BEGIN_SRC: prettify it for better readibility
***** TODO org-mode: #+BEGIN_SRC: heading property that state every code under this parent heading are elisp code, should be tangled...
* Network
** Protocols
*** HTTP
*** HTTPS
*** FTP
*** SSL/TLS
*** SSH
**** OpenSSH
     - ControlPersist
     - ssh-copy-id
** Terms
   - hotspot
   - VOIP
   - IPTV
   - RFID
   - 2 family (p2p)
   - desktop sharing
* Concepts
  | Term               | ...                                                                                  | eg       |
  |--------------------+--------------------------------------------------------------------------------------+----------|
  | Distributed System | Collection of independent computers appears to its users as a single coherent system | internet |
  | Computer Network   |                                                                                      |          |
* Concepts
  | Term               | ...                                                                                  | eg       |
  |--------------------+--------------------------------------------------------------------------------------+----------|
  | Distributed System | Collection of independent computers appears to its users as a single coherent system | internet |
  | Computer Network   |                                                                                      |          |
* Sites
  - visual subnet calculator
* Yet to learn
  |                                                                                                      |                                                 |
  |------------------------------------------------------------------------------------------------------+-------------------------------------------------+
  | df -i                                                                                                | inodes                                          |
  | netstat -atunp                                                                                       | listening network ports                         |
  | pid                                                                                                  |                                                 |
  | ps -ef                                                                                               |                                                 |
  | ps aux                                                                                               |                                                 |
  | Hashicorp Vault                                                                                      |                                                 |
  | Hashicorp boundary                                                                                   |                                                 |
  | !*                                                                                                   | reuse shell args of command                     |
  | kubectl get pods                                                                                     |                                                 |
  | alt+t                                                                                                | alterna a posicao de ultimas 2 palavras no bash |
  | gpg                                                                                                  |                                                 |
  | rsync                                                                                                |                                                 |
  | cacat                                                                                                |                                                 |
  | goto                                                                                                 |                                                 |
  | journalctl -b                                                                                        | grep -i bluetooth                               |
  | kerberos                                                                                             |                                                 |
  | OpenShift and OpenStack                                                                              |                                                 |
  | ss -ln / grep 22                                                                                     |                                                 |
  | ssh -vvv user@address -p port-id # verbose connecting steps                                          |                                                 |
  | ssh-copy-id user@address -p port-id # copy client pub ssh keys to client ~/.ssh/authorized_keys file |                                                 |

* Software
** Onlines
   https://www.urionlinejudge.com.br/judge/en/login

   https://projecteuler.net/

   http://typicalprogrammer.com/

   https://www.coderhood.com/5-problem-solving-skills-great-software-developers/

   https://onlinetexttools.com/

   https://devurls.com/
** Media
*** Youtube-dl
**** Download from YT

     To list the available formats type:
     youtube-dl -F url

     Then choose the best one
     Example  720p : youtube-dl -f 22 url
**** Download audio from YT video
     youtube-dl -x --audio-format vorbis
     youtube-dl -x --audio-format flac

*** mpv
**** IPC
     https://alexherbo2.github.io/config/mpv/control-mpv-through-command-line/
     https://github.com/mpv-player/mpv/blob/master/DOCS/man/ipc.rst
**** config eg
     https://github.com/mpv-player/mpv/blob/master/etc/input.conf
*** FFmpeg
**** ffmpeg sound booster
     https://trac.ffmpeg.org/wiki

     # Audio Increase/Decrease
     ffmpeg -i input.flac -filter:a "volume=1.5" output.flac
     ffmpeg -i input.flac -af 'volume=1.5' output.flac

**** ffmpeg cut/trim audio/video
     - You can use the time offset parameter (-ss) to specify the start time stamp in HH:MM:SS.ms format
     while the -t parameter is for specifying the actual duration of the clip in seconds:

     ffmpeg -i input.mp4 -ss 00:00:50.0 -codec copy -t 20 output.mp4
**** ffmpeg video to audio
     ffmpeg -i input.mp4 output.flac
**** ffmpeg mic recording
     ffmpeg -f pulse -i default output.wav
**** ffmpeg read later
     https://www.labnol.org/internet/useful-ffmpeg-commands/28490/
**** ffmpeg -dvd ripper
     cat *.VOB > moviename.vob; ffmpeg -i moviename.vob -acodec libfaac -ac 2 -ab 128k -vcodec libx264 -vpre fast -crf 20 -threads 0 moviename.mp4
**** ffmpeg concat files
     ffmpeg -f concat -i mylist -c copy ap2-long.flac
** Browser
*** Vimium - Emacs bindings
    #+BEGIN_SRC text

    unmap j
    unmap k
    unmap h
    unmap l
    unmap f
    unmap F
    unmap B
    unmap n
    unmap N
    unmap gg
    unmap G

    map n scrollDown
    map p scrollUp
    map b scrollLeft
    map f scrollRight
    map < scrollToTop
    map > scrollToBottom

    map B goBack
    map F goForward
    map s performFind
    map l LinkHints.activateMode
    mpa r performBackwardsFind

    #+END_SRC
* Skills
  | Skill                           | eg                                                                                          |
  |---------------------------------+---------------------------------------------------------------------------------------------|
  | Unix                            | CentOs, Ubuntu                                                                              |
  | Languages                       | shell, go, ruby, python, perl                                                               |
  | Cloud                           | AWS: Compute (ECS e EC2), Networking, RDS, S3, Monitoria (CloudWatch e CloudTrail) e Lambda |
  | Container                       | Docker Kubernetes OpenShift Helm Rancher                                                    |
  | Config Management               | Ansible Chef Puppet Salt                                                                    |
  | controle de versionamento       | git                                                                                         |
  | Infra provisioning              | Terraform                                                                                   |
  | Continuous Integration/Delivery | jenkins                                                                                     |
  | Virtualization                  |                                                                                             |
  | Observability e Monitoring      | nagios Nginx, Apache                                                                        |
  | agile                           | scrum                                                                                       |
  | micro services                  |                                                                                             |
  | cloud native                    |                                                                                             |
