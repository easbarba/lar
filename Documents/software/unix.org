#+TILE: Unix - Annotations

* TOC
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
  :CONTENTS:
  - [[#fortschritt][Fortschritt]]
    - [[#buch][Buch]]
  - [[#infra-provisioning][Infra Provisioning]]
    - [[#cloudformation][CloudFormation]]
    - [[#pulumi][Pulumi]]
    - [[#terraform][Terraform]]
  - [[#configuration-management][Configuration Management]]
    - [[#terms][terms]]
    - [[#alternatives][alternatives]]
  - [[#containers][Containers]]
    - [[#images][Images]]
  - [[#orchestration][Orchestration]]
    - [[#kubernetes-k8s][Kubernetes (k8s)]]
  - [[#cloud-providers][Cloud Providers]]
    - [[#heroku][Heroku]]
    - [[#azure][Azure]]
    - [[#aws][AWS]]
  - [[#linux][Linux]]
    - [[#progresso][Progresso]]
    - [[#text-manipulation][Text Manipulation]]
    - [[#process-monitoring][Process Monitoring]]
    - [[#df][Df]]
    - [[#strace][strace]]
    - [[#dstrace][dstrace]]
    - [[#multiplexers][Multiplexers]]
    - [[#firewall][Firewall]]
    - [[#lvm][LVM]]
    - [[#swap][Swap]]
    - [[#systemd][SystemD]]
    - [[#disk-space-and-partition][Disk Space and Partition]]
    - [[#sync][Sync]]
    - [[#laptop][Laptop]]
    - [[#steam][Steam]]
    - [[#boot][Boot]]
    - [[#xorg][X.org]]
    - [[#network][Network]]
    - [[#containers-virtualization][Containers, Virtualization]]
    - [[#terminal][Terminal]]
    - [[#home][$HOME]]
    - [[#commands][Commands]]
    - [[#packages][Packages]]
    - [[#udev-rules-udevrulesd][Udev rules (udev/rules.d)]]
  - [[#cicd][CI/CD]]
    - [[#gitlab][Gitlab]]
    - [[#github-actions][Github Actions]]
    - [[#circle-ci][Circle CI]]
    - [[#jenkins][Jenkins]]
  - [[#virtual-machine][Virtual Machine]]
  - [[#web-server][Web Server]]
    - [[#apache][Apache]]
    - [[#nginx][Nginx]]
  - [[#toolings][Toolings]]
    - [[#hcl][Hcl]]
  - [[#version-control][Version Control]]
    - [[#git][Git]]
  - [[#shell][Shell]]
    - [[#gnu-bash][GNU Bash]]
    - [[#bash-resources][Bash resources]]
    - [[#fish][Fish]]
    - [[#zsh][Zsh]]
    - [[#tcsh][TCSH]]
    - [[#posix][Posix]]
  - [[#compilers][Compilers]]
    - [[#gnu-gcc][GNU GCC]]
    - [[#clang][Clang]]
  - [[#editors][Editors]]
    - [[#nano][Nano]]
    - [[#vimneovim][Vim/NeoVim]]
    - [[#emacs][Emacs]]
  - [[#network][Network]]
    - [[#protocols][Protocols]]
    - [[#terms][Terms]]
  - [[#concepts][Concepts]]
  - [[#skills][Skills]]
  - [[#concepts][Concepts]]
  - [[#sites][Sites]]
  - [[#distros][Distros]]
    - [[#apt][APT]]
    - [[#rpm][RPM]]
    - [[#gentoo][Gentoo]]
    - [[#functional][Functional]]
  - [[#yet-to-learn][Yet to learn]]
  - [[#software][Software]]
    - [[#onlines][Onlines]]
    - [[#media][Media]]
    - [[#browser][Browser]]
  :END:
* Progress
** Books
| Books                                         | capitulo                                   | em                             | @later | revisao |
|-----------------------------------------------+--------------------------------------------+--------------------------------+--------+---------|
| Unix Environment                              | 2 File System                              | 2.5 Inodes                     |        |         |
| Linux Programming Interface                   | Fundamental Concepts                       | Process                        |        |         |
| Modern Operating Systems                      | Introduction                               | 1.2 TYPES OF COMPUTER NETWORKS |        |         |
| UNIX and Linux System Administration Handbook |                                            |                                |        |         |
| LPIC                                          | Part II Exam / Chapter 6 Configuring the X | Configuring Basic X Features   |        |         |
| The Art of Unix programming                   | 2 History                                  |                                |        |         |
| RHCSA Red Hat Enterprise Linux 8              | Basic File Management                      |                                |        |         |

* Internals
** Process
   kernel space
   user space
* Cli Apps
** Text Manipulation
*** grep
*** seq
*** awk
*** soft
*** uniq
*** cat
** Process Monitoring
*** Ps
*** Htop
*** Top
** Misc
*** write
Send a message to another user.
*** mesg
Control write access of other users to your terminal.
*** news
*** devilspie
    get_window_name()
     returns a string containing the name of the current window.

    get_application_name()
    returns the application name of the current window.

    set_window_position(xpos, ypos)
    Sets the position of a window.

    set_window_size(xsize, ysize)
    Sets the size of a window.

    set_window_geometry(xpos, ypos, xsize ysize)
    Set the geometry of a window.

    make_always_on_top()
    Set the windows always on top flag.

    set_on_top()
    Sets a window on top of the others (this will however not lock the window in this position).

    debug_print()
    Debug helper that prints a string to stdout. It is only printed if devilspie2 is run with the --debug option.

    shade()
    "Shades" a window, showing only the title-bar.

    unshade()
    Unshades a window - the opposite of "shade"

    maximize()
    maximizes a window

    unmaximize()
    unmaximizes a window

    maximize_vertically()
    maximizes the current window vertically.

    maximize_horisontally()
    maximizes the current window horisontally.

    minimize()
    minimizes a window

    unminimize()
    unminimizes a window, that is bringing it back to screen from the minimized position/size.

    decorate_window()
    Shows all window decoration.

    undecorate_window()
    Removes all window decorations.

    set_window_workspace(number)
    Moves a window to another workspace. The number variable starts counting at 1.

    change_workspace(number)
    Changes the current workspace to another. The number variable starts counting at 1.

    pin_window()
    asks the window manager to put the window on all workspaces.

    unpin_window()
    Asks the window manager to put window only in the currently active workspace.

    stick_window()
    Asks the window manager to keep the window's position fixed on the screen, even when the workspace or viewport scrolls.

    unstick_window()
    Asks the window manager to not have window's position fixed on the screen when the workspace or viewport scrolls.
*** cut
*** cat
    |    |                 |
    |----+-----------------|
    | -n | display numbers |
    | -e | shows endline   |

*** fsck
*** who
*** w
*** ps
    ps auxwww | grep sshd: | grep -v grep
*** ss
    ss | grep -i ssh
*** last
    last -a | grep -i still
*** fc-cache
    |                        |                  |
    |------------------------+------------------|
    | fc-list : family style | get font family  |
    | fc-cache -fv           | reload all fonts |
    |                        |                  |
*** man
    - mandb: perform a keyword search on manual: man -k <TERM>
*** uname
    |          |                        |
    |----------+------------------------|
    | uname -a | all system information |
    |          |                        |
*** tty
*** uptime
*** lscpu
*** pwd
    returns working directory
*** lsof
*** sysctl
*** gpg
**** set up
     gpg --full-generate-key
     RSA
     4096 bits
**** list keys
     gpg --list-secret-keys --keyid-format LONG
 ***
*** Df
*** strace
*** dstrace
** Multiplexers
*** Tmux
*** GNU Screen
** Getters
*** wget
*** curl
* Firewall
* LVM
  # remount lvm volumes
  # vgscan --mknodes
  # lvchange -a y /dev/VolGroup00/home
  # lvchange -a y /dev/VolGroup00/swap

* Swap
  { Swap File }

  #2 Create Storage File (2GB)
  sudo dd if=/dev/zero of=/mnt/swapfile bs=1MB count=2000

  Step #3: Secure swap file
  sudo chmod 600 /mnt/swapfile

  Step #4: Set up a Linux swap area
  sudo mkswap /mnt/swapfile

  Step #5: Enabling the swap file
  sudo swapon /mnt/swapfile

  Step #6: Update /etc/fstab file
  /mnt/swapfile swap swap defaults 0 0
  UUID=2176ee83-1c3e-4a48-8dd0-4a12a3e7fe7b
  How do I verify swap is activated or not?
  swapon  -s
  or
  free -m
  or
  cat  /proc/swaps

* SystemD
** SystemD random commands
   #  To prevent the laptop from suspending when the lid is closed:
   set in /etc/systemd/logind.conf: HandleLidSwitch=lock

   # Timezone
   sudo timedatectl list-timezones
   sudo timedatectl set-timezone REGION/CITY
   sudo timedatectl set-ntp true

   # SSD TRIM
   #Tell systemd to reload its unit files, then enable it:
   $ sudo systemctl daemon-reload
   $ sudo systemctl enable fstrim.timer
   $ sudo systemctl list-timers

   #Rtags
   sudo systemctl --user enable rdm.socket
   sudo systemctl --user start rdm.socket

   # boot analyze
   systemd-analyze

   # Crons

   # Syslogs


   # NEtwork Manager
   $ sudo systemctl enable NetworkManager
   $ sudo systemctl start NetworkManager

** rescue.target (single-user)
   - systemd.unit=emergency.target in boot loader to avoid local filesystems to be mounted (Redhat)
   - systemd.unit=rescue.target ... to boot into rescue mode
** SystemD services
*** fstrim.service
    [Unit]
    Description=Runs fstrim on all mounted devices that support TRIM

    [Service]
    Type=oneshot
    ExecStart=/bin/sh -c '/sbin/fstrim -a'
*** fstrim.timer
    [Unit]
    Description=Run fstrim.service every 12 hours

    [Timer]
    OnUnitInactiveSec=12h
    Persistent=true

    [Install]
    WantedBy=multi-user.target
** SystemD Read Later
   https://www.maketecheasier.com/make-linux-boot-faster/

* Desktop Environments
** GNOME

*** Gsettings/Dconf
    |                  |                  |
    |------------------+------------------|
    | reset to default | dconf reset -f / |
    |                  |                  |

* Disk Space and Partition
  # df - report file system disk space usage
  # du - estimate file space usage
  # dd - convert and copy a file

  # Writing iso to usb with DD
  sudo dd bs=4M if=/path/to/distro.iso of=/dev/sdx status=progress oflag=sync

  # How to Change UUID of Partition in Linux Filesystem
  umount /dev/sdb1
  tune2fs /dev/sdb1 -U random /dev/sdb1 # blkid | grep sdb1
  mount /dev/sdb1

  # Erase UsbStick contents
  sudo umount -f /dev/sdb
  sudo parted /dev/sdb mklabel msdos
  sudo parted -a none /dev/sdb mkpart  primary fat32 0 20484
  sudo mkfs.vfat -n "MACHO" /dev/sdb1

  # List devices
  $ lsblk - list block devices
  $ fdisk - manipulate disk partition table

  # Reboot and Poweroff without sudo add to /etc/sudoers:
  # user hostname =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot

* Sync
  https://syncthing.net/

* Laptop
** https://wiki.archlinux.org/index.php/Touchpad_Synaptics

** https://www.thinkwiki.org/wiki/Category:T430

** https://www.thinkpenguin.com/
* Boot
** Coreboot / Libreboot
   https://www.chucknemeth.com/flash-lenovo-x230-coreboot/
* X.org
** X11 (xorg.conf.d)
*** 70-synaptics.conf
    #+begin_src conf
    Section "InputClass"
    Identifier "touchpad"
    Driver "synaptics"
    MatchIsTouchpad "on"
    Option "TapButton1" "1"
    Option "TapButton2" "3"
    Option "TapButton3" "2"
    Option "VertEdgeScroll" "on"
    Option "VertTwoFingerScroll" "on"
    Option "HorizEdgeScroll" "on"
    Option "HorizTwoFingerScroll" "on"
    Option "CircularScrolling" "on"
    Option "CircScrollTrigger" "2"
    Option "EmulateTwoFingerMinZ" "40"
    Option "EmulateTwoFingerMinW" "8"
    Option "CoastingSpeed" "0"
    Option "FingerLow" "30"
    Option "FingerHigh" "50"
    Option "MaxTapTime" "125"
    EndSection

    #+end_src
** Xwrapper.conf
   allowed_users=anybody
** setxkbmap
   The list of predefined remapping options is in
   less /usr/share/X11/xkb/rules/evdev.lst

   eg: swap left alt and left crtl
   setxkbmap -option  ctrl:swap_lalt_lctlcac

   trace - trace system calls and signals

   man 7 signal

   Use your favorite desktop keyboard layout switcher applet. You can also switch the layout from the terminal, e. g.:
   setxkbmap us
   setxkbmap br

* Network
** rc.conf
   #+begin_src conf
   moused_enable="YES"
   dbus_enable="YES" # windowns manager
   hald_enable="YES" # windowns manager
   kld_list="i915kms" # intel

   #+end_src
** Networks Toolings
*** ip
    | command | ...         |
    |---------+-------------|
    | link    | Mac Address |
    |         |             |

** Firewall
*** Firewalld
    https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7
** KdeConnect
   qdbus org.kde.kdeconnect /modules/kdeconnect/devices//sftp getDirectories
   qdbus org.kde.kdeconnect /modules/kdeconnect/devices//sftp mountAndWait
** NetworkManager
   nmcli radio
   nmcli device wifi rescan
   nmcli device wifi list
   nmcli device wifi connect SSID-Name wireless-password

* Containers, Virtualization
** Qemu & KVM
*** Configuring
    sudo groupadd libvirt
    sudo groupadd libvirt-qemu
    sudo groupadd kvm
    sudo adduser "$USER" libvirt
    sudo adduser "$USER" libvirt-qemu
    sudo adduser "$USER" kvm

    Add (kvm) and (kvm-intel) to /etc/modules or temporarily active both kernel modules: # sudo modprobe kvm & # sudo modprobe kvm-intel (https://wiki.ubuntu.com/kvm)

    Uncomment (user) and (group) and set them to (root) (etc/libvirt/qemu.conf)

*** Creating an image : To set up your own guest OS image, you first need to create a blank disc image.
    qemu-img create -f qcow2 distro.img 25G
*** Uefi Support with ovmf
    cp /usr/share/OVMF/OVMF_VARS.fd OVMF_VARS.fd
*** Boot Qemu with UEFI support
    qemu-system-x86_64 -m 4G -vga qxl \
    -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file="$HOME"/Temps/distros/OVMF_VARS.fd \
    -enable-kvm \
    -hda "$HOME"/Temps/distros/distro.img  \
    -cdrom "$HOME"/Temps/distros/CentOS-7-x86_64-Minimal-1804.iso &
*** System76 way
    cp /usr/share/OVMF/OVMF_VARS.fd example_OVMF_VARS.fd
    qemu-img create -f qcow2 example.qcow2 16G
    qemu-system-x86_64 -m 4G -enable-kvm -vga qxl \
    -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=example_OVMF_VARS.fd \
    -drive if=virtio,file=example.qcow2 \
    -cdrom xenial-desktop-amd64.iso
*** libvirt: The virtualization API
*** virt-manager: Desktop tool for managing virtual machines via libvirt
*** QEMU Manual & articles
    https://www.qemu.org/
    https://qemu.weilnetz.de/doc/qemu-doc.html

    https://wiki.archlinux.org/index.php/QEMU
    https://en.wikibooks.org/wiki/QEMU/Images
    https://ycnrg.org/vga-passthrough-with-ovmf-vfio/

*** Legacy
    KVM:-enable-kvm
    qemu-system-x86_64 -m 1G -hda temp.img -cdrom guixsd-install-0.14.0.x86_64-linux.iso -boot d

*** Setting up
    # sudo groupadd libvirt
    # sudo groupadd libvirt-qemu
    # sudo groupadd kvm
    # sudo adduser "$USER" libvirt
    # sudo adduser "$USER" libvirt-qemu
    # sudo adduser "$USER" kvm
    # add (kvm) and (kvm-intel) to /etc/modules or temporarily active both kernel modules: # sudo modprobe kvm & # sudo modprobe kvm-intel (https://wiki.ubuntu.com/kvm)
    # Uncomment (user) and (group) and set them to (root) (etc/libvirt/qemu.conf)

*** Windows
    <OriansJ> USER: the big problem we had was with fully encrypted /boot partitions is qemu with hardware acceleration tended to have a hashing
    bug, preventing the images from booting.  [20:32]
    <USER> hum...
    <OriansJ> But if /boot isn't encrypted but / is; the linux luks module works fine enough for proper boot
    <OriansJ> and unhardware accelerated qemu on Windows is very very painful for GUI work
    <OriansJ> a shell only image is a little slow but not painfully so but gnome is like watching paint dry  [20:34]
** Wine
*** Winetricks nightbuild
    wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
    chmod +x winetricks
    sudo mv winetricks /usr/local/bin
    winetricks --self-update # update
*** Wine prefix 64 bits
    env WINEPREFIX=/data/wine/PREFIXNAME
*** Wine scripts
**** 64-steam-wine.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Description: Opens Steam of the given wineprefix

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "Name of the Wine prefix:"

     # Keyborad input to string
     read -r input_variable

     echo "disabling winedebug"
     export WINEDEBUG=-all

     echo "overriding dxvk variables on winecfg"
     export WINEDLLOVERRIDES=d3d11,dxgi=n # default
     # export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

     echo " exporting Vulkan Variables"
     # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
     # export DXVK_LOG_LEVEL=none
     # export DXVK_DEBUG_LAYERS=0  # Debug
     export DXVK_HUD=fps
     # devinfo,fps,frametimes,memory

     echo "running 64bits Wineprefix Steam"
     WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine "$HOME"/wine/prefixes/"$input_variable"/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox
     #! /usr/bin/env bash

     # Description: Opens Steam of the given wineprefix

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "Name of the Wine prefix:"

     # Keyborad input to string
     read -r input_variable

     echo "disabling winedebug"
     export WINEDEBUG=-all

     echo "overriding dxvk variables on winecfg"
     export WINEDLLOVERRIDES=d3d11,dxgi=n # default
     # export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

     echo " exporting Vulkan Variables"
     # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
     # export DXVK_LOG_LEVEL=none
     # export DXVK_DEBUG_LAYERS=0  # Debug
     export DXVK_HUD=fps
     # devinfo,fps,frametimes,memory

     echo "running 64bits Wineprefix Steam"
     WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine "$HOME"/wine/prefixes/"$input_variable"/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox


     #+END_SRC
**** dark_souls_wine.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "exporting wine variables"
     # export WINEDLLOVERRIDES=dinput8,xinput1_3
     # export WINEDEBUG=-all

     echo "running 32bits Wineprefix Steam"
     WINEARCH=win32 WINEPREFIX="$HOME"/wine/prefixes/dark/ wine "$HOME"/wine/prefixes/dark/drive_c/Program\ Files/Steam/Steam.exe
     # WINEARCH=win32 WINEPREFIX="$HOME"/wine/prefixes/dark/ wine  "$HOME"/wine/prefixes/dark/drive_c/Program\ Files/Steam/steamapps/common/Dark\ Souls\ Prepare\ to\ Die\ Edition/DATA/dsmfixgui.exe

     #+END_SRC
**** dark_souls_wineprefix.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

     # Description: Create wineprefix with given name and get dxvk lastest dll and dependencies

     # What this script does:

     # - Create wineprefix with given name
     # - Install vulkanskd and steam (winetricks)
     # - Download latest Dxvk dll from Haag site!
     # - Uses setup_dxvk.sh to symlink both 64/32 dll
     # - add Wine-Vulkan regedit keys
     # - creates winevulkan.json file on C:\windows

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     # Check if ~/wine/prefixes/ folder exist
     if [ ! -d "$HOME/wine/prefixes/" ]; then
	 mkdir -p "$HOME"/wine/prefixes/
     fi

     # Where Wine prefixes using DXVK are to be set up
     wine_prefix_folder="$HOME/wine/prefixes"

     # Where scripts are located
     SCRIPTS="$HOME/.config/scripts"

     echo "Disable Wine debugging"
     # export WINEDEBUG=-all

     echo "Create Wine prefix, press Ok"
     WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/dark/ winecfg

     echo "Install Winetricks packages"
     WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/dark/ winetricks steam corefonts d3dx9 tahoma vcrun2008 vlc dotnet46

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     #+END_SRC
**** dxvk_get_latest_dll.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Dependecies: GNU Coreutils, GNU Bash

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     under="______________________"

     echo $under
     echo "Get dxvk 32/64 lastest dll binaries into ~/wine/dxvk/"
     echo $under

     echo "Making dxvk folder and its sub folders"
     if [ ! -d "$HOME/wine/dxvk/" ]; then
	 mkdir -vp "$HOME"/wine/dxvk/{win32,win64}
     fi

     echo "Assigning dxvk dlls folder"
     dxvk_folder="$HOME/wine/dxvk"

     echo "If there are old dxvk dlls remove those"
     if [ ! -d "$dxvk_folder/wine32-old" ]; then
	 rm -rf "$dxvk_folder"/win32-old/ || exit
	 rm -rf "$dxvk_folder"/win64-old  || exit
     fi

     echo "Backing up existent folders"
     if [ ! -d "$dxvk_folder/wine32" ]; then
	 mv "$dxvk_folder"/win32 "$dxvk_folder"/win32-old || exit
	 mv "$dxvk_folder"/win64 "$dxvk_folder"/win64-old || exit
     fi

     echo $under
     echo "Downloading Dxvk Dlls"
     echo $under

     if [ ! -d "$dxvk_folder/win32" ]; then
	 echo "Making win32 folder"
	 mkdir -p "$dxvk_folder"/win32

	 echo "Downloading dxvk 32 dlls from source page"
	 wget https://haagch.frickel.club/files/dxvk/latest/32/bin/d3d11.dll -O "$dxvk_folder"/win32/d3d11.dll
	 wget https://haagch.frickel.club/files/dxvk/latest/32/bin/dxgi.dll -O "$dxvk_folder"/win32/dxgi.dll
	 wget https://haagch.frickel.club/files/dxvk/latest/32/bin/setup_dxvk.sh -O "$dxvk_folder"/win32/setup_dxvk.sh
     fi

     if [ ! -d "$dxvk_folder/win64" ]; then
	 echo "create win64 folder"
	 mkdir -p "$dxvk_folder"/win64

	 echo "Downloading dxvk 64 dlls from source page"
	 wget https://haagch.frickel.club/files/dxvk/latest/64/bin/d3d11.dll -O "$dxvk_folder"/win64/d3d11.dll
	 wget https://haagch.frickel.club/files/dxvk/latest/64/bin/dxgi.dll -O "$dxvk_folder"/win64/dxgi.dll
	 wget https://haagch.frickel.club/files/dxvk/latest/64/bin/setup_dxvk.sh -O "$dxvk_folder"/win64/setup_dxvk.sh
     fi

     echo $under
     echo "Done, all dxvk dlls present and ready"
     echo $under

     #+END_SRC
**** dxvk_one_script.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     echo "Dependecies: wine staging (debian/ubuntu), winetricks (github), GNU Coreutils, GNU Bash"

     echo "Description: Create wineprefix with given name and get dxvk lastest dll and dependencies"

     # What this script does:

     # - Create wineprefix with given name
     # - Install vulkanskd and steam (winetricks)
     # - Download latest Dxvk dll from Haag site!
     # - Uses setup_dxvk.sh to symlink both 64/32 dll
     # - add Wine-Vulkan regedit keys
     # - creates winevulkan.json file on C:\windows


     echo "Killing wineserver"
     wineserver -k

     echo "Making ~/wine/prefixes/ if not present"
     if [ ! -d "$HOME/wine/prefixes/" ]; then
	 mkdir -p "$HOME"/wine/prefixes/
     fi

     echo "Assigning Wine prefixes folder"
     wine_prefix_folder="$HOME/wine/prefixes"

     echo "If not present making script folder"
     if [ ! -d "$HOME/.config/scripts/" ]; then
	 mkdir -p "$HOME/.config/scripts"
     else
	 echo "Script folder exist"
     fi

     echo "Location of scripts and files"
     SCRIPTS="$HOME/.config/scripts"

     echo "Please name your Wine prefix:"

     # keyboard input to string
     read -r input_variable

     echo "Disable Wine debugging"
     export WINEDEBUG=-all

     echo "Create Wine prefix, press Ok"
     WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

     echo "Install Winetricks packages"
     WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vulkansdk steam

     # Checks if dxvk_get_latest_dll.sh exist and runs it
     if [ ! -e "$SCRIPTS/dxvk_get_latest_dll.sh" ]; then
	 echo "Downloading latest Dxvk dll"
	 wget https://gitlab.com/USER/dots/raw/master/config/.config/scripts/dxvk_get_latest_dll.sh
	 bash "$SCRIPTS"/dxvk_get_latest_dll.sh
     else
	 bash  "$SCRIPTS"/dxvk_get_latest_dll.sh
     fi

     echo "Copy Dxvk's dll into prefix"
     WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ bash "$HOME"/wine/dxvk/win32/setup_dxvk.sh
     WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ bash "$HOME"/wine/dxvk/win64/setup_dxvk.sh

     echo "If vulkan.reg is not present download it"
     if [ ! -e "$SCRIPTS/vulkan.reg" ]; then
	 wget https://gitlab.com/USER/dots/raw/master/config/.config/scripts/vulkan.reg
     fi

     echo "Creates regedit /kronos/Driver keys"
     WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine regedit /S "$SCRIPTS"/vulkan.reg

     echo "Creates winevulkan.json file under C:\\Windows"
     create_json_file() {
	 cat > "$wine_prefix_folder"/"$input_variable"/drive_c/windows/winevulkan.json <<EOF
     {
       "file_format_version": "1.0.0",
       "ICD": {
	 "library_path": "c:\\\\windows\\\\system32\\\\winevulkan.dll",
	 "api_version": "1.0.51"
       }
     }
     EOF
     }

     create_json_file

     #+END_SRC
**** wineprefix
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash
     ,**
     # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

     # Description: Create wineprefix with given name and get dxvk lastest dll and dependencies

     # What this script does:

     # - Create wineprefix with given name
     # - Install vulkanskd and steam (winetricks)
     # - Download latest Dxvk dll from Haag site!
     # - Uses setup_dxvk.sh to symlink both 64/32 dll
     # - add Wine-Vulkan regedit keys
     # - creates winevulkan.json file on C:\windows

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     # Check if ~/wine/prefixes/ folder exist
     if [ ! -d "$HOME/wine/prefixes/" ]; then
	 mkdir -p "$HOME"/wine/prefixes/
     fi

     # Where Wine prefixes using DXVK are to be set up
     wine_prefix_folder="$HOME/wine/prefixes"

     # Where scripts are located
     SCRIPTS="$HOME/.config/scripts"

     echo "Please name your Wine prefix:"

     # keyboard input to string
     read -r input_variable

     echo "Disable Wine debugging"
     # export WINEDEBUG=-all

     echo "Create Wine prefix, press Ok"
     WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

     echo "Install Winetricks packages"
     WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks steam

     #+END_SRC
**** wine_cfg.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Description: Open winecfg of given wineprefix

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "Name of the Wine prefix:"

     # Keyboard input to string
     read -r input_variable

     echo "running Winecfg"
     WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ winecfg

     #+END_SRC
**** wine_regedit.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Description: Open regedit of given wineprefix

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "Name of the Wine prefix:"

     # Keyboard input to string
     read -r input_variable

     echo "running Winecfg"
     WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine regedit

     #+END_SRC
**** wine_steam
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # Description: Opens Steam of the given wineprefix

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "disabling winedebug"
     export WINEDEBUG=-all

     echo "overriding dxvk variables on winecfg"
     # export WINEDLLOVERRIDES=d3d11,dxgi=n # default
     export WINEDLLOVERRIDES=d3d11,dxgi,xaudio2_7=n # skyrim SE - voices fix

     echo " exporting Vulkan Variables"
     # export __GL_NextGenCompiler=0 # Fix witcher 3 glitches
     # export DXVK_LOG_LEVEL=none
     # export DXVK_DEBUG_LAYERS=0  # Debug
     export DXVK_HUD=fps
     # devinfo,fps,frametimes,memory

     echo "running 64bits Wineprefix Steam"
     WINEARCH=win64 WINEPREFIX="$HOME"/wine/prefixes/dx/ wine "$HOME"/wine/prefixes/dx/drive_c/Program\ Files\ \(x86\)/Steam/Steam.exe -no-cef-sandbox

     #+END_SRC
**** wine_vulkan_cube.sh
     #+BEGIN_SRC shell-script
     #! /usr/bin/env bash

     # kill wineserver before installation to make sure correct wine version is used
     wineserver -k

     echo "Name of the Wine prefix:"

     # Keyborad input to string
     read -r input_variable

     echo "running Winecfg"
     WINEPREFIX="$HOME"/wine/prefixes/"$input_variable"/ wine cube

     #+END_SRC
**** vulkan.reg
     #+BEGIN_SRC conf
     REGEDIT4

     [HKEY_LOCAL_MACHINE\SOFTWARE\Khronos\Vulkan\Drivers]
     "C:\\Windows\\winevulkan.json"=dword:00000000

     [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Khronos\Vulkan\Drivers]
     "C:\\Windows\\winevulkan.json"=dword:00000000


     #+END_SRC
*** Wine prefix 32bits
    env WINEARCH=win32 WINEPREFIX=/data/wine/PREFIXNAME
*** Winetricks and windows settings
    env WINEPREFIX=/data/wine/prefix/PREFIXNAME winetricks videomemorysize=4096
*** Winetricks basic packages
    winetricks tahome corefonts
*** Winetricks DX packages
    winetricks d3dx9
*** Winetricks misc packages
    winetricks vcrun2008

*** Misc Software
**** Fred's ImageMagick Scripts
     http://www.fmwconcepts.com/imagemagick/index.php

**** Style and Grammar Checker for 25+ Languages
     https://github.com/languagetool-org/languagetool

**** next-browser/next: Next - Be Productive.
     https://github.com/nEXT-Browser/nEXT

**** Misc Software read later
     https://wiki.archlinux.org/index.php/List_of_applications

     https://jvns.ca/blog/2016/11/21/things-to-learn-about-linux/


     https://github.com/alebcay/awesome-shell

     https://github.com/herrbischoff/awesome-command-line-apps

     Sensible Bash · Small & opinionated selection of basic Bash configurations for a better command-line user experience
     http://mrzool.cc/writing/sensible-bash/

     https://www.commandlinefu.com/commands/browse/sort-by-votes

** Virtualbox
   VirtualBox kernel modules do not match the version of VirtualBox. Executing /sbin/vboxconfig ...
   Solution: vboxreload

   --------------------
   From my experience Guest Additions that are bundled with VirtualBox work better. Here are steps to install them:

   Install kernel headers (installer needs them to build the kernel module):

   $ sudo apt-get update
   $ sudo apt-get install build-essential linux-headers-$(uname -r)

   Insert the virtual CD using appropriate menu item in VirtualBox menu:

   Menu screenshot

   Mount the CD:

   $ sudo mount /dev/cdrom /media/cdrom

   cd into the mounted directory:

   $ cd /media/cdrom

   Run the installer:

   $ sudo ./VBoxLinuxAdditions.run

   Or alternatively, if you really want to install from repository, try to find the package by name

   $ sudo apt-cache pkgnames | grep virtualbox

   virtualbox-ose-guest-utils is available for me, so is virtualbox-guest-utils (they should be identical since VirtualBox 4.0).

   ------------------
* Terminal
  http://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html
** Coreutils:
   https://git.savannah.gnu.org/cgit/coreutils.git
*** MAKE
    after populating /usr/loca cal for ldconfig: ldconfig - configure dynamic linker run-time bindings
    ldconfig /usr/local/lib
*** Grep
**** Grep read later
     https://www.cyberciti.biz/faq/grep-regular-expressions/

* XDG
** https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
** Applications Desktop Files
   /usr/share/applications/
   xdg-settings set default-web-browser google-chrome.desktop
* Commands
  | command        |                                  |
  |----------------+----------------------------------|
  | lsb_release -a | distro info                      |
  | ldd            | print shared object dependencies |
  | ldconfig       |                                  |
* Online
  https://pkgs.org/
* misc
  $ cat /usr/share/dict/words
* man
  - errno: number of last error
* Udev rules
** udev/rules.d
** brightnessctl
*** backlight.rules
    get backlight device: brightnessctl -l
    add user to VIDEO: usermod -aG video $USER
    #+begin_src conf
    ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<intel_backlight>", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
    ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<intel_backlight>", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
    #+end_src
* Further reading
Further information
Modern texts covering operating systems concepts and design, with particular ref-
erence to UNIX systems, include [Tanenbaum, 2007], [Tanenbaum & Woodhull,
2006], and [Vahalia, 1996], the last of these containing much detail on virtual mem-
ory architectures. [Goodheart & Cox, 1994] provide details on System V Release 4.
[Maxwell, 1999] provides an annotated listing of selected parts of the Linux 2.2.5
kernel. [Lions, 1996] is a detailed exposition of the Sixth Edition UNIX source
code that remains a useful introduction to UNIX operating system internals.
