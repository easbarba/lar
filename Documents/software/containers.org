#+TILE: Containers - Annotations

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progresso][Progresso]]
  - [[#books][books]]
  - [[#sloc][sloc]]
- [[#commands][Commands]]
  - [[#container][container]]
  - [[#exec][exec]]
  - [[#volume][volume]]
  - [[#ps][ps]]
  - [[#login][login]]
  - [[#images][images]]
  - [[#image][image]]
  - [[#rm][rm]]
  - [[#run][run]]
  - [[#start][start]]
  - [[#system][system]]
  - [[#network][network]]
- [[#compose-commands][Compose Commands]]
  - [[#build][build]]
  - [[#up][up]]
  - [[#stop][stop]]
  - [[#pause][pause]]
  - [[#unpause][unpause]]
  - [[#restart][restart]]
  - [[#ps][ps]]
  - [[#logs][logs]]
  - [[#run][run]]
  - [[#exec][exec]]
  - [[#rm][rm]]
  - [[#kill][kill]]
  - [[#docker-composeyml][docker-compose.yml]]
  - [[#--env-file][--env-file]]
- [[#stopquitdetach][Stop/Quit/Detach]]
- [[#files][Files]]
  - [[#dockerignore][.dockerignore]]
  - [[#docker-entrypointsh][docker-entrypoint.sh]]
  - [[#dockerfile][Dockerfile]]
- [[#volumes][Volumes]]
- [[#images-registry][Images Registry]]
- [[#terms][Terms]]
- [[#best-practices][Best practices]]
- [[#multi-stages][Multi-stages]]
  - [[#eg][eg]]
- [[#podman][Podman]]
  - [[#docs][docs]]
  - [[#tricks][tricks]]
  - [[#fixes][fixes]]
- [[#docker][Docker]]
  - [[#fortschritt][Fortschritt]]
  - [[#dockerfile][Dockerfile]]
  - [[#traits][Traits]]
  - [[#commands][Commands]]
- [[#example][Example]]
- [[#tips][Tips]]
  - [[#remove][Remove]]
:END:
* Progresso
** books
| books                 | chapter                           | at |
|-----------------------+-----------------------------------+----|
| Mastering Docker      | 3 Storing and Distributing Images |    |
| Docker for Developers |                                   |    |
** sloc
| sloc   | @                 | file          | line |
|--------+-------------------+---------------+------|
| go     |                   |               |      |
| podman | cmd/podman/common | completion.go |      |

* Commands
** container
https://docs.docker.com/engine/reference/commandline/container/

*** ls
|    |                                                             |
|----+-------------------------------------------------------------|
| -h | display help                                                |
| -a | Show all the containers, default is only running containers |
| -q | containers ID                                               |
| -l |                                                             |
*** run
#+begin_src shell
podman container run --name test -it -v sample:/data alpine /bin/sh
docker run -p 3000:3000 railsapp
#+end_src
**** options
|                  |   |
|------------------+---|
| -v <NAME:/WHERE> |   |

*** exec
|    |                           |
|----+---------------------------|
| -i | run process interactively |
| -t | provide tty               |
| -e | define env vars           |
| -d | run as daemon             |
*** attach
|         |   |
|---------+---|
| <image> |   |
*** logs
|            |   |
|------------+---|
| --tail <N> |   |
| --follow   |   |

*** inspect
|               |   |
|---------------+---|
| ID            |   |
| -f / --filter |   |
*** diff
- A: added
- C: changed
- D: deleted

#+begin_src shell
podman container diff sample
#+end_src
*** commit
Create a new image from a container’s changes
** exec
** volume
*** create
**** options
|          |                                   |
|----------+-----------------------------------|
| --driver | select a different volume driver. |
|          |                                   |


*** inspect
** ps
|       |   |
|-------+---|
| --all |   |
** login
#+begin_src shell
docker login -u gnschenker -p <my secret password>
#+end_src
** images
** image
*** ls
*** pull
#+begin_src shell
docker image pull alpine
docker image pull alpine:3.5
#+end_src
*** build
|                     |   |
|---------------------+---|
| --file <dockerfile> |   |
| --tag <local:name>  |   |

#+begin_src shell
docker image build -t pinger .
#+end_src

*** history
Show the history of an image

|        |   |
|--------+---|
| <NAME> |   |
*** inspect
inspect --options  <ID>
**** -f
*** save
#+begin_src shell
podman image save -o ./backup/my-alpine.tar my-alpine
podman image load -i ./backup/my-alpine.tar
#+end_src
*** tag
#+begin_src shell
docker tag 7146a802571b railsapp
#+end_src
*** prune
** rm
|           |   |
|-----------+---|
| --storage |   |
** run
#+begin_src shell
docker run -it --rm --privileged --pid=host fundamentalsofdocker/nsenter
#+end_src


|               |                           |
|---------------+---------------------------|
| -d            | keep running in backgroun |
| --name <NAME> | set name                  |
| -p <ii:II>    | port                      |
| -i            | interactively             |
| -t            | tty                       |

*** options
|              |   |
|--------------+---|
| --pid=<HOST> |   |
| --privileged |   |
** start
** system
*** prune
** network
*** ls
* Compose Commands
** build
#+begin_src
#+end_src

** up
#+begin_src shell
docker-compose up
docker-compose up -d
#+end_src

*** options
**** -d
**** --force-recreate
** stop
** pause
** unpause
** restart
** ps
** logs
#+begin_src shell
docker-compose logs -f web
#+end_src
** run
#+begin_src shell
docker-compose run --rm web echo 'ran a different command'
#+end_src
** exec
- wont start a new container, avoids clean up additional containers or use the --rm option

#+begin_src shell
docker-compose exec web echo 'ran a different command'
#+end_src
** rm
** kill
** docker-compose.yml
** --env-file
#+begin_src shell
--env-file .env/development/web config
#+end_src
* Stop/Quit/Detach
|         |          |
|---------+----------|
| C-c     | stop all |
| C-p C-q | detach   |
| c-d     | kill     |

* Files
** .dockerignore
** docker-entrypoint.sh
** Dockerfile
*** FROM
|                       |                   |
|-----------------------+-------------------|
| scratch               | tart from scratch |
| <image-name> or <uri> |                   |
*** LABEL
add extra information to the image
*** MAINTAINER
*** RUN
*** COPY
*** ADD
ADD keyword also lets us copy and unpack TAR files, as well as providing a URL
as a source for the files and folders to copy.

- can change the ownership that the files

#+begin_src shell
ADD sample.tar /app/bin/
ADD http://example.com/sample.txt /data/
ADD --chown=11:22 ./data/web* /app/data/
#+end_src

*** WORKDIR
*** ENV
define env variables

#+begin_src dockerfile
ENV meh foo # only set one ENV per line
ENV meh=foo bar=posix # multiple environmental variables on the same line
#+end_src
*** EXPOSE
declare all ports that the application is listening on and that need to be
accessible from outside of the container
*** CMD
used to define the parameters of the program set in ENTRYPOINT

- executed only at the start of image run
- can be override with `-w`
#+begin_src shell
FROM alpine:3.10
ENTRYPOINT ["ping"]
CMD ["-c","3","8.8.8.8"]

podman container run -it --rm pinger -w 5 gnu.org

#+end_src
*** ENTRYPOINT
used to define the command of the expression

- executed only at the start of image run
- default value is `/bin/sh -c`

#+begin_src shell
FROM alpine:3.10
ENTRYPOINT ["ping"]
CMD ["-c","3","8.8.8.8"]

podman container run -it --rm --entrypoint bin/sh meh
#+end_src
* Volumes
* Images Registry
- https:/​/​cloud.​google.​com/​container-​registry
- https:/​/​aws.​amazon.​com/​ecr/​
- https:/​/​azure.​microsoft.​com/​en-​us/
- https:/​/​access.​redhat.​com/​containers/​
- https:/​/​jfrog.​com/​integration/​artifactory-docker-​registry/​
* Terms
- kernel namespace & cgropus
- noisy-neighbor problem
- common vulnerabilities and exposures (CVEs)
- content trust
- man-in-the-middle (MITM)
* Best practices
- should be ephemeral
- order individuals commands so to leverage caching as much as possible
- less layers by combining related commands, smaller images, faster builds and startup times
- use .dockerignore to keep image as lean as possible by not copy unnecessary files
- avoid installing unnecessary packages
- use multi-stages builds

* Multi-stages
** eg
#+begin_src shell
FROM alpine:3.7 AS build
RUN apk update && \
    apk add --update alpine-sdk
RUN mkdir /app
WORKDIR /app
COPY . /app
RUN mkdir bin
RUN gcc hello.c -o bin/hello

FROM alpine:3.7
COPY --from=build /app/bin/hello /app/hello
CMD /app/hello
#+end_src
* Podman
** docs
http://docs.podman.io/en/latest/index.html
** tricks
   - podman info | grep rootless
** fixes
*** "sudo -k -n podman version --format " exit status 1: sudo: a password is required
    Add your user to the 'sudoers' file: 'elxbarbosa ALL=(ALL) NOPASSWD: /usr/bin/podman'
*** user namespaces are not enabled in /proc/sys/kernel/unprivileged_userns_clone
    sudo sysctl -w kernel.unprivileged_userns_clone=1
* Docker
** Fortschritt
   |                       |                        |
   |-----------------------+------------------------|
   | Docker For Developers | Introduction to Docker |

** Dockerfile
** Traits
   - cgroups
   - use linux security primitives
   - prevent MITM attack
   - images are immutable
** Commands
   | command             | description                            |
   |---------------------+----------------------------------------|
   | login               |                                        |
   | container ls        |                                        |
   | images              |                                        |
   | pull <img>          |                                        |
   | ps                  |                                        |
   | run <img>           |                                        |
   | run -d <img>        |                                        |
   | run -dp 80:80 <img> |                                        |
   | stop <id>           |                                        |
   | rm $(docker ps -aq) | remove all images running              |
   | run --name <name>   |                                        |
   | run -rm             | clean up when the container exits      |
   | run -p              | port                                   |
   | exec -it            | run command in container interactively |
   |                     |                                        |
* Example
- Rails

#+begin_src ruby
apt-get libsqlite3-dev apt-utils autoconf bison build-essential g++  libgconf-2-4 libgdbm-dev libncurses5-dev libreadline-dev libreadline-dev libssl-dev libxi6 xvfb zip zlib1g-dev \
#+end_src

#+begin_src dockerfile
FROM ruby:2.7.5-slim-bullseye

RUN apt-get update -yqq && apt-get install -yqq apt-utils autoconf bison build-essential curl g++ gcc git libffi-dev libgconf-2-4 libgdbm-dev libncurses5-dev libreadline-dev libreadline-dev libsqlite3-dev libssl-dev libxi6 libyaml-dev make sqlite3 xvfb zip zlib1g-dev fish zile
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && apt-get install -y nodejs

COPY . /usr/src/app/
WORKDIR /usr/src/app

RUN npm install --global npm yarn@1.22.17
RUN gem install bundler:2.3.3 rails:6.1.4.4 && bin/setup && bin/rails webpacker:install

#+end_src

#+begin_src yaml
version: '3.8'

services:

  web:
    build: .
    ports:
      - "3000:3000"
#+end_src
RUN apt-get update -yqq && apt-get install -yqq postgresql postgresql-contrib libpq-dev
curl make gcc g++ git libffi-dev libyaml-dev
* Tips
** Remove
#+begin_src shell
# Stop all containers
docker stop `docker ps -qa`

# Remove all containers
docker rm `docker ps -qa`

# Remove all images
docker rmi -f `docker images -qa `

# Remove all volumes
docker volume rm $(docker volume ls -qf)

# Remove all networks
docker network rm `docker network ls -q`
#+end_src
