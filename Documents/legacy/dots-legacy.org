#+TITLE: Dots Legacy

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#irbrc][irbrc]]
- [[#blog][Blog]]
  - [[#css][css]]
  - [[#makec][Make(C)]]
- [[#neovim][neovim]]
- [[#asdf][asdf]]
- [[#fish][fish]]
- [[#zsh][zsh]]
- [[#shell-software][shell-software]]
- [[#shell-misc][shell-misc]]
- [[#shell-custom][shell-custom]]
- [[#nixos][Nixos]]
  - [[#config][Config]]
- [[#bin][bin]]
- [[#xsessionrc][.xsessionrc]]
- [[#xinitrc][.xinitrc]]
- [[#guix-config][Guix Config]]
- [[#e_packs][e_packs]]
- [[#e_distro][e_distro]]
- [[#nyxt][Nyxt]]
  - [[#config][Config]]
- [[#bashrc][bashrc]]
- [[#xserverrc][.xserverrc]]
- [[#sbcl][Sbcl]]
- [[#pypirc][.pypirc]]
- [[#gtk-30][gtk-3.0]]
- [[#fontconfig][fontconfig]]
- [[#pycodestyle][pycodestyle]]
- [[#flake][Flake]]
- [[#bashrc][Bashrc]]
- [[#tmux][Tmux]]
- [[#xprofile][.xprofile]]
- [[#autostart][autostart]]
- [[#make][Make]]
  - [[#template---base][Template - Base]]
- [[#suckless][Suckless]]
  - [[#st][st]]
  - [[#dmenu][Dmenu]]
:END:

* irbrc
   #+begin_src ruby


# IRB.conf[:IRB_RC] = nil
# IRB.conf[:BACK_TRACE_LIMIT]=16
# IRB.conf[:USE_LOADER] = false
# IRB.conf[:USE_MULTILINE] = nil
# IRB.conf[:USE_SINGLELINE] = nil
# IRB.conf[:USE_COLORIZE] = true
# IRB.conf[:USE_TRACER] = false
# IRB.conf[:IGNORE_SIGINT] = true
# IRB.conf[:IGNORE_EOF] = false
# IRB.conf[:PROMPT] = {...}
# IRB.conf[:SAVE_HISTORY] = nil
# IRB.conf[:INSPECT_MODE]=nil

   #+end_src
* Blog
** css
    #+begin_src css
    section[id] {

	// margin-top: 6rem;
	// min-height: 100vh;
    }


    nav {
	// position: fixed;
	// width: 100vw;
	// min-height: 12vh;
	// margin: 0 auto;
	// background:#EEE1C6;
    }


    #aboutme {
	ul { ul { display: flex;  }
	     li { list-style-type: none;
		  a { padding: .5rem 0 .5rem; color: $links; }}}
    }
    #+end_src
** Make(C)
    #+begin_src makefile
    CC = gcc
    CFLAGS = -Wall -Werror -std=c99
    LDFLAGS =
    PROJECT= aspnet
    SRC = $(PROJECT)/main.c
    DIST = dist
    SHELL = sh
    RM = rm -rf

    default:
	    @echo "make install		-- fresh install of package"
	    @echo "make all		-- clean previous install, build and run program"
	    @echo "make clean		-- clean non-essential files"
	    @echo "make build		-- compile and prepare program to run"

    all: clean build run

    clean:
	    $(RM) $(DIST)

    build:
	    mkdir $(DIST)
	    $(CC) -o $(DIST)/$(PROJECT) $(CFLAGS) $(SRC)

    run:
	    ./$(DIST)/$(PROJECT)
    #+end_src
* neovim
   #+begin_src vimrc
   " Termite True Colors
   " if &term=~'termite'
   "
   "     if has("termguicolors")
   "
   "         set termguicolors
   "         let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
   "         let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
   "
   "     endif
   "
   "     elseif &term=~'screen'
   "
   "         if has("termguicolors")
   "
   "             set termguicolors
   "             let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
   "             let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
   "
   "         endif
   "
   " endif
   "


   " "airlines themes
   " let g:airline_theme='zenburn'
   " let g:airline_powerline_fonts = 1

   " 256 colors
   " set t_ut=

   " if &term=~'rxvt-unicode-256color'
       "
       " if &term=~'screen-256color'
       "
       "     " set t_co=256
       "
       " endif
       "
   " endif

   #+end_src
* asdf
   #+begin_src shell-script
	 #!/usr/bin/env bash

	 # Information
	 # Repository: https://github.com/asdf-vm/asdf.git

	 # Debug Options
	 set -euo pipefail

	 export PATH="$HOME/.asdf/shims"${PATH:+:}$PATH

	 grab()
	 {
	     [[ -d "$HOME/.asdf" ]] && return

	     git clone https://github.com/asdf-vm/asdf.git "$HOME/.asdf"

	     cd "$HOME/.asdf"

	     git checkout "$(git describe --abbrev=0 --tags)"
	 }


	 # * RUN

	 grab

	 # * LOAD ASDF
	 source "$HOME/.asdf/completions/asdf.bash"
	 source "$HOME/.asdf/asdf.sh"

	 # * UPDATING ASDF
	 asdf update


      #!/usr/bin/env bash

      # * Debug Options
      set -euo pipefail

      # * Information
      # Dependencies: libunistring-dev libgc-dev

      # * Sourcing
      source "$HOME/.asdf/completions/asdf.bash"
      source "$HOME/.asdf/asdf.sh"

      LANG=guile
      REPOSITORY="https://github.com/indiebrain/asdf-guile.git"

      keys()
      {
	  gpg --keyserver keys.gnupg.net --recv-keys 4FD4D288D445934E0A14F9A5A8803732E4436885
      }

      add()
      {
	  [[ $(asdf list all $LANG) ]] && return

	  asdf plugin-add $LANG $REPOSITORY
      }

      install()
      {
	  asdf install $LANG latest
	  asdf global $LANG "$(asdf latest $LANG)"
      }

      # * Run

      echo "Installing ${LANG^}"

      keys
      add
      install


   # Sourcing
   source "$HOME/.asdf/completions/asdf.bash"
   source "$HOME/.asdf/asdf.sh"

   nodejs()
   {
       # https://github.com/asdf-vm/asdf-nodejs

       add()
       {
	   [[ -f "$HOME/.asdf/shims/node" ]] && return

	   asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git

	   bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'

       }

       install()
       {
	   local default=14.16.1
	   asdf install nodejs $default

	   asdf global nodejs $default
       }

       add
       install

   }

   yarn()
   {
       # https://github.com/asdf-vm/asdf-yarn

       add()
       {
	   [[ -f "$HOME/.asdf/shims/yarn" ]] && return

	   asdf plugin-add yarn

       }

       install()
       {
	   asdf install yarn latest
	   asdf global yarn "$(asdf latest yarn)"
       }

       add
       install
   }

   #!/usr/bin/env bash

   # Debug Options
   set -euo pipefailxo pipefail

   # Sourcing
   source "$HOME/.asdf/completions/asdf.bash"
   source "$HOME/.asdf/asdf.sh"

   # * Begin

   install()
   {
       # https://github.com/asdf_vm/asdf_ruby

       [[ -f "$HOME/.asdf/shims/psql" ]] && return

       echo 'Installing Postgresql binaries'

       # add plugin repo
       asdf plugin-add postgres

       # install versions
       asdf install postgres latest

       # global
       asdf global postgres "$(asdf latest postgres)"
   }


   # * RUN

   echo 'ASDF - PostgreSQL'

   install


#!/usr/bin/env bash

# Repository: https://github.com/asdf-vm/asdf-ruby.git

# Debug Options
set -euo pipefail

# * Sourcing
#source "$HOME/.asdf/completions/asdf.bash"
#source "$HOME/.asdf/asdf.sh"

add()
{
    [[ -f "$HOME/.asdf/shims/ruby" ]] && return

    asdf plugin-add ruby https://github.com/asdf-vm/asdf-ruby.git
}

install()
{
    local default=2.7.2
    asdf install ruby $default

    asdf global ruby $default
}



	    #!/usr/bin/env bash
		     #!/usr/bin/env bash

		     # set -e

		     source "$HOME/.asdf/completions/asdf.bash"
		     source "$HOME/.asdf/asdf.sh"

		     asdf_lua()
		     {
			 [[ -f "$HOME/.asdf/shims/lua" ]] && return

			 echo 'Installing Lua binaries'

			 asdf plugin-add lua https://github.com/Stratus3D/asdf-lua

			 asdf install lua latest

			 asdf global lua "$(asdf latest lua)"
		     }

		     packages()
		     {
			 echo 'Installing  packages'

			 local packages=()

			 for pack in "${packages[@]}"
			 do
			      install "${pack}" # --user-install
			      update  "${pack}"
			 done
		     }

		     # * RUN

		     echo 'Lua - ASDF'

		     asdf_lua
		     packages



		     # set -e

		     erlang()
		     {
			 # https://github.com/asdf-vm/asdf-erlang

			 [[ -f "$HOME/.asdf/shims/erl" ]] && return

			 echo 'Installing Erlang binaries'

			 asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git

			 asdf install erlang latest

			 asdf global erlang "$(asdf latest erlang)"
		     }

		     elixir()
		     {
			 # https://github.com/asdf_vm/asdf_elixir

			 [[ -f "$HOME/.asdf/shims/elixir" ]] && return

			 echo 'Installing Elixir binaries'

			 asdf plugin-add ruby https://github.com/asdf-vm/asdf-elixir.git

			 asdf install elixir latest

			 asdf global elixir "$(asdf latest elixir)"
		     }

		     # * Run
		     erlang
		     elixir

   #+end_src
* fish
   #+begin_src fish
   # ** RBENV
   # if type -q rbenv
   #     status --is-interactive; and rbenv init - | source
   # end

   # ** ASDF

   if test -e ~/.asdf/completions/asdf.fish
       cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions
   end

   #+end_src
* zsh
#+begin_src shell-script

# * ZPLUG

e-zplug-home()
{
    export ZPLUG_HOME="$HOME/.zplug"
    export ZSH_PLUGINS_ALIAS_TIPS_TEXT='ÔÅö alias hint: '
    export KEYTIMEOUT=1
}

e-zplug-get()
{
    [ -d $ZPLUG_HOME ] && return

    git clone https://github.com/zplug/zplug "$ZPLUG_HOME"
}

e-zplug-activate()
{
    source "$ZPLUG_HOME/init.zsh"
}

e-zplug-install-plugins() {
    zplug "zplug/zplug", hook-build:"zplug --self-manage"

    # prezto
    zplug "modules/tmux",       from:prezto
    # zplug "modules/history",    from:prezto
    zplug "modules/utility",    from:prezto
    zplug "modules/terminal",   from:prezto
    zplug "modules/editor",     from:prezto
    zplug "modules/directory",  from:prezto
    zplug "modules/completion", from:prezto

    # zsh users
    zplug "zsh-users/zsh-completions",              defer:0
    zplug "zsh-users/zsh-autosuggestions",          defer:2, on:"zsh-users/zsh-completions"
    zplug "zsh-users/zsh-syntax-highlighting",      defer:3, on:"zsh-users/zsh-autosuggestions"
    zplug "zsh-users/zsh-history-substring-search", defer:3, on:"zsh-users/zsh-syntax-highlighting"

    # Plugins from oh my zsh
    zplug "plugins/git", from:oh-my-zsh

    # misc
    zplug "b4b4r07/enhancd", use:init.sh
    zplug "jocelynmallon/zshmarks" # Bookmarks and jump
    zplug "supercrabtree/k" # Enhanced dir list with git features
    zplug "djui/alias-tips" # Tips for aliases
    zplug "felixr/docker-zsh-completion" # Docker completion
    zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

    # nix
    zplug "chisui/zsh-nix-shell"
    zplug "spwhitt/nix-zsh-completions"

    if ! zplug check; then # install plugins
	zplug install
    fi
}

e-zplug-check()
{
    if [ -f "$ZPLUG_HOME/init.zsh" ]; then
	return true
    else
	return false
    fi
}

e-zplug()
{
    e-zplug-home
    e-zplug-get
    e-zplug-activate
    e-zplug-install-plugins

    # foobar
    # zplug update
    zplug load

    e-zplug-check
}

#+end_src
* shell-software
   #+begin_src shell-script
   s-startx()
   {
       if [ -z "${DISPLAY}" ] && [ -n "${XDG_VTNR}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
	   exec startx
       fi
   }

   #+end_src
* shell-misc
   #+begin_src shell-script
   e_cli_tools()
   {
       local enhancd_dir="$HOME/Projects/Bash/enhancd/"
       [[ -d $enhancd_dir ]] && cd $enhancd_dir && source ./init.sh

      if [ -x "$(command -v rustup)" ]; then
	  source "${XDG_DATA_HOME}/bash-completion/completions/rustup"
	  # export RUSTUP_HOME="$XDG_CONFIG_HOME/rustup"
      fi
   }

   asdf_python()
   {
       echo 'Installing python binaries'

       # https://github.com/danhper/asdf_python

       asdf plugin-add python

       asdf install python latest

       asdf global python "$(asdf latest python)"
   }


   python()
   {
       echo 'Installing pip packages'

       local packages=(pip ansible wheel setuptools blackyoutube-dl python-language-server
		       pyls-black pyls-isort pyls-mypy jedi ipython pylama
		       pyflakes flake8-import-order pydocstyle flake8 mccabe yapf
		       pylint rope pytest pep8-naming mutagen)

       for pack in "${packages[@]}"
       do
	   python3 -m pip install --upgrade --user "${pack}"
       done
   }


   e_basher()
   {
       local basher_dir="$HOME/.basher"

       [[ "$1" == 'upgrade' ]] && git -C "$HOME/.config/basher" pull

       [[ ! -d "$basher_dir/.git" ]] && git clone https://github.com/basherpm/basher "$basher_dir"

       # add Basher Bin folder to $PATH
       export PATH="$basher_dir/bin"${PATH:+:}${PATH}

       # load basher
       eval "$(basher init - bash)"
   }
   #+end_src
* shell-custom
   #+begin_src shell-script

#!/usr/bin/env bash

# Debug Options
set -euo pipefail

FOLDER="$HOME/bin"
mkdir -pv $FOLDER

BINARIES=("https://raw.githubusercontent.com/dylanaraps/pfetch/master/pfetch")

COMMAND="wget -c -P $FOLDER"
e_dolist "$COMMAND" "${BINARIES[@]}"

   #!/usr/bin/env bash

      packages()
      {
	  echo 'Installing packages'

	  # local packages=()

	  # for pack in "${packages[@]}"
	  # do
	  # done
      }

      # * RUN

      echo 'Elixir - ASDF'

      asdf_erlang
      asdf_elixir
      packages



      # set -e

      source "$HOME/.asdf/completions/asdf.bash"
      source "$HOME/.asdf/asdf.sh"

      asdf_lisp()
      {
	  # https://github.com/asdf_vm/asdf_elixir

	  [[ -f "$HOME/.asdf/shims/elixir" ]] && return


	  echo 'Installing Elixir binaries'
	  asdf plugin-add sbcl https://github.com/smashedtoatoms/asdf-sbcl.git

	  asdf install sbcl latest

	  asdf global sbcl "$(asdf latest sbcl)"
      }

      asdf_sbcl()
      {
	  # https://github.com/asdf-vm/asdf-erlang
	  a-welcome "Building: SBCL"

	  echo " -- Cleaning"
	  rm -rf "$HOME_LOCAL_LIB/sbcl"
	  rm -rf "$HOME_LOCAL_BIN/sbcl"
	  rm -rf "$XDG_DATA_HOME/doc/sbcl"

	  a-clone git://git.code.sf.net/p/sbcl/sbcl "$PROJECTS/lisp/sbcl"

	  a-cd "$PROJECTS/lisp/sbcl"
	  git reset --hard
	  git clean -fdx
	  git pull

	  export -n SBCL_HOME

	  echo " -- Comping SBCL"
	  sh make.sh --fancy --prefix="$HOME_LOCAL"
	  INSTALL_ROOT="$HOME_LOCAL" sh install.sh

	  export SBCL_HOME="$HOME_LOCAL_LIB/sbcl"

	  a-sucess "Done"
      }

      packages()
      {
	  echo 'Installing packages'

	  # local packages=()

	  # for pack in "${packages[@]}"
	  # do
	  # done
      }

      # * RUN

      echo 'Elixir - ASDF'

      asdf_lisp
      packages



      e_path_rust()
      {
	  export PATH="${HOME}/.cargo/bin":${PATH}
      }

      e_path_rbenv()
      {
	  local rbenv_dir="$HOME/.rbenv"

	  local rbenv_shims="$rbenv_dir/shims"
	  local rbenv_bin="$rbenv_dir/bin"

	  export PATH="$rbenv_bin"${PATH:+:}$PATH
	  export PATH="$rbenv_shims"${PATH:+:}$PATH
      }

      e-packs-cargo()
      {
	  echo 'Installing cargo packages'

	  local packages=(starship alacritty)

	  for pack in "${packages[@]}"
	  do
	      cargo install "$pack"
	  done
      }

      e-packs-rustup()
      {
	  # rls needs toolchain to work
	  rustup component add rls --toolchain stable-x86_64-unknown-linux-gnu
      }

      e-packs-rbenv()
      {
	  export RBENV_DIR="$HOME/.rbenv"
	  export RUBY_BUILD_DIR="$RBENV_DIR/plugins/ruby-build"
	  export RUBY_SHIMS_DIR="$RBENV_DIR/shims"

	  local rbenv_binary="$HOME/.rbenv/bin/rbenv"

	  export PATH="$RUBY_SHIMS_DIR"${PATH:+:}$PATH

	  [[ ! -x "$RBENV_DIR/bin" ]] && git clone https://github.com/rbenv/rbenv.git "$RBENV_DIR"

	  # Set up rbenv in your shell.
	  $rbenv_binary init

	  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

	  [[ ! -x "$RUBY_BUILD_DIR" ]] && git clone https://github.com/rbenv/ruby-build "$RUBY_BUILD_DIR"
	  [[ ! -x "$RUBY_BUILD_DIR" ]] && git -C "$RUBY_BUILD_DIR" pull

	  # compile dynamic bash extension
	  cd "$RBENV_DIR" && src/configure && make -C src

	  local version=2.7.2
	  $rbenv_binary install $version
	  $rbenv_binary global $version && rbenv rehash
      }

      e-packs-asdf-elixir()
      {
	  echo 'Installing elixir binaries'

	  # https://github.com/asdf-vm/asdf-erlang
	  # https://github.com/asdf-vm/asdf-elixir

	  asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
	  asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git

	  asdf install erlang latest
	  asdf install elixir latest

	  asdf global "$(asdf latest erlang)"
	  asdf global "$(asdf latest elixir)"
      }

      e-packs-rvm()
      {
	  gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB

	  curl -sSL https://get.rvm.io | bash -s stable

	  source "$HOME/.rvm/scripts/rvm"

	  rvm get stable
      }


      e_path_nvm()
      {
	  local nvm_dir="$HOME/.config/nvm"

	  [ -s "$nvm_dir/nvm.sh" ] && source "$nvm_dir/nvm.sh"  # Loads NVM
	  [ -s "$nvm_dir/bash_completion" ] && source "$nvm_dir/bash_completion"  # Loads NVM Bash Completion

	  local nvm_bin="$(nvm_version_dir)/$(nvm_version)/bin"
	  export PATH="$nvm_bin"${PATH:+:}$PATH
      }

      rust=(pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3)

      e-packs-nvm()
      {
	  local nvm_dir="$HOME/.config/nvm"

	  if [[ ! -d ${nvm_dir} ]]; then
	      git clone https://github.com/nvm-sh/nvm.git ${nvm_dir}
	  else
	      cd ${nvm_dir} && git pull
	  fi

	  source ${nvm_dir}/nvm.sh

	  nvm install node
      }

      e-packs-flatpak()
      {
	  echo 'Installing flatpak packages'

	  local packages=(com.spotify.Client com.valvesoftware.Steam com.visualstudio.code com.skype.Client)

	  for pack in "${packages[@]}"
	  do
	      flatpak install flathub "${pack}"
	  done
      }

      e_path_luarocks()
      {
	  export PATH="$HOME/.luarocks/bin"${PATH:+:}$PATH
      }

      e-debian()
      {

	  elixir=(build-essential autoconf m4 libncurses5-dev
		  libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev
		  libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev
		  openjdk-11-jdk)

      }
      e-ubuntu()
      {
	  sudo systemctl set-default multi-user.target
	  xorg=(xorg x11-apps xinit xdotool dbus-x11 xserver-xorg-input-synaptics xserver-xorg-input-libinput xserver-xorg-input-kbd awesome)

	  util-linux alsa-utils network-manager stterm
	  lua5.4 luarocks lua-check
	  gnome-keyring
	  ssh-askpass-gnome
	  network-manager-gnome

	  wm_packages=(rofi aria2 socat dunst udiskie unclutter scrot libnotify-bin seahorse gconf2 ranger w3m highlight odt2txt lynx mediainfo xautolock caca-utils x11proto-dev libfile-mimeinfo-perl dmenu xdg-utils mpd mpc ncmpc ncmpcpp mpv screenkey brightnessctl tlp acpi-call)

	  firewalld firewall-config firewall-applet
      }


      # Findfile and find content
      # f() { find . -iname "*$1*" $(@:2)}
      # r() { grep "$1" $(@:2)} -R . }

      function yarn {
	  # Non-debian repositories
	  if [ ! $(command -v yarn) ]; then
	      cd ${HOME}

	      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
	      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

	      sudo apt update
	      sudo apt -y install yarn
	  fi
      }

      elx-dotnet ()
      {
	  local packages=("PowerShell" "dotnet-aspnet-codegenerator" "dotnet-script")

	  # iunstall
	  for pack in "${packages[@]}"
	  do
	      dotnet tool update --global "${pack}"
	  done

	  # update
	  for pack in "${packages[@]}"
		      f    do
		      dotnet tool install --global "${pack}"
		   done
      }


      elx-cabal()
      {
	  cabal update

	  local packages=(hlint xmonad xmonad-contrib)

	  for pack in "${packages[@]}"
	  do
	      cabal new-install --lib --upgrade "$pack" --user
	  done
      }


      debian(){
	  mpd mpc ncmpc ncmpcpp

	  # rvm
	  sudo apt install -y bison libgdbm-dev libncurses5-dev libyaml-dev libreadline6-dev

	  if [ ! -x "$(command -v mono)" ]; then
	      sudo apt install -y apt-transport-https dirmngr gnupg ca-certificates
	      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
	      echo "deb https://download.mono-project.com/repo/debian stable-buster main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list

	      sudo apt update
	      sudo apt install -y -t stable-buster mono-complete
	  fi
	  xmonad libghc-xmonad-dev \
		 libghc-xmonad-contrib-dev yabar xmobar
	  if [ ! -x "$(command -v monodevelop)" ]; then
	      sudo apt install -y apt-transport-https dirmngr
	      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
	      echo "deb https://download.mono-project.com/repo/debian vs-buster main" | sudo echo tee /etc/apt/sources.list.d/mono-official-vs.list

	      sudo apt update
	      sudo apt install -y monodevelop
	  fi

	  if [ ! -x "$(command -v dotnet)" ]; then
	      wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
	      sudo dpkg -i packages-microsoft-prod.deb

	      sudo apt update
	      sudo apt install -y dotnet-sdk-3.1
	  fi

	  # xmonad
	  sudo apt install libmagic-dev

	  # Kitty
	  sudo apt install -y libdbus-1-dev libxcursor-dev libxrandr-dev libxi-dev libxinerama-dev libgl1-mesa-dev libxkbcommon-x11-dev libfontconfig-dev and libpython-dev

	  ranger w3m highlight odt2txt lynx mediainfo xautolock \
		 caca-utils
	  # clang/llvm
	  sudo apt install -y libclang-8-dev llvm-dev
	  sudo apt install -y libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
	       libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev \
	       libffi-dev liblzma-dev python-openssl

	  xmonad libghc-xmonad-dev libghc-xmonad-contrib-dev \
		 cabal-install xmobar

	  i3 i3lock i3blocks sway swaylock

	  # python3
	  sudo apt -y build-dep python3
	  # python package deps
	  $install libgirepository1.0-dev libvirt-dev libsmbclient-dev \
		   libcups2-dev libxslt1-dev libsdl1.2-dev
	  # Lisp
	  $install libfixposix-dev
	  # ghcup
	  $install build-essential curl libffi-dev libffi6 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5
	  # xmonad/cabal
	  $install libxss-dev


	  nim
	  sudo apt install -y xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev \
	       libgif-dev libtiff-dev
	  sudo apt install -y libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev \
	       libxml2-dev # emacs bulding dependencies

	  clangd clang-format
	  libvirt-clients libvirt-daemon-system libvirt-dev libvirt0 virt-manager
	  postgresql  postgresql-client postgresql-doc   pgadmin3 phppgadmin
	  epiphany-browser
	  # FLOSS Projects
	  sudo apt install -y libevent-dev
	  # emacs vterm
	  sudo apt install -y libvterm-bin libvterm-dev
	  sudo apt install -y libwwwbrowser-perl libnotify-bin libarchive-tools
	  sudo apt install -y libqt4-dev libcrypto++-dev libsqlite3-dev libc-ares-dev \
	       libcurl4-openssl-dev
	  sudo apt install -y libssl-dev libedit-dev libclang-7-dev

	  # nEXT
	  sudo apt install -y sbcl libwebkit2gtk-4.0-dev glib-networking sqlite \
	       gsettings-desktop-schemas libfixposix-dev libgstreamer1.0-0 \
	       gir1.2-gst-plugins-base-1.0 xclip notify-osd


	  if [ ! -x "$(command -v composer)" ]; then
	      cd "$HOME/bin/" || "$HOME/bin/" && cd "$HOME/bin/" || exit

	      EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)"
	      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
	      ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

	      if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
	      then
		  >&2 echo 'ERROR: Invalid installer signature'
		  rm composer-setup.php
		  exit 1
	      fi

	      php composer-setup.php --quiet
	      RESULT=$?
	      rm composer-setup.php
	      exit $RESULT
	  fi
      }

      ubuntu(){
	  sudo apt install -y libwwwbrowser-perl libnotify-bin libarchive-tools
	  sudo apt install -y libqt4-dev libcrypto++-dev libsqlite3-dev libc-ares-dev \
	       libcurl4-openssl-dev
	  sudo apt install -y libssl-dev libedit-dev libclang-7-dev
	  sudo apt install -y xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev \
	       libgif-dev libtiff-dev
	  sudo apt install -y libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev \
	       libxml2-dev # emacs bulding dependencies
	  sudo apt install -y libpng-dev zlib1g-dev libpoppler-glib-dev \
	       libpoppler-private-dev # pdf-tools
	  sudo apt install -y ghostscript mupdf-tools poppler-utils texlive-binaries \
	       unoconv djvulibre-bin ncurses-dev # libreoffice-common
	  sudo apt install -y texlive-latex-base texlive-fonts-recommended \
	       texlive-latex-extra # texlive-rotating texlive-capt-of
	  sudo apt install -y uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev \
	       libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config \
	       libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync

	  # python deps
	  sudo apt install -y libgirepository1.0-dev libvirt-dev libsmbclient-dev \
	       libcups2-dev libxslt1-dev libsdl1.2-dev
	  # clang/llvm
	  sudo apt install -y libclang-8-dev llvm-dev
	  sudo apt install -y  libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
	       libsqlite3-dev  libncurses5-dev libncursesw5-dev xz-utils tk-dev \
	       libffi-dev liblzma-dev python-openssl

      }


      apt()
      {
      }

      arch(){
	  # echo  " -- Plasma"
	  # sudo pacman -S --noconfirm xorg xorg-apps plasma-meta kde-applications-meta \
	      #      plasma-wayland-session
      }

      elx-guixsd () {
	  echo "GuixSD: Install"

	  echo "-- Free Software Foundation"
	  guix package -i zile wget stow screen gimp bash parted emacs gcc-toolchain \
	       gdb automake gettext texinfo recutils patch make autoconf gnutls # info

	  echo "-- System packages"
	  guix package -i p7zip zip unzip util-linux alsa-utils network-manager \
	       font-hack font-dejavu vim

	  echo "-- System Tools"
	  guix package -i lshw usbutils lsof time net-tools iproute2 curl rsync \
	       dbus pkg-config zlib acl alsa-lib librsvg libotf libice giflib libxpm \
	       m17n-lib libxinerama libtool # gtk+ graphviz help2man # Guix deps

	  echo "-- X.org"
	  # guix package -i xauth xorg-server xinit setxkbmap xsetroot xautolock \
	      # xf86-input-synaptics xf86-input-libinput xhost  xdg-utils xdg-user-dirs

	  echo "-- Window Managers"
	  guix package -i stumpwm awesome

	  echo "-- Window Managers Tools"
	  guix package -i icecat sbcl-next scrot slock aria2 network-manager-applet \
	       udiskie st polkit-gnome cheese dmenu lm-sensors aspell aspell-dict-en \
	       syncthing perl-file-mimeinfo mpv youtube-dl imagemagick ghc-pandoc \
	       inkscape gconf obs ranger w3m highlight lynx mediainfo libcaca \
	       font-adobe-source-han-sans libreoffice calibre kdeconnect
	  # mupdf ghostscript xdg-utils screenkey xdotool

	  echo '-- Codecs'
	  guix package -i ffmpeg pulseaudio vorbis-tools gstreamer gst-plugins-good \
	       gst-plugins-ugly gst-plugins-bad gst-libav gst-plugins-base gst123

	  echo "-- Programming Languages"
	  guix package -i sbcl clisp \
	       python-pip  \
	       shellcheck zenity bash-completion \
	       clang cmake m4 libtool

	  echo "-- Dependencies"
	  guix package -i alsa-lib acl libpng zlib librsvg libsm libxpm m17n-lib \
	       libotf libjpeg
	  guix package -i giflib libpng libxft libtiff libx11 libxml2 libsm ncurses \
	       libice gtk+ gnutls # emacs
	  guix package -i cairo emacs-minimal emacs-tablist glib libpng pkg-config \
	       poppler zlib # emacs pdf-tools
	  guix package -i webkitgtk openssl gsettings-desktop-schemas \
	       glib-networking # next
	  guix package -i libfixposix # stumpwm-module:dbus

	  echo "-- Emulators & Virtualization"
	  guix package -i qemu virt-manager ovmf libvirt wine

	  echo "-- Development tools"
	  guix package -i tree git xsel xclip fontconfig freetype subversion bc \
	       perl # exuberant-ctags
	  guix package -i htop strace ltrace openssh cpio lzop atool wmctrl poppler \
	       perf sqlite texlive-latex-pdfx

	  echo "-- Security tools"
	  guix package -i tcpdump

	  echo 'Laptop tool & Wifi'
	  guix package -i iw wireless-tools acpi

	  echo "Done"
      }

      elx-guixbin () {

	  echo "-- TOOLS: Guix Packages"
	  if [ ! -x "$(command -v guix)" ]; then

	      echo "-- Guix: Installing"
	      cd "$HOME" || echo "hmm?"

	      echo "-- Authorizing Guix GPG Key"
	      sudo gpg --keyserver pool.sks-keyservers.net \
		   --recv-keys 3CE464558A84FDC69DB40CFB090B11993D9AEBB5

	      echo "-- Downloading Guix Installer"
	      wget -c https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh

	      sudo bash "$HOME"/guix-install.sh

	      echo "-- Setting Guix Root User"
	      sudo guix pull && sudo guix package -u
	      sudo guix package -i glibc-locales

	      echo "-- Cleaning"
	      rm "$HOME/guix-install.sh"
	  fi

	  echo "-- Setting Guix User"
	  guix pull && guix package -u
	  guix package -i glibc-locales gs-fonts font-gnu-freefont-ttf font-dejavu

	  echo "-- Done"
      }

      elx-freebsd () {
	  echo "-- af - Installing System Packages"

	  echo "-- Updating System"
	  sudo freebsd-update fetch
	  sudo freebsd-update install

	  sudo pkg update
	  sudo pkg upgrade

	  # change default shell
	  sudo pw usermod "$USER" -s /usr/local/bin/zsh

	  echo "-- Essential System packages"
	  sudo pkg install -y git p7zip  zip unzip neovim zsh
	  #  alsa-utils network-manager fonts-dejavu

	  echo "-- System Toolings"
	  sudo pkg install -y dmidecode usbutils lsof curl  entr tree git xsel-conrad\
	       xclip ctags fontconfig  freetype subversion htop ltrace lhasa  lzop \
	       atool wmctrl poppler-utils mercurial jq  ncdu ripgrep nnn fzf fzy \
	       rsync bat rclone tmux fish pv  zile wget stow screen gimp bash  gcc \
	       gdb guile guile-lib  autoconf automake gnutls  parallel emacs
	  # net-tools iproute2 console-data  info parted texffinfo build-essential gdbserver wget2

	  echo "-- Programming Languages"
	  sudo pkg install -y nim sbcl ruby postgresql12-client sqlite3 \
	       hs-ShellCheck zenity bash-completion cmake m4 libtool
	  # python3-venv clangd lldb

	  echo  "-- Desktop Environments Software"
	  sudo pkg install -y chromium firefox xdg-utils screenfetch \
	       aspell syncthing p5-File-MimeInfo obs-studio ImageMagick7 hs-pandoc \
	       en_GB-libreoffice br-libreoffice calibre inkscape gconf2 w3m highlight \
	       odt2txt lynx  mediainfo droid-fonts-ttf ko-nanumfonts-ttf mpv \
	       kdeconnect-kde kdenlive cheese ctorrent thunderbird
	  # lm-sensors caca-utils x11proto-deve screenkey fonts-nanum

	  echo "-- Windows Manager Software"
	  sudo pkg install -y dwm awesome dmenu xorg xdotool xautolock \
	       xf86-video-intel xf86-input-synaptics xf86-input-libinput libinput \
	       dbus xf86-input-keyboard rofi aria2 socat dunst OpenSSH-askpass \
	       automount automounter unclutter cmus scrot maim libnotify seahorse
	  # stterm network-manager-gnome  gthumb kitty

	  echo "-- Emulators & Virtualization"
	  sudo pkg install -y qemu qemu-utils virt-manager wine winetricks
	  # qemu-system-x86 qemu-system-gui qemu-kvm  ovmf libvirt-clients libvirt-daemon-system libvirt-dev libvirt0 virt-manager uefi-edk2-qemu

	  echo ' -- Codecs'
	  sudo pkg install -y ffmpeg pulseaudio  vorbis-tools \
	       gstreamer1-plugins-bad gstreamer1-plugins-good \
	       gstreamer-plugins-ugly
	  # pulseaudio-utils

	  echo "-- Final preparations: clean & tidy up system"
	  sudo pkg -y autoremove

	  echo "Done"
      }

      elx-arch () {
	  echo  "-- Arch - Installing System Packages"

	  echo "-- Updating System"
	  sudo pacman -Syu

	  echo  "-- Essential System packages"
	  sudo pacman -S --noconfirm git p7zip zip unzip util-linux alsa-utils \
	       networkmanager neovim kitty

	  echo  "-- System Tools"
	  sudo pacman -S --noconfirm lshw at usbutils lsof time net-tools iproute2 \
	       curl entr tree git xsel xclip ctags fontconfig  freetype2 subversion \
	       bc htop  strace ltrace openssh cpio lhasa lzop atool wmctrl poppler \
	       perf mercurial sysstat jq dialog ncdu ripgrep nnn fzf fzy rsync bat \
	       rclone xonsh tmux fish pv zile wget stow screen gimp bash parted \
	       texinfo gcc gdb guile make autoconf automake gnutls parallel emacs \
	       zsh code
	  # console-data wget2 gdbserver locate brz

	  echo "-- Fonts"
	  sudo pacman -S --noconfirm otf-ipafont ttf-baekmuk ttf-dejavu \
	       noto-fonts-emoji

	  echo  "-- Programming Languages"
	  sudo pacman -S --noconfirm npm nodejs sbcl clisp ruby nim crystal shards \
	       lua luarocks postgresql sqlite3 shellcheck zenity bash-completion \
	       clang lldb cmake automake m4 libtool

	  echo  " --Desktop Enviroment Software"
	  sudo pacman -S --noconfirm chromium firefox xdg-utils screenfetch lm_sensors \
	       aspell aspell-en syncthing perl-file-mimeinfo obs-studio imagemagick \
	       inkscape mpv calibre thunderbird kdeconnect cheese syncthing-gtk \
	       discord deluge lxappearance moka-icon-theme

	  echo  "-- Windows Manager Software"
	  sudo pacman -S --noconfirm xorg xorg-apps xorg-xinit  \
	       xorg-xsetroot xautolock xf86-input-synaptics \
	       xf86-input-libinput xdotool xorg-xhost xf86-video-intel \
	       dunst scrot slock xdotool udiskie aria2 polkit \
	       xdg-utils feh xautolock openssh-askpass xorg-xset \
	       xorg-xbacklight dmenu kitty alacritty pulseaudio acpi ttf-dejavu \
	       unclutter maim pacman-contrib network-manager-applet pandoc \
	       ranger w3m highlight odt2txt lynx mediainfo libcaca  \
	       cmus mate-power-manager xorg-setxkbmap pkgconf

	  echo  "-- Emulators & Virtualization"
	  sudo pacman -S --noconfirm qemu wine ovmf libvirt

	  echo  ' -- Codecs'
	  sudo pacman -S --noconfirm ffmpeg pulseaudio vorbis-tools \
	       gstreamer gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good \
	       gst-plugins-ugly pamixer

	  echo  ' -- Dependencies'
	  # next
	  sudo pacman -S --noconfirm  webkit2gtk
	  # python
	  sudo pacman -S --noconfirm bzip2 expat gdbm libffi libnsl openssl zlib mpdecimal \
	       sqlite tk xz bluez-libs gdb llvm mpdecimal valgrind xorg-server-xvfb
	  # qtile
	  sudo pacman -S --noconfirm  gobject-introspection

	  echo  "-- Security tools"
	  sudo pacman -S --noconfirm tcpdump

	  if [[ ! -x $(command -v erlang) ]]; then
	      cd ${HOME}

	      local binary=erlang-solutions_2.0_all.deb
	      [[ ! -e ${HOME}"/${binary}" ]] && wget https://packages.erlang-solutions.com/${binary}

	      sudo apt install "${HOME}/${binary}"
	      sudo apt update
	      sudo apt install esl-erlang elixir
	  fi

	  echo  "-- DONE"
      }

      elx-guixsd ()
      {
	  a-welcome " -- GuixSD - Reconfiguring System!"
	  sudo guix pull
	  sudo guix system reconfigure "$1"
      }

      elx-stumpwm ()
      {
	  a-welcome " -- Building: STUMPWM"

	  a-clone https://github.com/stumpwm/stumpwm \
		  "$HOME/Projects/lisp/stumpwm"
	  a-clone https://github.com/stumpwm/stumpwm-contrib \
		  "$HOME/Projects/lisp/stumpwm-contrib"

	  a-cd "$PROJECTS/lisp/stumpwm"

	  echo " -- Cleaning Project"
	  if [[ -e ./Makefile ]]; then
	      make uninstall
	      make clean
	      git clean -fdx
	  fi

	  echo "Installing"
	  autoconf
	  ./configure --prefix=$HOME_LOCAL
	  make && make install

	  a-sucess " -- Done"
      }

      elx-clisp ()
      {
	  a-welcome "Building: $TITLE"

	  echo " -- Cleaning directory"
	  PREFIX="$HOME_LOCAL" make distclean && git clean -fdx

	  a-clone https://gitlab.com/gnu-clisp/clisp "$PROJECTS/lisp/clisp"

	  a-cd "$PROJECTS/lisp/clisp"
	  git pull

	  echo " -- Comping CLISP"
	  sh configure --prefix=$HOME_LOCAL
	  PREFIX="$HOME_LOCAL" make
	  PREFIX="$HOME_LOCAL" make install

	  a-sucess "Done"
      }

      elx-ccls ()
      {
	  echo " -- Building CCLS"
	  git clone --depth=1 --recursive https://github.com/MaskRay/ccls \
	      "$HOME/.local/ccls"

	  (cd "$HOME/.local/ccls" || echo "No $_ folder"
	   cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release
	   cmake --build Release)

	  ln -sf "$HOME/.local/ccls/Release/ccls" "$HOME/.local/bin/ccls"

	  echo -e " -- Done"
      }

      elx-emacs ()
      {
	  a-welcome "Building Emacs"

	  if [[ ! -d "$PROJECTS/lisp/emacs" ]]; then
	      echo " -- Cloning"
	      a-clone https://git.savannah.gnu.org/git/emacs "$PROJECTS/lisp/emacs"
	  fi

	  a-cd "$PROJECTS/lisp/emacs"

	  echo " -- Preparing Project files"
	  make bootstrap

	  echo " -- Stable release, please!"
	  git checkout master

	  echo " -- Pulling latest changes"
	  git pull

	  echo " -- Generate configure file and Emacs scripts"
	  sh autogen.sh

	  echo " -- Configuring Emacs"
	  ./configure --prefix=$HOME_LOCAL \
	   --with-modules \
	   --with-xwidgets \
	   --with-gif \
	   --with-jpeg \
	   --with-png \
	   --with-rsvg \
	   --with-tiff \
	   --with-xft \
	   --with-xpm \
	   --with-x \
	   --with-dbus \
	   --with-json \
	   --with-imagemagick \
	   --with-jansson \
	   --with-multicolor-fonts \
	   --with-x-toolkit=gtk3 \
	   --with-mailutils \
	   --with-gnutls

	  echo " -- -- Deploying binaries"
	  make -j2
	  make install

	  a-sucess "DONE"
      }

      elx-st ()
      {
	  if [ ! -d "$XDG_CONFIG_HOME/st/.git" ]; then
	      echo -e " -- Cloning dwm to $XDG_CONFIG_HOME"
	      git clone https://git.suckless.org/st "$XDG_CONFIG_HOME/st"
	  fi

	  echo " -- Copying config.def.h"
	  python3 "$ALL/init.py"

	  cd "$XDG_CONFIG_HOME/st" || echo "There is no $_"

	  echo "cleaning"
	  rm config.h

	  echo "installing"
	  make PREFIX="$HOME_LOCAL" clean install

	  a-sucess "DONE"
	  echo -e " -- Done"
      }

      elx-next ()
      {
	  a-welcome "Building: NEXT"

	  echo "Cloning"
	  a-clone https://github.com/atlas-engineer/next "$HOME/Projects/lisp/next"
	  a-cd "$PROJECTS/lisp/next"

	  echo "Cleaning"
	  git clean -fdx
	  git pull
	  make clean-all

	  echo "Installing"
	  make all PREFIX="$HOME_LOCAL"
	  make install PREFIX="$HOME_LOCAL"

	  a-sucess "DONE"
      }

      elx-cpython ()
      {
	  a-welcome "Building: CPYTHON"

	  echo "Cloning"
	  a-clone https://github.com/python/cpython "$HOME/Projects/python/cpython"
	  a-cd "$HOME/Projects/python/cpython"

	  echo " -- Cleaning Project"
	  [[ -e ./Makefile ]] && make clean
	  git clean -fdx
	  git pull
	  git checkout 3.8

	  echo " -- Installing Project"
	  sh configure --enable-optimizations --with-lto --prefix="$HOME_LOCAL"
	  make -s
	  make -j2 install

	  a-sucess "DONE"
      }

      elx-dwm ()
      {
	  (if [ ! -d "$XDG_CONFIG_HOME/dwm/.git" ]; then
	       rm -rf "$XDG_CONFIG_HOME/dwm" || "Okay, proceed."

	       echo -e " -- Cloning dwm to $XDG_CONFIG_HOME"
	       git clone https://git.suckless.org/dwm "$XDG_CONFIG_HOME/dwm"

	       cd "$XDG_CONFIG_HOME/dwm" || echo "There is no $_"

	       git checkout 6.2
	   fi)

	  (echo -e " -- Overwriting config.def.h with my custom one."
	   python3 "$ALL/a_init")

	  echo -e " -- Installing dwm"
	  cd "$XDG_CONFIG_HOME/dwm" || echo "There is no $_"

	  rm config.h
	  make PREFIX="$HOME_LOCAL" config.h clean install

	  echo -e " -- Done"
      }

      elx-rider()
      {
	  cd ${BINARIOS} || mkdir ${BINARIOS}

	  local rider=https://download.jetbrains.com/rider/
	  local link=JetBrains.Rider-2020.1.4.tar.gz?_ga=2.49354848.731073982.1596379847-463458703.1596379846

	  wget ${rider}/${link}
	  tar zxvf ${BINARIOS}/JetBrains.Rider-*.tar.gz

	  ln -sf ${BINARIOS}/Rider/bin/rider.sh ~/bin/rider
      }

      elx-inicia()
      {
	  # Home
	  [[ ! -d $HOME/Livros ]] && elx-home
	  [[ ! -d $HOME/.config/emacs ]] && elx-dotfiles
	  [[ ! -e $HOME/.local/share/fonts/JetBrainsMono-Regular.ttf ]] && elx-fonts
	  [[ ! -e $HOME/.ssh/id_rsa.pub ]] && elx-ssh
	  [[ ! -e $HOME/bin/liquidprompt ]] && elx-binaries

	  # Dependencies
	  [[ ! -x $HOME/bin/cero ]] && elx-cero

	  # Windows Manager
	  cero project sbcl
	  [[ ! -d $HOME/quicklisp ]] && elx-quicklisp
	  [[ ! -x $HOME/.local/bin/stumpwm ]] && cero project stumpwm

	  # Custom Builds
	  [[ ! -x $HOME/.local/bin/emacs ]] && cero project emacs
      }

      elx-suspende ()
      {
	  echo "Suspending system in $1 ..."
	  sleep "$1" && systemctl suspend
      }

      elx-lar()
      {
	  root=(data more)

	  for main in "${root[@]}"; do
	      dirlist=(`ls /$main`)

	      for dir in "${dirlist[@]}"; do
		  [[ "$dir" == "lost+found" ]] && continue
		  # TODO: check if folder exist before symlinking
		  echo "/$main/$dir --> $HOME/$dir"
		  ln -sf "/$main/$dir" "$HOME/$dir"
	      done
	  done
      }

      elx-atualiza ()
      {
	  elx-cero
	  cero distro update; cero distro upgrade;
	  elx-vscode
	  cero operation oss clone
      }


      elx-vscode()
      {
	  if [ ! -x "$(command -v code)" ]; then
	      curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
	      sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
	      sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

	      sudo apt-get install apt-transport-https
	      sudo apt-get update
	      sudo apt-get install code
	  fi

      }
      # Cero
      elx-cero () { cd "$PESSOAL/cero" && bash build.sh; }

      elx-fontes()
      {
	  local url=https://download.jetbrains.com/fonts/JetBrainsMono-2.001.zip
	  wget -c "${url}" -P "${BINARIES}"

	  unzip "${BINARIES}"/JetBrainsMono*.zip -d "${BINARIES}"

	  mv -v "${BINARIES}"/ttf/*.ttf ~/.local/share/fonts/

	  fc-cache -fv
      }

      elx-screenshot()
      {
	  local shotter="scrot"
	  local partial="-s"

	  # if(Partial != null)
	  #   {
	  #           _runners.Run(GetScrotCommands().name, GetScrotCommands().args, _folders.Fotografias);
	  #       }
	  #       else
	  #           {
	  #               _runners.Run(GetScrotCommands().name, folder: _folders.Fotografias);
	  #           }
      }

      elx-envia()
      {
	  # Descricao: Send files over to connected system. eg: mobile.

	  local sender="kdeconnect-cli"
	  local id="${sender} -a --id-only"

	  [ ! -x "$(command -v $sender)" ] && exit 0 #  sender was not found!

	  echo " -- Start Sender"
	  ($sender &)

	  if [ ! "$1" == "" ]; then
	      kdeconnect-cli -d "$id" --share "$@"
	  fi
      }

      elx-save()
      {
	  # rich-sh tricks: args to array-like - http://www.etalabs.net/sh_tricks.html
	  for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
	      echo " "
      }

      elx-microphone-test ()
      {
	  arecord -vvv -f dat /dev/null
      }

      elx-eclipse-jdtls ()
      {
	  cd $EMACS_DIR && mkdir -pv $EMACS_DIR/eclipse.jdt.ls

	  wget -c http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz

	  tar zxvf jdt-language-server-latest.tar.gz -C eclipse.jdt.ls
      }

      elx-streamer()
      {
	  youtube-dl -o - "$1" | vlc -
      }

      elx-screen-capture () {
	  # DEPENDENCIES: ffmpeg, pulseaudio, x11
	  ffmpeg -y \
		 -video_size 1366x768 \
		 -framerate 30 -f x11grab -i :0.0 \
		 -f pulse -ac 2 -i default \
		 "$HOME"/Videos/screen1_recording_"$(date '+%Y-%m-%d_%H-%M-%S')".mkv
      }

      elx-screen-capture-stop () {
	  killall ffmpeg; pkill ffmpeg
      }



      elx-wine-prefix-32-create () {

	  # Dependecies: wine, winetricks

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix and call for its configuration, press OK once done!"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg
	  # d3dx9_36
      }

      elx-wine-prefix-64-create () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix and call for its configuration, press OK once done!"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg
	  # d3dx9_36
      }

      elx-wine-prefix-32-install-exe () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Run argument exe with Wine prefix"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine "$1"
      }

      elx-wine-prefix-64-install-exe () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Create wineprefix with given name and install some basic winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Check if ~/wine/prefixes/ folder exist
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix: "

	  # keyboard input to string
	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Run argument exe with Wine prefix"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ wine "$1"
      }

      elx-winetricks-32-install-packages () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Install winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Please name your Wine prefix: "
	  read -r input_variable      # keyboard input to string

	  echo -e " -- Install Winetricks packages"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vcrun2005
      }

      e-winetricks-64-install-packages () {

	  # Dependecies: wine, winetricks, GNU Coreutils, GNU Bash

	  # Descricao: Install winetricks packages

	  # kill wineserver before installation
	  wineserver -k

	  # Where Wine prefixes using DXVK are to be set up
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Please name your Wine prefix: "
	  read -r input_variable      # keyboard input to string

	  echo -e " -- Install Winetricks packages"
	  WINEARCH=win64 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks vcrun2005
      }

      elx-wine-install-prefix () {
	  echo -e " -- Dependecies: wine staging (debian/ubuntu), winetricks (github), GNU Coreutils, GNU Bash"

	  echo -e " -- Descricao: Create wineprefix with given name and get dxvk lastest dll and dependencies"

	  echo -e " -- Killing wineserver"
	  wineserver -k

	  echo -e " -- Making ~/wine/prefixes/ if not present"
	  if [ ! -d "$HOME/wine/prefixes/" ]; then
	      mkdir -p "$HOME"/wine/prefixes/
	  fi

	  echo -e " -- Assigning Wine prefixes folder"
	  wine_prefix_folder="$HOME/wine/prefixes"

	  echo -e " -- Please name your Wine prefix:"

	  # keyboard input to string

	  read -r input_variable

	  echo -e " -- Disable Wine debugging"
	  export WINEDEBUG=-all

	  echo -e " -- Create Wine prefix, press Ok"
	  WINEARCH=win32 WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winecfg

	  echo -e " -- Install Winetricks packages"
	  # WINEPREFIX="$wine_prefix_folder"/"$input_variable"/ winetricks
      }

      elx-makeit () {

	  if [ ! -e "$PWD/Makefile" ]; then
	      echo -e " --  There is no Makefile in PWD"
	  else
	      echo -e " -- Using Makefile"
	      echo "          "

	      echo -e " -- Cleaning Project"
	      echo "          "

	      make -ks clean

	      echo "          "
	      echo -e " -- Building Project"
	      echo "          "

	      make -ks build

	      echo "          "
	      echo -e " -- Project built with no ERROR"
	      echo "          "

	      echo -e " -- Running binary:"
	      echo "<<-----------------------------------------"
	      echo "          "
	      echo "          "

	      make -ks run

	      echo "          "
	      echo "          "
	      echo "----------------------------------------->>"

	      echo "          "
	      echo -e " -- DONE!"
	  fi
      }


      elx-eclipse-jdtls ()
      {
	  cd $EMACS_DIR && mkdir -pv $EMACS_DIR/eclipse.jdt.ls

	  wget -c http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz

	  tar zxvf jdt-language-server-latest.tar.gz -C eclipse.jdt.ls
      }



      # Get the current date using strftime.
      # # Using above function.
      # $ date "%a %d %b  - %l:%M %p"
      # Fri 15 Jun  - 10:00 AM

      # # Using echo directly.
      # $ echo '%(%a %d %b  - %l:%M %p)T\n' "-1"
      # Fri 15 Jun  - 10:00 AM

      # # Assigning a variable using echo.
      # $ echo -v date '%(%a %d %b  - %l:%M %p)T\n' '-1'
      # $ echo '%s\n' "$date"
      # Fri 15 Jun  - 10:00 AM
      elx-date() {
	  # Usage: date "format"
	  # See: 'man strftime' for format.
	  echo "%($1)T" "-1"
      }

      # Progress bars
      # Example Usage:

      # for ((i=0;i<=100;i++)); do
      #     # Pure bash micro sleeps (for the example).
      #     (:;:) && (:;:) && (:;:) && (:;:) && (:;:)

      #     # Print the bar.
      #     bar "$i" "10"
      # done

      # echo '\n'
      # my-bar() {
      #     # Usage: bar 1 10
      #     #            ^----- Elapsed Percentage (0-100).
      #     #               ^-- Total length in chars.
      #     ((elapsed=$1*$2/100))

      #     # Create the bar with spaces.
      #     echo -v prog  "%${elapsed}s"
      #     echo -v total "%$(($2-elapsed))s"

      #     echo '%s\r' "[${prog// /-}${total}]"
      # }

      # my-update () {
      #     sudo "$SYSTEM_PACKAGE_MANAGER" update "$1"
      # }

      # my-terminal-apps-update () {
      #     npm update -g
      # }

      elx-quicklisp ()
      {
	  cd "$HOME" || exit
	  wget -c https://beta.quicklisp.org/quicklisp.lisp

	  sbcl --no-sysinit --no-userinit --load quicklisp.lisp \
	       --eval '(quicklisp-quickstart:install)' \
	       --eval "(ql:quickload '(:quicklisp-slime-helper :clx :cl-ppcre :alexandria :xembed :xml-emitter :dbus :prove :swank))" \
	       --eval "(quit)"

	  quick="$HOME/quicklisp.lisp"; [[ -e "$HOME/quicklisp" ]] && [[ -e $quick ]] && rm $quick
      }

      _BLUE="\\e[44m"
      _ORANGE="\\e[43m"
      _GREEN="\\e[42m"
      _RED="\\e[41m"
      _RESET="\033[0m"

      elx-welcome ()
      {
	  printf "$_BLUE %s $_RESET " $1
	  echo
      }
      elx-warning ()
      {
	  printf "$_RED %s $_RESET" $1
	  echo
      }
      elx-sucess ()
      {
	  printf "$_GREEN %s $_RESET" $1
	  echo
      }
      elx-notify ()
      {
	  printf "$_ORANGE %s $_RESET" $1
	  echo
      }

      # ---------------
      elx-clone ()
      {
	  url=$1
	  folder=$2
	  git clone $url $folder
      }

      elx-cd ()
      {
	  cd $1 || echo "No $_ folder"
      }

      elx-folder-exist-do()
      { # if folder exist do action

	  local folder="$1"
	  local action="$2"

	  [[ -d $folder ]] && eval "$action $folder"
      }

      elx-folder-not-exist-do()
      {
	  # if folder do not exist do action
	  # if $3 = "yes" do that too

	  local folder="$1"
	  local action="$2"

	  [[ ! -d $folder ]] && eval "$action $folder"

	  local action2="$3"
	  [[ $action2 = "yes" ]] && cd "$folder"
      }

      elx-dolist()
      { # For each element in string list do action

	  local action="$1"
	  local packs="$2"

	  echo $action

	  # # Arguments to packs array
	  # IFS=' ' read -r -a packages <<< "$1"

	  # # iterate over each elm in array
	  # for package in "${packages[@]}"
	  # do
	  #     echo $package
	  # done
      }

      elx-app-installed()
      {
	  local app="$1"
	  local action="$@"

	  [[ -x $(command -v $app) ]] && "$action"
      }


      lxDolist ()
      {
	  local packages="$2"
	  local runner="$1"

	  for pack in "${packages[@]}"
	  do
	      "${runner}" "${pack}"
	  done
      }

      # --------------- SYSTEM PACKAGES INTERFACE
      elx-qemu-image-run () {

	  elx-notify " -- Qemu img to be run: "
	  qemu-system-x86_64
	  -m 2G -vga qxl \
	     -drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
	     -drive if=pflash,format=raw,file=OVMF_VARS.fd \
	     -enable-kvm \
	     -hda
      }


      # # Type
      # alias Tp='type -a'

      # # git
      # alias Gitcl='git clone '
      # alias Giti='git init'
      # alias Gita='git add '
      # alias Gitc='git commit -m '
      # alias Gitpl='git pull'
      # alias Gitrh='git reset --hard'
      # alias Gits='git status'
      # alias Gitpu='git push'
      # alias Gitp='git push origin master'
      # alias Gitb='git branch -a --color'
      # alias Gitch='git checkout -- '
      # alias Gitrv='git remote -v'
      # alias Gitrao='git remote add origin'
      # alias Gitrso='git remote set-url origin'
      # alias Gitm='git mv'
      # alias Gitcov='git count-objects -v'
      # alias Gitsh='git stash'
      # alias Gitri='git rebase -i'
      # alias Git='git --no-pager'
      # alias Gitd='git diff --color'
      # alias Gitdw='git diff --color-words'
      # alias Gitl='git log --pretty=oneline'
      # alias Gitbsd='git branch --sort=-committerdate '
      # alias Gitbsa='git branch --sort=committerdate '
      # alias Giuncr='git config --system --unset credential.helper'

      # # GNU Emacs
      # alias Em='emacs -nw'
      # alias Emt='emacs -nw' # emacs terminal
      # alias Ems="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
      # alias Emq='emacs -Q -nw'
      # alias Emct='emacsclient -t'
      # alias Emcc='emacsclient -nc'
      # alias EM='cd $HOME/.emacs.d/'

      # # GNU Screen
      # alias Scrl='screen -list'
      # alias Scrw='screen -wipe'

      # # Network Manager
      # alias Nnon='nmcli networking on'
      # alias Nnoff='nmcli networking off'
      # alias Nds='nmcli device status'
      # alias Ncs='nmcli connection show'
      # alias Ncsa='nmcli connection show --active'
      # alias Ndw='nmcli dev wiend'

      # # ffmpeg
      # alias Ffsr='ffmpeg -video_size 1920x1080 -framerate 60 -f x11grab -i :0.0 st-urxvt.mp4'

      # # systemD
      # alias Sctl='systemically'
      # alias Ssc='sudo systemctl'
      # alias Scu='systemctl --user'
      # alias Jc='sudo journalctl'
      # alias Journ='sudo journalctl -b -f'
      # alias Out='loginctl terminate-user $USER'
      # alias Pwf='systemctl poweroff'
      # alias Rbt='systemctl reboot'
      # # alias Spd='sudo systemctl suspend'

      # # udisks
      # alias umb='udisksctl mount -b /dev/sd'
      # alias umnb='udisksctl unmount -b /dev/sd'

      # # Tmux
      # alias Tks='tmux kill-server'
      # alias Tkst='tmux kill-session -t'
      # alias Ta='tmux at'
      # alias Tns='tmux new -s Shell'
      # alias Tds='tmux detach'

      # # ------------------------------------------------
      # # Distros Commands

      # # GNU Guix & GuixSD
      # alias Gpul='guix pull'
      # alias Gpulu='guix pull & guix package -u' # guix pull and update
      # alias Gpu='guix package -u' # update
      # alias Gpi='guix package -i' # install
      # alias Gpr='guix package -r' # remove
      # alias Gps='guix package -s' # search
      # alias Gpsos='guix package --show=PACKAGE' # Show details about PACKAGE
      # alias Gpl='guix package -l' # list generation
      # alias Gpl='guix package --roll-back' # rollback one generation
      # alias GpS='guix package -S' # switch-generation=PATTERN
      # alias Gsr='sudo guix system reconfigure'

      # # Debian
      # alias Apu='sudo apt update'
      # alias Apug='sudo apt upgrade'
      # alias Apdg='sudo apt dist-upgrade'
      # alias Apd='apt download' # download deb file
      # alias Aptsg='sudo apt -t stable upgrade'
      # alias Aptug='sudo apt -t unstable upgrade'
      # alias Apttg='sudo apt -t testing upgrade'
      # alias Apuug='sudo apt update ; sudo apt upgrade'
      # alias Api='sudo apt install'
      # alias Apri='sudo apt --reinstall install'
      # alias Appr='sudo apt purge'
      # alias Apio='sudo apt install --only-upgrade'
      # alias Aps='apt search'
      # alias Apr='sudo apt remove'
      # alias Apar='sudo apt autoremove'
      # alias Apli='apt list --installed'
      # alias Aplil='apt list --installed | less'
      # alias Apsl='sudo vi /etc/apt/sources.list'
      # alias Apac='apt-get clean'
      # alias Apfs='apt-file search'
      # alias Apcir='apt-cache --installed rdepends' # package X depends on
      # # .deb in /var/cache/apt/archives/

      # # Red Hat
      # alias Di='sudo dnf install'
      # alias Dr='sudo dnf remove'
      # alias Du='sudo dnf update'
      # alias Ds='dnf search'
      # alias Dli='dnf list installed | less'

      # # Nix
      # alias Ni='nix-env -i' # install
      # alias Ne='nix-env -e' # uninstall
      # alias Nqa='nix-env -qa' # search for specific app or no argument view the set of available packages in Nixpkgs
      # alias Nu='nix-env -u' # update specific package or no arguments upgrade all packages
      # alias Nrb='nix-env --rollback' # rollback specific package
	 # alias Ngc='nix-collect-garbage -d' #  run the Nix garbage collector to get rid of unused packages, since uninstalls or upgrades don't actually delete them
	 # alias Ndr='nix-env -u --dry-run' # mimic universal upgrade, just like Gentoo's emerge

	 # # Gentoo - # https://wiki.gentoo.org/wiki/Portage#emerge
	 # alias Ema='sudo emerge --ask'
	 # alias Ems='sudo emerge --search'
	 # alias Emu='sudo emerge --unmerge'
	 # alias Ema='emerge --ask'
	 # alias Ems='emerge --search'
	 # alias Empv='emerge --pretend --verbose'
	 # alias Eman='sudo emerge --ask --newuse'
	 # alias Emudnw='sudo emerge --update --deep --newuse @world'
	 # alias Emundww='sudo emerge --ask --update --newuse --deep --with-bdeps=y @world'
	 # alias Emacdw='sudo emerge --ask --changed-use --deep @world'
	 # alias Emdc='sudo emerge --depclean'
	 # alias Emrr='sudo revdep-rebuild'
	 # alias Emdc='sudo dispatch-conf'
	 # alias Emig='emerge --info | grep -i'
	 # alias Emigu='emerge --info | grep USE'
	 # alias Empr='sudo emerge @preserved-rebuild'
	 # # Eclean https://wiki.gentoo.org/wiki/Eclean#Cleaning_distendles
	 # alias Emc='sudo eclean distendles'
	 # alias Emc='sudo eclean packages'
	 # # qpkg

	 # # Arch Linux
	 # alias Pacu='sudo pacman -Syu'
	 # alias Paci='sudo pacman -S'
	 # alias Pacr='sudo pacman -R'
	 # alias Pacr='sudo pacman -Rd'
	 # alias Pacrns='sudo pacman -Rns'
	 # alias Pacrcns='sudo pacman -Rcns'
	 # # alias Pacrnsqd='pacman -Rsn $(pacman -Qdtq)'
	 # alias Pacs='pacman -Ss'
	 # alias Pacud='pacman -U'
	 # alias Pacqe='pacman -Qe'
	 # alias Pacqi='pacman -Qi'
	 # alias Pacqt='pacman -Qt | less'
	 # # alias Mirrors='sudo pacman-mirrors -g; and sudo pacman -Su'

	 # # Arch Linux Pckbuild Handlers
	 # alias Yi='yaourt -S --aur'
	 # alias Yu='yaourt -Su --aur'
	 # alias Ys='yaourt -Ss --aur'
	 # alias Pru='pacaur -Su -a'
	 # alias Pri='pacaur -S'
	 # alias Prs='pacaur -Ss'
	 # alias Prr='pacaur -R'

	 # #PCKBUILD
	 # alias Mpsi='makepkg -si'

	 # alias Strc="awk '!/^ *#/ && NF'"
	 alias Dmesg='clear; dmesg -eL -w'

	 # Scripts for recursive tasks (without space on endlename)
	 alias Jpg='for f in *.jpg; do mv "$f" "$f/%.jpg/.jp"; done'
    #+end_src

* Nixos
** Config
    #+begin_src nix
    #efiInstallAsRemovable = true; # in case canTouchEfiVariables doesn't work for your system

    #boot.loader.systemd-boot.enable = true;

	  # services.xserver.xkbOptions = "eurosign:e";

	  # Some programs need SUID wrappers, can be configured further or are
	  # started in user sessions.
	  # programs.mtr.enable = true;
	  # programs.gnupg.agent = {
	  #   enable = true;
	  #   enableSSHSupport = true;
	  #   pinentryFlavor = "gnome3";
	  # };

	  # * Firewall
	  # networking.firewall.allowedTCPPorts = [ ... ];
	  # networking.firewall.allowedUDPPorts = [ ... ];
	  # Or disable the firewall altogether.
	  # networking.firewall.enable = false;

	  # Enable CUPS to print documents.
	  # services.printing.enable = true;

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    # i18n.defaultLocale = "en_US.UTF-8";
    # console = {
    #   font = "Lat2-Terminus16";
    #   keyMap = "us";
    # };

    #+end_src
* bin
   #+begin_src shell-script
   #!/usr/bin/env bash

   STEP=5

   [[ -x $(command -v brightnessctl) ]] && brightnessctl set "$STEP"%-

   #!/usr/bin/env bash

   STEP=5
   brightnessctl set "$STEP"%+


   #!/usr/bin/env bash

   [[ -x $(command -v systemctl) ]] && systemctl poweroff

   #!/usr/bin/env bash

   [[ -x $(command -v slock) ]] && slock
   [[ -x $(command -v i3lock) ]] && i3lock
   [[ -x $(command -v xlock) ]] && xlock


   #!/usr/bin/env bash

   [[ -x $(command -v systemctl) ]] && systemctl hibernate


   #!/usr/bin/env bash

   STATUS=$(nmcli networking)

   [[ ${STATUS} == "disabled" ]] && nmcli networking on &
   [[ ${STATUS} == "enabled" ]] && nmcli networking off &


   #!/usr/bin/env bash

   [[ -x $(command -v systemctl) ]] && systemctl reboot


   #!/usr/bin/env bash

   [[ -x $(command -v loginctl) ]] && loginctl terminate-user ${USER}


   #!/usr/bin/env bash

   [[ -x $(command -v systemctl) ]] && systemctl suspend

   #!/usr/bin/env bash

   # Descricao: Tira momento da tela
   now=$(date +"%Y-%m-%d-%T")
   pic="$HOME/Fotografis/$now-tirtela.png"

   [[ $(command -v scrot) ]] && scrot $pic
   [[ $(command -v maim) ]] && maim $pic


   #!/usr/bin/env bash

   # Descricao: Tira momento da tela
   now=$(date +"%Y-%m-%d-%T")
   pic="$HOME/Fotografis/$now-tirtela.png"

   [[ $(command -v scrot) ]] && scrot $pic
   [[ $(command -v maim) ]] && maim $pic

   #!/usr/bin/env bash

   [[ -x $(command -v mpc) ]] && mpc toggle


   #!/usr/bin/env bash

   [[ -x $(command -v mpc) ]] && mpc next


   #!/usr/bin/env bash

   [[ -x $(command -v pactl) ]] && pactl set-sink-mute 0 toggle


   #!/usr/bin/env bash

   STEP=5
   [[ -x $(command -v pactl) ]] && pactl set-sink-volume 0 -"$STEP"%


   #!/usr/bin/env bash

   STEP=5
   [[ -x $(command -v pactl) ]] && pactl set-sink-volume 0 +"$STEP"%


   #+end_src

* .xsessionrc
   #+begin_src shell-script
asdf()
{
    local dir="$HOME"/.asdf/shims
    export PATH="$dir"${PATH:+:}$PATH
}

asdf_js()
{
    local dir="$HOME/.asdf/shims/node_modules/.bin"
    export PATH="$dir"${PATH:+:}$PATH
}

   lisp()
   {
       export SBCL_HOME="$HOME_LOCAL_LIB/sbcl"
   }

   golang()
   {
       export GOPATH="$HOME/.local/"
       export GO111MODULE=on

       export PATH="$GOPATH"${PATH:+:}${PATH}
   }

   # ** GEM
   if [ -x "$(command -v gem)" ]; then
       export GEM_HOME="${XDG_CONFIG_HOME}/gem/"
       export GEM_PATH="${XDG_CONFIG_HOME}/gem/"
       export GEM_BIN="${XDG_CONFIG_HOME}/gem/bin"
       PATH="$GEM_BIN"${PATH:+:}$PATH
   fi

   ## ** RVM
   if [[ -d "$HOME/.rvm/scripts" ]]; then
       export RVM_DIR="$HOME/.rvm"
       [ -s "$RVM_DIR/scripts/rvm" ] && source "$RVM_DIR/scripts/rvm"  # This loads nvm

       export RVM_CURRENT_BIN="$RVM_DIR/rubies/ruby-2.7.0/bin/ruby"
       PATH="$RVM_CURRENT_BIN"${PATH:+:}$PATH
   fi

   # * NPM
   if [ -x "$(command -v npm)" ]; then
       export NPM_CONFIG_PREFIX="$XDG_CONFIG_HOME/npm"
       export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/config"
       export NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm"
       export NPM_CONFIG_TMP="$XDG_RUNTIME_DIR/npm"
       export NPM_HOME="$XDG_CONFIG_HOME/npm"
       export NPM_BIN="$NPM_HOME/bin"
       PATH="$NPM_BIN":$PATH
   fi

   # ** DOTNET
   [ -x "$(command -v dotnet)" ] && export PATH="${HOME}/.dotnet/tools":${PATH}

   # ** SBCL
   [ -e "$HOME_LOCAL_BIN/sbcl" ] &&  export SBCL_HOME="$HOME_LOCAL/lib/sbcl"

   # ** NIM
   export PATH="${HOME}/.nimble/bin":${PATH}

   # ** Keyboard Layout
   export XMODIFIERS="@im=ibus"
   export QT_IM_MODULE=ibus
   export GTK_IM_MODULE=ibus

   # * PYTHON
   if [ -x "$(command -v pip3)" ]; then
       export PIP=pip3
       export PIP_REQUIRE_VIRTUALVENV=true
       export PIP_DOWNLOAD_CACHE=$HOME/.cache/pip/cache
   fi

   # * JAVA
   if [ -x "$(command -v javac)" ]; then
       # export CLASSPATH="$XDG_CONFIG_HOME/emacs/eclipse.jdt.ls/server/plugins/org.eclipse.equinox.launcher_1.5.600.v20191014-2022.jar${CLASSPATH:+:}$CLASSPATH"
       # export JAVA_HOME=
   fi

   # ** Python
   VIRTUALENVWRAPPER_PYTHON=$HOME_LOCAL_BIN/python3
   export WORKON_HOME=$HOME/.virtualenvs   # Optional
   export PROJECT_HOME=$HOME/projects      # Optional


   # ** GUIX
   if [ -x "$(command -v guix)" ]; then
       export PATH="/root/.config/guix/current/bin${PATH:+:}$PATH"
       export PATH="/home/lxbarbosa/.config/guix/current/bin"
       export GUIX_PROFILE="/home/lxbarbosa/.config/guix/current"
   fi

   [ '/usr/bin/tty' = '/dev/ttyv0' ] && startx & # FreeBSD

   # =============== APPLICATIONS
   # WGET/CURL
   if [ -x "$(command -v wget)" ]; then
       export DOWNLOADER="wget"
   else
       export DOWNLOADER="curl"
   fi

   # GOLANG
   if [ -x "$(command -v go)" ]; then
       export GOPATH="$HOME/.local/"
       export GO_BIN="$HOME/go/bin/"
       export PATH="$GO_BIN"${PATH:+:}$PATH
   fi

   # FLATPAK
   XDG_DATA_DIRS="/var/lib/flatpak/exports/share:$XDG_DATA_DIRS"

   # ----------------------- # NIX
   if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
       . $HOME/.nix-profile/etc/profile.d/nix.sh;
   fi # added by Nix installer

   # source .bashrc
   if [ -n "$BASH_VERSION" ]; then
       if [ -f "$HOME/.bashrc" ]; then
	   . "$HOME/.bashrc"
       fi
   fi

   if [ -z "$DISPLAY" ] && [ "$(tty)" = /dev/tty1 ]; then exec startx; fi

   if [-z "${DISPLAY}"] && ["${XDG_VTNR}" -eq 1]; then
       exec startx
   fi


   if [ -x "$(command -v guix)" ]; then
       # GUIX VARS
       export GUILE_WARN_DEPRECATED="detailed"

       # GUIX BIN FOLDERS
       export GUIX_PROFILE="$HOME/.guix-profile"
       export PATH="$GUIX_PROFILE/bin:$GUIX_PROFILE/sbin"
       export PATH="$XDG_CONFIG_HOME/guix/current/bin${PATH:+:}$PATH"
       # export PATH="$GUIX_PROFILE/bin${PATH:+:}$PATH"
       # export PATH="/root/.config/guix/current/bin${PATH:+:}$PATH"
       # export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"
       # export INFOPATH="$GUIX_PROFILE/share/info${INFOPATH:+:}$INFOPATH"
       # export GIT_EXEC_PATH="$GUIX_PROFILE/libexec/git-core${GIT_EXEC_PATH}$GIT_EXEC_PATH"
   fi

   # ---------------- # Emacs - INFOPATH
   if [ -x "$(command -v emacs)" ]; then
       # export INFOPATH="/usr/share/info${INFOPATH:+:}$INFOPATH"
       # export INFOPATH="/usr/share/info/emacs${INFOPATH:+:}$INFOPATH"
       # export INFOPATH="/usr/local/share/info${INFOPATH:+:}$INFOPATH"
       # export INFOPATH="$HOME/lisp/emacs/info${INFOPATH:+:}$INFOPATH" # local build info
   fi

   # Compilers
   # [[ -x "$(command -v gcc)" ]] && export CC=gcc

   # ---------------- # GUIXSD
   if [ -x "$(command -v guix)" ]; then
       export GUILE_WARN_DEPRECATED="detailed"

       export GUIX_PROFILE="$HOME/.guix-profile"
       export PATH="${PATH:+:}$PATH$GUIX_PROFILE/bin:$GUIX_PROFILE/sbin"
       # export GUIX_GTK3_PATH="$GUIX_PROFILE/lib/gtk-3.0"
       # export XDG_DATA_DIRS="$GUIX_PROFILE/share"
       # export GIO_EXTRA_MODULES="$GUIX_PROFILE/lib/gio/modules"
       # export TERMINFO_DIRS="$GUIX_PROFILE/share/terminfo"
       # export INFOPATH="$GUIX_PROFILE/share/info${INFOPATH:+:}$INFOPATH"
       # export GST_PLUGIN_SYSTEM_PATH="$GUIX_PROFILE/lib/gstreamer-1.0"
       # export CPATH="$GUIX_PROFILE/include"
       # export ASPELL_DICT_DIR="$GUIX_PROFILE/lib/aspell"
       # export GIT_EXEC_PATH="$GUIX_PROFILE/libexec/git-core"
       # # export GIT_EXEC_PATH="$GUIX_PROFILE/libexec/git-core${GIT_EXEC_PATH}$GIT_EXEC_PATH"
       # export PKG_CONFIG_PATH="$GUIX_PROFILE/lib/pkgconfig:$GUIX_PROFILE/share/pkgconfig"
       # export CMAKE_PREFIX_PATH="$GUIX_PROFILE/"
       # export LIBRARY_PATH="$GUIX_PROFILE/lib:$GUIX_PROFILE/lib64${LIBRARY_PATH:+:}$LIBRARY_PATH"
       # export LD_LIBRARY_PATH="$GUIX_PROFILE/lib:$GUIX_PROFILE/lib64${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH"
       # export PYTHONPATH="$GUIX_PROFILE/lib/python3.7/site-packages"
       # export ACLOCAL_PATH="$GUIX_PROFILE/share/aclocal"
       # export BASH_LOADABLES_PATH="$GUIX_PROFILE/lib/bash"
   fi



   # # ANACONDA
   # if [ -d "$HOME/anaconda3/" ]; then
   #     ANACONDA="$HOME/anaconda3/bin/"
   #     export PATH="$ANACONDA":"$PATH"
   # fi

   # # >>> conda initialize >>>
   # # !! Contents within this block are managed by 'conda init' !!
   # __conda_setup="$('/home/lxbarbosa/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
   # if [ $? -eq 0 ]; then
   #     eval "$__conda_setup"
   # else
   #     if [ -f "/home/lxbarbosa/anaconda3/etc/profile.d/conda.sh" ]; then
   #         . "/home/lxbarbosa/anaconda3/etc/profile.d/conda.sh"
   #     else
   #         export PATH="/home/lxbarbosa/anaconda3/bin:$PATH"
   #     fi
   # fi
   # unset __conda_setup
   # # <<< conda initialize <<<
   #+end_src

* .xinitrc
   #+begin_src shell-script

      function dwm {
	  if [ $1 == "dwm" ]; then
	      local autostart=autoinicia-aps
	      [ -f "$(command -v $autostart)" ] && $autostart

	      while true
	      do
		  xsetroot -name "$(wmbar-info)"
		  sleep 5s
	      done &
	  fi
      }

      TODO
      run_list(){
	  for var in $1
	  do
	      var[0] var[1]
	  done
      }

      run_tools() {
	  TOOLINGS=(xhost xset xsetroot ssh-agent)
	  TOOLINGS_CMD=(xhost\ +SI:localuser:"$USER"
			xset\ r\ rate\ 200\ 50
			xsetroot\ -cursor_name\ left_ptr
			eval\ "$(ssh-agent)")
	  CHECKLIST=$TOOLINGS
      }
   #+end_src

* Guix Config
   #+begin_src scheme

   (locale "pt_BR.utf8")

   (locale-definitions
    (list (locale-definition (source "en_US") (name "en_US.utf8"))
	  (locale-definition (source "pt_BR") (name "pt_BR.utf8"))))

   ("/usr/bin/sh"
    ,(file-append (canonical-package coreutils)
		  "/bin/sh"))
   ("/usr/bin/bash"
    ,(file-append (canonical-package coreutils)
		  "/bin/bash"))

   ("/bin/pwd"
    ,(file-append (canonical-package coreutils)
		  "/bin/pwd"))


   ("/bin/startx" ,(xorg-start-command))

   #+end_src
* e_packs
   #+begin_src shell-script

   #+end_src
* e_distro
   #+begin_src shell-script




	    #!/usr/bin/env bash

	    # set -e

	    # * NIXOS
	    # Descricao: Distro Pacotes

	    nixos-packages ()
	    {
		echo "-- NixOS Packages"

		languages=(ruby lua luarocks python3 postgresql sqlite3 zenity bash-completion)
		languages_nixos=(nixos.shellcheck nixos.lua53Packages.luacheck)

		wm_packages=(network-manager-applet aria2 dunst maim udiskie unclutter lxqt-openssh-askpass mpv libnotify
			     dmenu imagemagick pandoc xdg-utils lm-sensors aspell mpd mpc ncmpc ncmpcpp wofi rofi ffmpeg
			     vorbis-tools)
		wm_packages_nixos=(nixos.xfce.xfce4-clipman-plugin nixos.perl530Packages.FileMimeInfo nixos.screenfetch nixos.aspellDicts.en nixos.aspellDicts.br)

		user_packages=(emacs firefox libreoffice kdeconnect calibre inkscape screenkey kdenlive cheese gimp obs-studio
			       vlc kate syncthing steam)
		user_packages_nixos=(nixos.deluge nixos.gnome3.gnome-keyring)

		virtualization=(qemu aqemu qemu-utils virt-manager OVMF)
		virtualization=(nixos.qemu_kvm)

		wine=(wine winetricks)

		gnu=(gnutls gnused gdb texinfo autoconf parallel findutils stow screen automake)
		gnu_nixos=(nixos.xsel)

		system_tools=(lshw at usbutils lsof time net-tools iproute2 curl entr tree git xclip ctags fontconfig
			      subversion bc htop strace ltrace openssh cpio lhasa lzop atool wmctrl
			      perf-tools mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv
			      neovim zsh unrar ripgrep socat fish)
		system_tools=(nixos.poppler)

		ruby_tools=(ruby)

		laptop=(brightnessctl tlp iw libinput-gestures acpi acpid)
		laptop_nixos=(nixos.wirelesstools)

		local command='nix-env -i'
		local command_nixos='nix-env --installi -A'

		e_dolist "$command" "${essentials[@]}"
		e_dolist "$command" "${wm[@]}"
		e_dolist "$command" "${languages[@]}"
		e_dolist "$command" "${devops[@]}"
		e_dolist "$command" "${wm_packges[@]}"
		e_dolist "$command" "${user_packages[@]}"
		e_dolist "$command" "${media[@]}"
		e_dolist "$command" "${virtualization[@]}"
		e_dolist "$command" "${wine[@]}"
		e_dolist "$command" "${fonts[@]}"; sudo fc-cache -fv
		e_dolist "$command" "${ruby_tools[@]}"
		e_dolist "$command" "${emacs_deps[@]}"
		# e_dolist "$command" "${misc_deps[@]}"
		e_dolist "$command" "${laptop[@]}"

		echo "-- Preparacoes finais: limpando e arrumando o sistema"
		sudo apt -y autoremove

		echo "Done"
	    }

	    nixos-services()
	    {
		echo "systemctl"
		sudo systemctl disable mpd.service
		sudo systemctl disable mpd.socket
	    }

	    nixos-foreign()
	    {
		if [ ! $(command -v google-chrome) ]; then
		    cd ${HOME}
		    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

		    sudo apt install -y ${HOME}/google-chrome-stable_current_amd64.deb
		    sudo apt update
		fi

		if [ ! $(command -v code) ]; then
		    cd ${HOME}
		    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
		    sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
		    sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

		    sudo apt-get install apt-transport-https
		    sudo apt-get update
		    sudo apt install -y code
		fi

		if [ -x "$(command -v pgadmin)" ]; then
		    # Install the public key for the repository (if not done previously):
		    curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

		    # Create the repository configuration file:
		    sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/buster pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

		    # Install for both desktop and web modes:
		    sudo apt install pgadmin4 pgadmin4-desktop pgadmin4-web

		    # Configure the webserver, if you installed pgadmin4-web:
		    python -m pip install --user flask
		    sudo /usr/pgadmin4/bin/setup-web.sh
		fi
	    }

	    nixos-upgrade()
	    {
		echo "-- Atualizando Sistema"
		nix-env --upgrade
	    }

	    run()
	    {

	    }


	    # * RUN

	    nixos-packages
	    nixos-services
	    nixos-foreign
	    nixos-upgrade



	 #!/usr/bin/env bash

	 # set -e

	 # * ARCH LINUX

	 arch-upgrade()
	 {
	     echo "-- Atualizando Sistema" sudo pacman -Syy && sudo pacman -Syu
	 }

	 arch-packages ()
	 {
	     echo "-- Debian Packages"

	     essentials=(base-devel coreutils wget git p7zip zip unzip util-linux bash tmux zile)

	     languages=(gcc clang postgresql sqlite3 postgresql-libs shellcheck zenity bash-completion python-pip)

	     user_packages=(emacs firefox libreoffice kdeconnect calibre inkscape screenkey kdenlive cheese deluge gimp obs-studio gnome-keyring vlc kate syncthing steam imagemagick pandoc xdg-utils screenfetch lm_sensors aspell aspell-en  mpv)

	     media=(ffmpeg vorbis-tools gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good  gst-plugins-ugly)

	     virtualization=(qemu qemu-system-gui qemu-utils qemu-efi qemu-kvm virt-manager ovmf) # qemu-system-x86

	     wine=(wine winetricks)

	     fonts=(ttf-fira-code gnu-free-fonts ttf-dejavu) # ttf-ancient-fonts fonts-nanum

	     system_tools=(lshw at usbutils lsof time net-tools iproute2 curl entr tree git xsel xclip ctags fontconfig
			   freetype2 subversion bc htop strace ltrace openssh cpio lhasa lzop atool wmctrl poppler
			   perf mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv
			   parallel findutils wget stow screen neovim zsh parted texinfo gcc gdb make autoconf
			   automake gnutls gdb nftables firewalld unrar ripgrep socat fish)  # console-data

	     emacs_deps=(libjansson-dev libbrotli-dev libwebkit2gtk-4.0-dev libpng-dev zlib1g-dev libpoppler-glib-dev
			 libpoppler-private-dev ghostscript mupdf-tools
			 poppler-utils texlive-binaries unoconv djvulibre-bin ncurses-dev
			 texlive-latex-base texlive-fonts-recommended  texlive-latex-extra
			 uuid-dev libicu-dev icu-devtools libedit-dev libxml2-dev
			 libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config
			 libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync)

	     laptop=(iw wireless_tools libinput-gestures acpi acpid) # apmd pbbuttonsd pmud libiw-dev laptop-mode-tools

	     local command='sudo pacman -S --noconfirm'

	     e_dolist "$command" "${essentials[@]}"
	     e_dolist "$command" "${languages[@]}"
	     e_dolist "$command" "${devops[@]}"
	     e_dolist "$command" "${wm_packges[@]}"
	     e_dolist "$command" "${user_packages[@]}"
	     e_dolist "$command" "${media[@]}"
	     e_dolist "$command" "${virtualization[@]}"
	     e_dolist "$command" "${wine[@]}"
	     e_dolist "$command" "${fonts[@]}"; sudo fc-cache -fv
	     e_dolist "$command" "${ruby_tools[@]}"
	     # e_dolist "$command" "${emacs_deps[@]}"
	     # e_dolist "$command" "${misc_deps[@]}"
	     e_dolist "$command" "${laptop[@]}"
	 }

	 arch-services()
	 {
	     echo "systemctl"
	     sudo systemctl disable mpd.service
	     sudo systemctl disable mpd.socket
	 }

	 arch-foreign()
	 {
	     if [ ! $(command -v google-chrome) ]; then
		 cd ${HOME}
		 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

		 sudo apt install -y ${HOME}/google-chrome-stable_current_amd64.deb
		 sudo apt update
	     fi

	     if [ ! $(command -v code) ]; then
		 cd ${HOME}
		 wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
		 sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
		 sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

		 sudo apt-get install apt-transport-https
		 sudo apt-get update
		 sudo apt install -y code
	     fi

	     if [ -x "$(command -v pgadmin)" ]; then
		 # Install the public key for the repository (if not done previously):
		 curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

		 # Create the repository configuration file:
		 sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/buster pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

		 # Install for both desktop and web modes:
		 sudo apt install pgadmin4 pgadmin4-desktop pgadmin4-web

		 # Configure the webserver, if you installed pgadmin4-web:
		 python -m pip install --user flask
		 sudo /usr/pgadmin4/bin/setup-web.sh
	     fi
	 }

	 # * RUN

	 arch-upgrade
	 arch-packages
	 arch-services
	 # arch-foreign


      #!/usr/bin/env bash

      # set -e

      fedora-packages ()
      {
	  essentials=(zip unzip git tmux wget bash zile emacs)

	  system=(p7zip p7zip-plugins openssh acpi lshw at usbutils lsof time net-tools iproute entr ntfs-3g tree xsel xclip ctags fontconfig freetype subversion bc htop strace ltrace cpio lzop atool wmctrl poppler-utils perf sysstat jq dialog ncdu ripgrep nnn fzf rsync bat rclone xonsh pv info stow screen autoconf texinfo firewall-config automake m4 libtool bzip2)

	  programming=(ShellCheck zenity bash-completion cmake zsh fish gcc neovim gcc-c++ gdb clang clang-tools-extra lldb mercurial ncurses-devel)

	  ruby=(openssl-devel python2 libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel)

	  infra=(vagrant vagrant-libvirt VirtualBox qemu qemu-system-x86 qemu-kvm virt-manager wine) # podman edk2-ovmf

	  user=(firefox kde-connect ImageMagick gimp pandoc libreoffice calibre inkscape krita atril liveusb-creator perl-File-MimeInfo aspell aspell-en syncthing lm_sensors xdg-utils dmenu xprop screenfetch numix-gtk-theme numix-icon-theme)

	  fonts=(mozilla-fira-mono-fonts powerline-fonts google-noto-emoji-fonts google-noto-sans-fonts google-droid-sans-mono-fonts)

	  media=(vorbis-tools gstreamer1-devel gstreamer1-plugins-base-tools gstreamer1-plugins-base-devel gstreamer1-plugins-good gstreamer1-plugins-good-extras gstreamer1-plugins-bad-free-devel gstreamer1-plugins-bad-free-extras)

	  echo "Instalando pacotes."

	  local command='sudo dnf install -y'

	  e_dolist "$command ${essentials[@]}"
	  e_dolist "$command ${ruby[@]}"
	  e_dolist "$command ${programming[@]}"
	  e_dolist "$command ${system[@]}"
	  e_dolist "$command ${infra[@]}"
	  e_dolist "$command ${user[@]}"
	  e_dolist "$command ${fonts[@]}"; sudo fc-cache -fv
	  e_dolist "$command ${media[@]}"
      }

      fedora-upgrade()
      {
	  sudo dnf upgrade -y
	  sudo dnf autoremove -y
      }

      fedora-services()
      {
	  sudo hostnamectl set-hostname 'fedora'
      }

      fedora-foreign()
      {
	  rpmfusion()
	  {
	      # RPM FUSION
	      if [ ! -x "$(command -v mpv)" ]; then
		  sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
		  sudo dnf install -y https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

		  sudo dnf install -y ffmpeg mpv steam unrar
	      fi
	  }

	  vscode()
	  {
	      if [ ! -x "$(command -v code)" ]; then
		  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
		  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

		  sudo dnf check-update -y
		  sudo dnf install -y code
	      fi
	  }

	  docker()
	  {
	      echo 'docker'
	  }

	  podman()
	  {
	      echo 'podman'
	  }

	  rpmfusion
	  podman
	  vscode
	  docker
      }

      # * RUN

      fedora-upgrade
      fedora-packages
      # fedora-services
      # fedora-foreign


   #!/usr/bin/env bash

   # set -e

   # * UBUNTU

   ubuntu-packages()
   {
       essentials=(ssh make build-essential git p7zip p7zip-full zip unzip zile neovim tmux curl wget bash emacs gcc)

       ruby=(python2 autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev)

       programming=(shellcheck zenity bash-completion m4 libtool libtool-bin default-jdk clang clangd lldb cmake)

       virtualization=(wine wine32 winetricks qemu qemu-system-x86 qemu-system-gui qemu-utils qemu-efi qemu-kvm virt-manager ovmf virt-manager) # libvirt-clients libvirt-daemon-system libvirt-dev libvirt0

       toolings=(htop zsh screen gdb ripgrep lshw at usbutils lsof time entr tree git xsel xclip exuberant-ctags fontconfig libfreetype6 subversion bc gdebi strace ltrace cpio lhasa lzop atool wmctrl poppler-utils brz mercurial sysstat jq dialog ncdu nnn fzf fzy rsync bat rclone xonsh pv vrms info stow parted texinfo autoconf automake gnutls-bin bash-doc gcc-doc gdb-doc gdbserver wget2 parallel nftables libiw-dev)

       fonts=(fonts-firacode fonts-dejavu ttf-ancient-fonts fonts-nanum)

       de=(firefox syncthing libreoffice calibre inkscape kdenlive deluge obs-studio vlc mpv steam inxi fish imagemagick pandoc screenfetch lm-sensors aspell gimp numix-icon-theme numix-gtk-theme)

       media=(ffmpeg vorbis-tools gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly)

       echo "Instalando pacotes."

       local command='sudo apt install -y'
       e_dolist "$command" "${essentials[@]}"
       e_dolist "$command" "${ruby[@]}"
       e_dolist "$command" "${fonts[@]}"; sudo fc-cache -fv
       e_dolist "$command" "${programming[@]}"
       e_dolist "$command" "${virtualization[@]}"
       e_dolist "$command" "${toolings[@]}"
       e_dolist "$command" "${de[@]}"
       e_dolist "$command" "${media[@]}"
   }

   ubuntu-upgrade()
   {
       echo "-- Updating System"

       sudo apt -y update && sudo apt -y upgrade
       sudo apt -y autoremove
   }

   ubuntu-services()
   {
       enable-all-repos()
       {
	   echo ""
       }

       enable-all-repos
   }

   # * RUN

   ubuntu-upgrade
   ubuntu-packages
   #ubuntu-services

   #+end_src
* Nyxt
   #+begin_src conf ~/.config/nyxt/init.lisp :mkdirp yes
   (in-package :next-user)

   ;; Search Engines
   (defvar a/search-engines
     '(("bi" . "https://bing.com/?q=~a")
       ("dg" . "https://duckduckgo.com/?q=~a")
       ("g" . "https://www.google.com/search?ion=1&q=~a")
       ("gh" . "https://github.com/search?ref=simplesearch&q=~a")
       ("q" .  "http://quickdocs.org/search?q=~a")
       ("s" .  "http://stackoverflow.com/search?q=~a")
       ("wp" . "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=~a")
       ("yt" . "https://www.youtube.com/results?search_query=~a")))

   (defclass my-browser (gtk-browser)
     ((search-engines :initform
		      (append
		       a/search-engines
		       (get-default 'browser 'search-engines)))))

   (setf *browser-class* 'my-browser)
   #+end_src
** Config
    #+begin_src lisp
    (defvar *my-keymap* (make-keymap)  "My keymap.")

    (define-command play-page-video (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))
    (define-key :keymap *my-keymap*  "C-M-c v" #'play-page-video)

    (define-command play-video-in-current-page (&optional (buffer (current-buffer)))
      "Play video in the currently open buffer."
      (uiop:run-program (list "mpv" (url buffer))))

    (defvar *my-keymap* (make-keymap)
      "My keymap.")

    (define-mode my-mode ()
      "Dummy mode for the custom key bindings in `*my-keymap*'."
      ((keymap-schemes :initform (list :emacs *my-keymap*
				       :vi-normal *my-keymap*))))

    Debugging
    (setf *swank-port* 4006)


    Use development platform port.
    (setf +platform-port-command+
	  "~/.local/bin/next-gtk-webkit")

    open-file
    (defun my-open-videos (filename)
      "Open videos with mpv."
      (handler-case (let ((extension (pathname-type filename)))
		      (match extension
			     ((or "webm" "mkv" "mp4")
			      (uiop:launch-program (list "mpv" filename)))
			     (_
			      (next/file-manager-mode:open-file-function filename))))
	(error (c) (log:error "Error opening ~a: ~a" filename c))))

    (setf next/file-manager-mode:*open-file-function* #'my-open-videos)


    (define-key :keymap *my-keymap* "C-M-c v" #'play-video-in-current-page)


    -- a-FUNCTIONS (m-x)
    (defun a-play-video ()
      "Play current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "mpv" url))))

    (define-command a-get-video ()
      "Download current page's video"
      (with-result (url (buffer-get-url))
	(uiop:launch-program (list "youtube-dl" url "&"))))

    (define-command a-bookmark-url ()
      "Allow the user to bookmark a URL via minibuffer input."
      (with-result (url (read-from-minibuffer (minibuffer *interface*)))
	(%bookmark-url url)))

    ;; Zoom
    ;; (setf *zoom-ratio-default* 1.6)

    HOME PAGE
    (setf (get-default 'remote-interface 'start-page-url) "https://cnn.com")

    ;; Minibuffer
    (setf (get-default 'minibuffer 'minibuffer-style)
	  (cl-css:inline-css
	   '((body :border-top "14px solid red"))))

    #+end_src
* bashrc
   #+begin_src shell-script
   e_asdf()
   {
       source "$HOME/.asdf/completions/asdf.bash"
       source "$HOME/.asdf/asdf.sh"
   }


   e-startx()
   {
       if [ -z "${DISPLAY}" ] && [ -n "${XDG_VTNR}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
	   exec startx
       fi
   }

   #+end_src
* .xserverrc
   #+begin_src shell-script ~/.xserverrc -mode (identity #o755)
   #!/usr/bin/env bash

   # Descricao: Global variaveis de ambiente

   exec /usr/bin/Xorg -novtswitch -nolisten tcp "$@" vt$XDG_VTNR
   #+end_src

* Sbcl
   #+begin_src lisp ~/.sbclrc
    (declaim (optimize (debug 3) (speed 0)))
   #+end_src

* .pypirc
   #+begin_src conf
   [distutils]
   index-servers =
       pypi

   [pypi]
   repository: https://pypi.python.org/pypi
   username: elxbarbosa
   #+end_src
* gtk-3.0
   #+begin_src conf
   [Settings]
   gtk-fallback-icon-theme=Numix
   gtk-icon-theme-name=Canta
   gtk-key-theme-name=Emacs
   gtk-theme-name=Canta
   #+end_src
* fontconfig
   #+begin_src conf
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
   <fontconfig>
     <alias>
       <family>serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>sans-serif</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
     <alias>
       <family>monospace</family>
       <prefer>
	 <family>Noto Color Emoji</family>
       </prefer>
     </alias>
   </fontconfig>
   #+end_src

* pycodestyle
   #+begin_src conf
   [pycodestyle]
   max-line-length = 90
   #+end_src
* Flake
   #+begin_src conf
   [flake8]
   max-line-length = 88
   exclude = tests/*
   max-complexity = 10
   #+end_src

* Bashrc
   #+BEGIN_SRC shell-script

   # ------------------------------
   # SHELL - CLI SOFTWARE
   # ------------------------------

   a-projects-update ()
   {
       a-welcome " -- Git Projects Puller"

       # Update git projects in granchild folders
       # set arguments as default dir
       # DIR should parent folder:
       # - Parent
       #   + Child
       #     + GrandChild
       #     + GrandChild
       #   + Child
       #     + GrandChild
       #     + GrandChild
       #   + Child

       if [[ $# = 0 ]]; then
	   DIR="$HOME/Projects"
       else
	   DIR="$1"
       fi

       a-notify " -- DIR is now $DIR"
       a-cd "$DIR"

       a-notify " -- Enter Sub Folders"
       for directory in *; do
	   if [ -d "${directory}" ]; then
	       # Ignore personal projects (require git pass)
	       if [ "${directory}" == "personal"  ]; then
		   continue
	       else
		   cd "${directory}"
	       fi

	       a-notify " -- Updating Git Projects"
	       for directory in *; do
		   if [ -d "${directory}" ]; then
		       cd "${directory}"
		       git clean -fdx
		       git pull origin master

		       cd ..
		       # pwd
		   fi
	       done

	       cd ..
	       # pwd
	   fi
       done

       a-sucess "Done"
   }

   a-projects-send ()
   {
       a-welcome "Zipping Projects"

       a-notify " -- Remove zipped folder"
       a-folder-exist-do "$HOME/Downloads/zipped" "rm -rf"

       a-notify " -- Enter zipped folder"
       a-folder-not-exist-do "$HOME/Downloads/zipped" "mkdir" "yes"

       a-notify " -- Downloading Projects"
       zip=(https://github.com/python/cpython
	    https://github.com/pypa/pip
	    https://github.com/pypa/wheel
	    https://github.com/pypa/setuptools
	    https://github.com/django/django
	    https://github.com/palantir/python-language-server
	    https://github.com/PyCQA/pylint
	    https://github.com/sbcl/sbcl
	    https://github.com/quicklisp/quicklisp-bootstrap
	    https://gitlab.common-lisp.net/alexandria/alexandria/-/archive/master/alexandria-master.zip
	    httpsn://gitlab.common-lisp.net/asdf/asdf/-/archive/master/asdf-master.zip
	    https://github.com/atlas-engineer/next
	    https://github.com/stumpwm/stumpwm
	    https://github.com/stumpwm/stumpwm-contrib
	    https://github.com/emacs-lsp/lsp-mode
	    https://github.com/lxbarbosa/emacs-lisp-style-guide
	    https://github.com/joaotavora/eglot
	    https://github.com/emacs-mirror/emacs)

       for i in "${zip[@]}"; do wget "$i/archive/master.zip"; done

       # a-notify " -- Add suffix .zip to non .zip suffixed files"
       # for i in $(ls -r *.zip.*); do
       #     mv "$i" "$i.zip"
       # done

       echo " -- Zip files to Projects Titles (master.zip)"

       a-notify " -- Extracting zipped Projects"
       if [ -x "$(command -v unzip)" ]; then
	   # ignore folders
	   for file in $(ls -r); do
	       if [ -d "${file}" ]; then
		   continue
	       fi

	       unzip "$file"
	   done
       fi

       a-notify " -- Remove Projects Zipped files"
       for file in $(ls -r *.zip); do
	   if [ -d "${file}" ]; then
	       continue
	   fi

	   rm "${file}"
       done

       a-notify " -- Zip Projects folders"
       if [ -x "$(command -v zip)" ]; then
	   for file in $(ls -r); do
	       if [ -d "${file}" ]; then

		   zip -r "${file}.zip" "${file}"
	       fi
	   done
       fi

       a-notify " -- Remove Projects Folders"
       for file in $(ls -r); do
	   if [ -d "${file}" ]; then
	       rm -rf "${file}"
	   fi
       done

       a-notify " -- Send zipped projects to Mobile Phone"
       kdeconnect-cli -d $(kdeconnect-cli -l --id-only) --share \
		      "$HOME"/Downloads/zipped/*.zip
   }


   if [ ! -f "$XDG_CONFIG_HOME/dwm/dwm-systray-20190208-cb3f58a.diff" ]; then
       echo -e " -- Patching dwm."
       wget -c https://dwm.suckless.org/patches/systray/dwm-systray-20190208-cb3f58a.diff
       git apply dwm-systray-20190208-cb3f58a.diff
   fi

   # -- install
   ((echo -e " -- Make HOME Default Directories"
     mkdir -pv "$HOME"/{Documents,Pictures,.config/screen,.local/{bin,share/fonts}})

    DATA_FOLDER="/data"

    (echo -e " -- symbolic linking DATA_FOLDER directories to HOME"

     folders=(Books
	      Music
	      Videos)

     for i in "${folders[@]}"; do
	 ln -sfv "$DATA_FOLDER/$i" "$HOME/$i"
     done)

    (if [ ! -x "$(command -v emacs)" ]; then
	 echo -e "-- NULL -- GNU Emacs IS NOT INSTALLED. jeez."
     else
	 cd "$DATA_FOLDER/dots" || echo "There is no $_ folder"

	 echo -e " -- Tangling HOME files"
	 emacs --batch -l org dotfiles.org -f org-babel-tangle
     fi)
   )
   #+END_SRC

* Tmux
   #+begin_src conf
   set-option -g default-shell "/usr/bin/bash"

   24-bit color
   set -ga terminal-overrides ",xterm-termite:Tc"

   24 Colors
   set -g default-terminal "screen-256color-italic"
   set-option -ga terminal-overrides ",xterm-256color*:Tc:smso"

   mouse
   bind-key m set-option -g mouse on \; display 'Mouse: ON'
   bind-key M set-option -g mouse off \; display 'Mouse: OFF'

   #+end_src
* .xprofile
   #+begin_src shell-script ~/.xprofile :tangle-mode (identity #o755)
   #!/usr/bin/env bash

   source "$HOME/.profile"
   #+end_src
* autostart
   #+begin_src shell
   [ -x "$(command -v feh)" ] && feh --recursive --randomize --bg-max "$HOME/Pictures/wallpapers" &
   #+end_src
* Make
** Template - Base
*** C
      #+BEGIN_SRC makefile
      CC = gcc
      CFLAGS = -Wall -Werror -std=c99
      LDFLAGS =
      SRC = src/main.c
      DIST = dist
      SHELL = sh
      RM = rm -rf

      default:
	      @echo "make install	-- fresh install of package"
	      @echo "make all		-- clean previous install, build and run program"
	      @echo "make clean		-- clean non-essential files"
	      @echo "make build		-- compile and prepare program to run"

      .PHONY: all
      all: clean build run

      .PHONY: clean
      clean:
	      $(RM) $(DIST)

      .PHONY: build
      build:
	      mkdir $(DIST)
	      $(CC) -o $(DIST)/transpose $(CFLAGS) $(SRC)

      .PHONY: run
      run:
	      ./dist/transpose
      #+END_SRC
*** C++
    #+BEGIN_SRC makefile
    CXX = g++
    CPPFLAGS =						# put pre-processor settings (-I, -D, etc) here
    CXXFLAGS = -Wall -std=c++14				# put compiler settings here
    LDFLAGS =					# put linker settings here

    build:
	    $(CXX) -o output $(CXXFLAGS) hello.cpp

    run:
	    ./output

    clean:
	    rm -rf output

    .PHONY: all
    all: clean build run
	    rm output
    #+END_SRC
*** Dotfiles make
     #+BEGIN_SRC shell-script
     # Global Variables
     SHELL = bash
     DATA_FOLDER= /data
     ALL= $(DATA_FOLDER)/all
     EMACS= emacs

     .PHONY: folders
     folders:
	     mkdir -pv ~/{Documents,Downloads,Pictures,.config/screen,.local/bin}

     .PHONY: symlink
     symlink:
	     ln -sfv $(DATA_FOLDER)/Books ~/Books
	     ln -sfv $(DATA_FOLDER)/Music ~/Music
	     ln -sfv $(DATA_FOLDER)/Videos ~/Videos

     .PHONY: tangle
     tangle:
	     $(EMACS) --batch -l org $(ALL)/dotfiles.org -f org-babel-tangle

     .PHONY: all
     all: folders symlink tangle

     #+END_SRC

* Suckless
** st
    #+begin_src c
    /* See LICENSE file for copyright and license details. */

    /*
     ,* appearance
     ,*
     ,* font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
     ,*/
    static char *font = "JetBrains Mono:pixelsize=15:antialias=true:autohint=true";
    static int borderpx = 2;

    /*
     ,* What program is execed by st depends of these precedence rules:
     ,* 1: program passed with -e
     ,* 2: scroll and/or utmp
     ,* 3: SHELL environment variable
     ,* 4: value of shell in /etc/passwd
     ,* 5: value of shell in config.h
     ,*/
    static char *shell = "/bin/sh";
    char *utmp = NULL;
    /* scroll program: to enable use a string like "scroll" */
    char *scroll = NULL;
    char *stty_args = "stty raw pass8 nl -echo -iexten -cstopb 38400";

    /* identification sequence returned in DA and DECID */
    char *vtiden = "\033[?6c";

    /* Kerning / character bounding-box multipliers */
    static float cwscale = 1.0;
    static float chscale = 1.0;

    /*
     ,* word delimiter string
     ,*
     ,* More advanced example: L" `'\"()[]{}"
     ,*/
    wchar_t *worddelimiters = L" ";

    /* selection timeouts (in milliseconds) */
    static unsigned int doubleclicktimeout = 300;
    static unsigned int tripleclicktimeout = 600;

    /* alt screens */
    int allowaltscreen = 1;

    /* allow certain non-interactive (insecure) window operations such as:
       setting the clipboard text */
    int allowwindowops = 0;

    /*
     ,* draw latency range in ms - from new content/keypress/etc until drawing.
     ,* within this range, st draws when content stops arriving (idle). mostly it's
     ,* near minlatency, but it waits longer for slow updates to avoid partial draw.
     ,* low minlatency will tear/flicker more, as it can "detect" idle too early.
     ,*/
    static double minlatency = 8;
    static double maxlatency = 33;

    /*
     ,* blinking timeout (set to 0 to disable blinking) for the terminal blinking
     ,* attribute.
     ,*/
    static unsigned int blinktimeout = 800;

    /*
     ,* thickness of underline and bar cursors
     ,*/
    static unsigned int cursorthickness = 2;

    /*
     ,* bell volume. It must be a value between -100 and 100. Use 0 for disabling
     ,* it
     ,*/
    static int bellvolume = 0;

    /* default TERM value */
    char *termname = "st";

    /*
     ,* spaces per tab
     ,*
     ,* When you are changing this value, don't forget to adapt the ¬ªit¬´ value in
     ,* the st.info and appropriately install the st.info in the environment where
     ,* you use this st version.
     ,*
     ,*	it#$tabspaces,
     ,*
     ,* Secondly make sure your kernel is not expanding tabs. When running `stty
     ,* -a` ¬ªtab0¬´ should appear. You can tell the terminal to not expand tabs by
     ,*  running following command:
     ,*
     ,*	stty tabs
     ,*/
    unsigned int tabspaces = 8;

    /* Terminal colors (16 first used in escape sequence) */
    static const char *colorname[] = {
	    /* 8 normal colors */
	    "black",
	    "red3",
	    "green3",
	    "yellow3",
	    "blue2",
	    "magenta3",
	    "cyan3",
	    "gray90",

	    /* 8 bright colors */
	    "gray50",
	    "red",
	    "green",
	    "yellow",
	    "#5c5cff",
	    "magenta",
	    "cyan",
	    "white",

	    [255] = 0,

	    /* more colors can be added after 255 to use with DefaultXX */
	    "#cccccc",
	    "#555555",
    };


    /*
     ,* Default colors (colorname index)
     ,* foreground, background, cursor, reverse cursor
     ,*/
    unsigned int defaultfg = 7;
    unsigned int defaultbg = 0;
    static unsigned int defaultcs = 256;
    static unsigned int defaultrcs = 257;

    /*
     ,* Default shape of cursor
     ,* 2: Block ("‚ñà")
     ,* 4: Underline ("_")
     ,* 6: Bar ("|")
     ,* 7: Snowman ("‚òÉ")
     ,*/
    static unsigned int cursorshape = 7;

    /*
     ,* Default columns and rows numbers
     ,*/

    static unsigned int cols = 80;
    static unsigned int rows = 24;

    /*
     ,* Default colour and shape of the mouse cursor
     ,*/
    static unsigned int mouseshape = XC_xterm;
    static unsigned int mousefg = 7;
    static unsigned int mousebg = 0;

    /*
     ,* Color used to display font attributes when fontconfig selected a font which
     ,* doesn't match the ones requested.
     ,*/
    static unsigned int defaultattr = 11;

    /*
     ,* Force mouse select/shortcuts while mask is active (when MODE_MOUSE is set).
     ,* Note that if you want to use ShiftMask with selmasks, set this to an other
     ,* modifier, set to 0 to not use it.
     ,*/
    static uint forcemousemod = ShiftMask;

    /*
     ,* Internal mouse shortcuts.
     ,* Beware that overloading Button1 will disable the selection.
     ,*/
    static MouseShortcut mshortcuts[] = {
	    /* mask                 button   function        argument       release */
	    { XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
	    { ShiftMask,            Button4, ttysend,        {.s = "\033[5;2~"} },
	    { XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"} },
	    { ShiftMask,            Button5, ttysend,        {.s = "\033[6;2~"} },
	    { XK_ANY_MOD,           Button5, ttysend,        {.s = "\005"} },
    };

    /* Internal keyboard shortcuts. */
    #define MODKEY Mod1Mask
    #define TERMMOD (ControlMask|ShiftMask)

    static Shortcut shortcuts[] = {
	    /* mask                 keysym          function        argument */
	    { XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
	    { ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
	    { ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
	    { XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
	    { TERMMOD,              XK_Prior,       zoom,           {.f = +1} },
	    { TERMMOD,              XK_Next,        zoom,           {.f = -1} },
	    { TERMMOD,              XK_Home,        zoomreset,      {.f =  0} },
	    { TERMMOD,              XK_C,           clipcopy,       {.i =  0} },
	    { TERMMOD,              XK_V,           clippaste,      {.i =  0} },
	    { TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
	    { ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
	    { TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
    };

    /*
     ,* Special keys (change & recompile st.info accordingly)
     ,*
     ,* Mask value:
     ,* * Use XK_ANY_MOD to match the key no matter modifiers state
     ,* * Use XK_NO_MOD to match the key alone (no modifiers)
     ,* appkey value:
     ,* * 0: no value
     ,* * > 0: keypad application mode enabled
     ,* *   = 2: term.numlock = 1
     ,* * < 0: keypad application mode disabled
     ,* appcursor value:
     ,* * 0: no value
     ,* * > 0: cursor application mode enabled
     ,* * < 0: cursor application mode disabled
     ,*
     ,* Be careful with the order of the definitions because st searches in
     ,* this table sequentially, so any XK_ANY_MOD must be in the last
     ,* position for a key.
     ,*/

    /*
     ,* If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
     ,* to be mapped below, add them to this array.
     ,*/
    static KeySym mappedkeys[] = { -1 };

    /*
     ,* State bits to ignore when matching key or button events.  By default,
     ,* numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
     ,*/
    static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;

    /*
     ,* This is the huge key array which defines all compatibility to the Linux
     ,* world. Please decide about changes wisely.
     ,*/
    static Key key[] = {
	    /* keysym           mask            string      appkey appcursor */
	    { XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1},
	    { XK_KP_Home,       ShiftMask,      "\033[1;2H",     0,   +1},
	    { XK_KP_Home,       XK_ANY_MOD,     "\033[H",        0,   -1},
	    { XK_KP_Home,       XK_ANY_MOD,     "\033[1~",       0,   +1},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033Ox",       +1,    0},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033[A",        0,   -1},
	    { XK_KP_Up,         XK_ANY_MOD,     "\033OA",        0,   +1},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033Or",       +1,    0},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033[B",        0,   -1},
	    { XK_KP_Down,       XK_ANY_MOD,     "\033OB",        0,   +1},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033Ot",       +1,    0},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033[D",        0,   -1},
	    { XK_KP_Left,       XK_ANY_MOD,     "\033OD",        0,   +1},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033Ov",       +1,    0},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033[C",        0,   -1},
	    { XK_KP_Right,      XK_ANY_MOD,     "\033OC",        0,   +1},
	    { XK_KP_Prior,      ShiftMask,      "\033[5;2~",     0,    0},
	    { XK_KP_Prior,      XK_ANY_MOD,     "\033[5~",       0,    0},
	    { XK_KP_Begin,      XK_ANY_MOD,     "\033[E",        0,    0},
	    { XK_KP_End,        ControlMask,    "\033[J",       -1,    0},
	    { XK_KP_End,        ControlMask,    "\033[1;5F",    +1,    0},
	    { XK_KP_End,        ShiftMask,      "\033[K",       -1,    0},
	    { XK_KP_End,        ShiftMask,      "\033[1;2F",    +1,    0},
	    { XK_KP_End,        XK_ANY_MOD,     "\033[4~",       0,    0},
	    { XK_KP_Next,       ShiftMask,      "\033[6;2~",     0,    0},
	    { XK_KP_Next,       XK_ANY_MOD,     "\033[6~",       0,    0},
	    { XK_KP_Insert,     ShiftMask,      "\033[2;2~",    +1,    0},
	    { XK_KP_Insert,     ShiftMask,      "\033[4l",      -1,    0},
	    { XK_KP_Insert,     ControlMask,    "\033[L",       -1,    0},
	    { XK_KP_Insert,     ControlMask,    "\033[2;5~",    +1,    0},
	    { XK_KP_Insert,     XK_ANY_MOD,     "\033[4h",      -1,    0},
	    { XK_KP_Insert,     XK_ANY_MOD,     "\033[2~",      +1,    0},
	    { XK_KP_Delete,     ControlMask,    "\033[M",       -1,    0},
	    { XK_KP_Delete,     ControlMask,    "\033[3;5~",    +1,    0},
	    { XK_KP_Delete,     ShiftMask,      "\033[2K",      -1,    0},
	    { XK_KP_Delete,     ShiftMask,      "\033[3;2~",    +1,    0},
	    { XK_KP_Delete,     XK_ANY_MOD,     "\033[P",       -1,    0},
	    { XK_KP_Delete,     XK_ANY_MOD,     "\033[3~",      +1,    0},
	    { XK_KP_Multiply,   XK_ANY_MOD,     "\033Oj",       +2,    0},
	    { XK_KP_Add,        XK_ANY_MOD,     "\033Ok",       +2,    0},
	    { XK_KP_Enter,      XK_ANY_MOD,     "\033OM",       +2,    0},
	    { XK_KP_Enter,      XK_ANY_MOD,     "\r",           -1,    0},
	    { XK_KP_Subtract,   XK_ANY_MOD,     "\033Om",       +2,    0},
	    { XK_KP_Decimal,    XK_ANY_MOD,     "\033On",       +2,    0},
	    { XK_KP_Divide,     XK_ANY_MOD,     "\033Oo",       +2,    0},
	    { XK_KP_0,          XK_ANY_MOD,     "\033Op",       +2,    0},
	    { XK_KP_1,          XK_ANY_MOD,     "\033Oq",       +2,    0},
	    { XK_KP_2,          XK_ANY_MOD,     "\033Or",       +2,    0},
	    { XK_KP_3,          XK_ANY_MOD,     "\033Os",       +2,    0},
	    { XK_KP_4,          XK_ANY_MOD,     "\033Ot",       +2,    0},
	    { XK_KP_5,          XK_ANY_MOD,     "\033Ou",       +2,    0},
	    { XK_KP_6,          XK_ANY_MOD,     "\033Ov",       +2,    0},
	    { XK_KP_7,          XK_ANY_MOD,     "\033Ow",       +2,    0},
	    { XK_KP_8,          XK_ANY_MOD,     "\033Ox",       +2,    0},
	    { XK_KP_9,          XK_ANY_MOD,     "\033Oy",       +2,    0},
	    { XK_Up,            ShiftMask,      "\033[1;2A",     0,    0},
	    { XK_Up,            Mod1Mask,       "\033[1;3A",     0,    0},
	    { XK_Up,         ShiftMask|Mod1Mask,"\033[1;4A",     0,    0},
	    { XK_Up,            ControlMask,    "\033[1;5A",     0,    0},
	    { XK_Up,      ShiftMask|ControlMask,"\033[1;6A",     0,    0},
	    { XK_Up,       ControlMask|Mod1Mask,"\033[1;7A",     0,    0},
	    { XK_Up,ShiftMask|ControlMask|Mod1Mask,"\033[1;8A",  0,    0},
	    { XK_Up,            XK_ANY_MOD,     "\033[A",        0,   -1},
	    { XK_Up,            XK_ANY_MOD,     "\033OA",        0,   +1},
	    { XK_Down,          ShiftMask,      "\033[1;2B",     0,    0},
	    { XK_Down,          Mod1Mask,       "\033[1;3B",     0,    0},
	    { XK_Down,       ShiftMask|Mod1Mask,"\033[1;4B",     0,    0},
	    { XK_Down,          ControlMask,    "\033[1;5B",     0,    0},
	    { XK_Down,    ShiftMask|ControlMask,"\033[1;6B",     0,    0},
	    { XK_Down,     ControlMask|Mod1Mask,"\033[1;7B",     0,    0},
	    { XK_Down,ShiftMask|ControlMask|Mod1Mask,"\033[1;8B",0,    0},
	    { XK_Down,          XK_ANY_MOD,     "\033[B",        0,   -1},
	    { XK_Down,          XK_ANY_MOD,     "\033OB",        0,   +1},
	    { XK_Left,          ShiftMask,      "\033[1;2D",     0,    0},
	    { XK_Left,          Mod1Mask,       "\033[1;3D",     0,    0},
	    { XK_Left,       ShiftMask|Mod1Mask,"\033[1;4D",     0,    0},
	    { XK_Left,          ControlMask,    "\033[1;5D",     0,    0},
	    { XK_Left,    ShiftMask|ControlMask,"\033[1;6D",     0,    0},
	    { XK_Left,     ControlMask|Mod1Mask,"\033[1;7D",     0,    0},
	    { XK_Left,ShiftMask|ControlMask|Mod1Mask,"\033[1;8D",0,    0},
	    { XK_Left,          XK_ANY_MOD,     "\033[D",        0,   -1},
	    { XK_Left,          XK_ANY_MOD,     "\033OD",        0,   +1},
	    { XK_Right,         ShiftMask,      "\033[1;2C",     0,    0},
	    { XK_Right,         Mod1Mask,       "\033[1;3C",     0,    0},
	    { XK_Right,      ShiftMask|Mod1Mask,"\033[1;4C",     0,    0},
	    { XK_Right,         ControlMask,    "\033[1;5C",     0,    0},
	    { XK_Right,   ShiftMask|ControlMask,"\033[1;6C",     0,    0},
	    { XK_Right,    ControlMask|Mod1Mask,"\033[1;7C",     0,    0},
	    { XK_Right,ShiftMask|ControlMask|Mod1Mask,"\033[1;8C",0,   0},
	    { XK_Right,         XK_ANY_MOD,     "\033[C",        0,   -1},
	    { XK_Right,         XK_ANY_MOD,     "\033OC",        0,   +1},
	    { XK_ISO_Left_Tab,  ShiftMask,      "\033[Z",        0,    0},
	    { XK_Return,        Mod1Mask,       "\033\r",        0,    0},
	    { XK_Return,        XK_ANY_MOD,     "\r",            0,    0},
	    { XK_Insert,        ShiftMask,      "\033[4l",      -1,    0},
	    { XK_Insert,        ShiftMask,      "\033[2;2~",    +1,    0},
	    { XK_Insert,        ControlMask,    "\033[L",       -1,    0},
	    { XK_Insert,        ControlMask,    "\033[2;5~",    +1,    0},
	    { XK_Insert,        XK_ANY_MOD,     "\033[4h",      -1,    0},
	    { XK_Insert,        XK_ANY_MOD,     "\033[2~",      +1,    0},
	    { XK_Delete,        ControlMask,    "\033[M",       -1,    0},
	    { XK_Delete,        ControlMask,    "\033[3;5~",    +1,    0},
	    { XK_Delete,        ShiftMask,      "\033[2K",      -1,    0},
	    { XK_Delete,        ShiftMask,      "\033[3;2~",    +1,    0},
	    { XK_Delete,        XK_ANY_MOD,     "\033[P",       -1,    0},
	    { XK_Delete,        XK_ANY_MOD,     "\033[3~",      +1,    0},
	    { XK_BackSpace,     XK_NO_MOD,      "\177",          0,    0},
	    { XK_BackSpace,     Mod1Mask,       "\033\177",      0,    0},
	    { XK_Home,          ShiftMask,      "\033[2J",       0,   -1},
	    { XK_Home,          ShiftMask,      "\033[1;2H",     0,   +1},
	    { XK_Home,          XK_ANY_MOD,     "\033[H",        0,   -1},
	    { XK_Home,          XK_ANY_MOD,     "\033[1~",       0,   +1},
	    { XK_End,           ControlMask,    "\033[J",       -1,    0},
	    { XK_End,           ControlMask,    "\033[1;5F",    +1,    0},
	    { XK_End,           ShiftMask,      "\033[K",       -1,    0},
	    { XK_End,           ShiftMask,      "\033[1;2F",    +1,    0},
	    { XK_End,           XK_ANY_MOD,     "\033[4~",       0,    0},
	    { XK_Prior,         ControlMask,    "\033[5;5~",     0,    0},
	    { XK_Prior,         ShiftMask,      "\033[5;2~",     0,    0},
	    { XK_Prior,         XK_ANY_MOD,     "\033[5~",       0,    0},
	    { XK_Next,          ControlMask,    "\033[6;5~",     0,    0},
	    { XK_Next,          ShiftMask,      "\033[6;2~",     0,    0},
	    { XK_Next,          XK_ANY_MOD,     "\033[6~",       0,    0},
	    { XK_F1,            XK_NO_MOD,      "\033OP" ,       0,    0},
	    { XK_F1, /* F13 */  ShiftMask,      "\033[1;2P",     0,    0},
	    { XK_F1, /* F25 */  ControlMask,    "\033[1;5P",     0,    0},
	    { XK_F1, /* F37 */  Mod4Mask,       "\033[1;6P",     0,    0},
	    { XK_F1, /* F49 */  Mod1Mask,       "\033[1;3P",     0,    0},
	    { XK_F1, /* F61 */  Mod3Mask,       "\033[1;4P",     0,    0},
	    { XK_F2,            XK_NO_MOD,      "\033OQ" ,       0,    0},
	    { XK_F2, /* F14 */  ShiftMask,      "\033[1;2Q",     0,    0},
	    { XK_F2, /* F26 */  ControlMask,    "\033[1;5Q",     0,    0},
	    { XK_F2, /* F38 */  Mod4Mask,       "\033[1;6Q",     0,    0},
	    { XK_F2, /* F50 */  Mod1Mask,       "\033[1;3Q",     0,    0},
	    { XK_F2, /* F62 */  Mod3Mask,       "\033[1;4Q",     0,    0},
	    { XK_F3,            XK_NO_MOD,      "\033OR" ,       0,    0},
	    { XK_F3, /* F15 */  ShiftMask,      "\033[1;2R",     0,    0},
	    { XK_F3, /* F27 */  ControlMask,    "\033[1;5R",     0,    0},
	    { XK_F3, /* F39 */  Mod4Mask,       "\033[1;6R",     0,    0},
	    { XK_F3, /* F51 */  Mod1Mask,       "\033[1;3R",     0,    0},
	    { XK_F3, /* F63 */  Mod3Mask,       "\033[1;4R",     0,    0},
	    { XK_F4,            XK_NO_MOD,      "\033OS" ,       0,    0},
	    { XK_F4, /* F16 */  ShiftMask,      "\033[1;2S",     0,    0},
	    { XK_F4, /* F28 */  ControlMask,    "\033[1;5S",     0,    0},
	    { XK_F4, /* F40 */  Mod4Mask,       "\033[1;6S",     0,    0},
	    { XK_F4, /* F52 */  Mod1Mask,       "\033[1;3S",     0,    0},
	    { XK_F5,            XK_NO_MOD,      "\033[15~",      0,    0},
	    { XK_F5, /* F17 */  ShiftMask,      "\033[15;2~",    0,    0},
	    { XK_F5, /* F29 */  ControlMask,    "\033[15;5~",    0,    0},
	    { XK_F5, /* F41 */  Mod4Mask,       "\033[15;6~",    0,    0},
	    { XK_F5, /* F53 */  Mod1Mask,       "\033[15;3~",    0,    0},
	    { XK_F6,            XK_NO_MOD,      "\033[17~",      0,    0},
	    { XK_F6, /* F18 */  ShiftMask,      "\033[17;2~",    0,    0},
	    { XK_F6, /* F30 */  ControlMask,    "\033[17;5~",    0,    0},
	    { XK_F6, /* F42 */  Mod4Mask,       "\033[17;6~",    0,    0},
	    { XK_F6, /* F54 */  Mod1Mask,       "\033[17;3~",    0,    0},
	    { XK_F7,            XK_NO_MOD,      "\033[18~",      0,    0},
	    { XK_F7, /* F19 */  ShiftMask,      "\033[18;2~",    0,    0},
	    { XK_F7, /* F31 */  ControlMask,    "\033[18;5~",    0,    0},
	    { XK_F7, /* F43 */  Mod4Mask,       "\033[18;6~",    0,    0},
	    { XK_F7, /* F55 */  Mod1Mask,       "\033[18;3~",    0,    0},
	    { XK_F8,            XK_NO_MOD,      "\033[19~",      0,    0},
	    { XK_F8, /* F20 */  ShiftMask,      "\033[19;2~",    0,    0},
	    { XK_F8, /* F32 */  ControlMask,    "\033[19;5~",    0,    0},
	    { XK_F8, /* F44 */  Mod4Mask,       "\033[19;6~",    0,    0},
	    { XK_F8, /* F56 */  Mod1Mask,       "\033[19;3~",    0,    0},
	    { XK_F9,            XK_NO_MOD,      "\033[20~",      0,    0},
	    { XK_F9, /* F21 */  ShiftMask,      "\033[20;2~",    0,    0},
	    { XK_F9, /* F33 */  ControlMask,    "\033[20;5~",    0,    0},
	    { XK_F9, /* F45 */  Mod4Mask,       "\033[20;6~",    0,    0},
	    { XK_F9, /* F57 */  Mod1Mask,       "\033[20;3~",    0,    0},
	    { XK_F10,           XK_NO_MOD,      "\033[21~",      0,    0},
	    { XK_F10, /* F22 */ ShiftMask,      "\033[21;2~",    0,    0},
	    { XK_F10, /* F34 */ ControlMask,    "\033[21;5~",    0,    0},
	    { XK_F10, /* F46 */ Mod4Mask,       "\033[21;6~",    0,    0},
	    { XK_F10, /* F58 */ Mod1Mask,       "\033[21;3~",    0,    0},
	    { XK_F11,           XK_NO_MOD,      "\033[23~",      0,    0},
	    { XK_F11, /* F23 */ ShiftMask,      "\033[23;2~",    0,    0},
	    { XK_F11, /* F35 */ ControlMask,    "\033[23;5~",    0,    0},
	    { XK_F11, /* F47 */ Mod4Mask,       "\033[23;6~",    0,    0},
	    { XK_F11, /* F59 */ Mod1Mask,       "\033[23;3~",    0,    0},
	    { XK_F12,           XK_NO_MOD,      "\033[24~",      0,    0},
	    { XK_F12, /* F24 */ ShiftMask,      "\033[24;2~",    0,    0},
	    { XK_F12, /* F36 */ ControlMask,    "\033[24;5~",    0,    0},
	    { XK_F12, /* F48 */ Mod4Mask,       "\033[24;6~",    0,    0},
	    { XK_F12, /* F60 */ Mod1Mask,       "\033[24;3~",    0,    0},
	    { XK_F13,           XK_NO_MOD,      "\033[1;2P",     0,    0},
	    { XK_F14,           XK_NO_MOD,      "\033[1;2Q",     0,    0},
	    { XK_F15,           XK_NO_MOD,      "\033[1;2R",     0,    0},
	    { XK_F16,           XK_NO_MOD,      "\033[1;2S",     0,    0},
	    { XK_F17,           XK_NO_MOD,      "\033[15;2~",    0,    0},
	    { XK_F18,           XK_NO_MOD,      "\033[17;2~",    0,    0},
	    { XK_F19,           XK_NO_MOD,      "\033[18;2~",    0,    0},
	    { XK_F20,           XK_NO_MOD,      "\033[19;2~",    0,    0},
	    { XK_F21,           XK_NO_MOD,      "\033[20;2~",    0,    0},
	    { XK_F22,           XK_NO_MOD,      "\033[21;2~",    0,    0},
	    { XK_F23,           XK_NO_MOD,      "\033[23;2~",    0,    0},
	    { XK_F24,           XK_NO_MOD,      "\033[24;2~",    0,    0},
	    { XK_F25,           XK_NO_MOD,      "\033[1;5P",     0,    0},
	    { XK_F26,           XK_NO_MOD,      "\033[1;5Q",     0,    0},
	    { XK_F27,           XK_NO_MOD,      "\033[1;5R",     0,    0},
	    { XK_F28,           XK_NO_MOD,      "\033[1;5S",     0,    0},
	    { XK_F29,           XK_NO_MOD,      "\033[15;5~",    0,    0},
	    { XK_F30,           XK_NO_MOD,      "\033[17;5~",    0,    0},
	    { XK_F31,           XK_NO_MOD,      "\033[18;5~",    0,    0},
	    { XK_F32,           XK_NO_MOD,      "\033[19;5~",    0,    0},
	    { XK_F33,           XK_NO_MOD,      "\033[20;5~",    0,    0},
	    { XK_F34,           XK_NO_MOD,      "\033[21;5~",    0,    0},
	    { XK_F35,           XK_NO_MOD,      "\033[23;5~",    0,    0},
    };

    /*
     ,* Selection types' masks.
     ,* Use the same masks as usual.
     ,* Button1Mask is always unset, to make masks match between ButtonPress.
     ,* ButtonRelease and MotionNotify.
     ,* If no match is found, regular selection is used.
     ,*/
    static uint selmasks[] = {
	    [SEL_RECTANGULAR] = Mod1Mask,
    };

    /*
     ,* Printable characters in ASCII, used to estimate the advance width
     ,* of single wide characters.
     ,*/
    static char ascii_printable[] =
	    " !\"#$%&'()*+,-./0123456789:;<=>?"
	    "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
	    "`abcdefghijklmnopqrstuvwxyz{|}~";
    #+end_src


** Dmenu
*** dmenu - record it
     #+BEGIN_SRC shell-script
     #!/bin/sh

     # Usage:
     # `record`: Ask for recording type via dmenu
     # `record screencast`: Record both audio and screen
     # `record video`: Record only screen
     # `record audio`: Record only audio
     # `record kill`: Kill existing recording
     #
     # If there is already a running instance, user will be prompted to end it.

     updateicon() { \
		    echo "$1" > ~/.recordingicon
		    pkill -RTMIN+9 i3blocks
     }

     killrecording() {
	 recpid="$(cat ~/.recordingpid)"
	 # kill with SIGTERM, allowing finishing touches.
	 kill -15 "$recpid"
	 rm -f ~/.recordingpid
	 updateicon ""
	 pkill -RTMIN+9 i3blocks
	 # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	 sleep 3
	 kill -9 "$recpid"
	 exit
     }

     screencast() { \
		    ffmpeg -y \
			   -f x11grab \
			   -framerate 60 \
			   -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
			   -i :0.0 \
			   -f alsa -i default \
			   -r 30 \
			   -c:v libx264rgb -crf 0 -preset ultrafast -c:a flac \
			   "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
		    echo $! > ~/.recordingpid
		    updateicon "‚è∫Ô∏èüéôÔ∏è"
     }

     video() { ffmpeg \
		   -f x11grab \
		   -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
		   -i :0.0 \
		   -c:v libx264 -qp 0 -r 30 \
		   "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	       echo $! > ~/.recordingpid
	       updateicon "‚è∫Ô∏è"
	     }

     webcamhidef() { ffmpeg \
			 -f v412 \
			 -i /dev/video0 \
			 -video_size 1920x1080 \
			 "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
		     echo $! > ~/.recordingpid
		     updateicon "üé•"
		   }

     webcam() { ffmpeg \
		    -f v412 \
		    -i /dev/video0 \
		    -video_size 640x480 \
		    "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
		echo $! > ~/.recordingpid
		updateicon "üé•"
	      }


     audio() { \
	       ffmpeg \
		   -f alsa -i default \
		   -c:a flac \
		   "$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
	       echo $! > ~/.recordingpid
	       updateicon "üéôÔ∏è"
     }

     askrecording() { \
		      choice=$(printf "screencast\\nvideo\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Select recording style:")
		      case "$choice" in
			  screencast) screencast;;
			  audio) audio;;
			  video) video;;
			  webcam) webcamrecord;;
			  "webcam (hi-def)") webcamrecord;;
		      esac
     }

     asktoend() { \
		  response=$(printf "No\\nYes" | dmenu -i -p "Recording still active. End recording?") &&
		      [ "$response" = "Yes" ] &&  killrecording
     }


     case "$1" in
	 screencast) screencast;;
	 audio) audio;;
	 video) video;;
	 kill) killrecording;;
	 ,*) ([ -f ~/.recordingpid ] && asktoend && exit) || askrecording;;
     esac


     #+END_SRC
*** dmenu - mount/unmount drives
     #+BEGIN_SRC shell-script

     #!/bin/sh
     # Gives a dmenu prompt to mount unmounted drives.
     # If they're in /etc/fstab, they'll be mounted automatically.
     # Otherwise, you'll be prompted to give a mountpoint from already existsing directories.
     # If you input a novel directory, it will prompt you to create that directory.
     pgrep -x dmenu && exit

     getmount() { \
		  [ -z "$chosen" ] && exit 1
		  mp="$(find $1 | dmenu -i -p "Type in mount point.")"
		  [ "$mp" = "" ] && exit 1
		  if [ ! -d "$mp" ]; then
		      mkdiryn=$(printf "No\\nYes" | dmenu -i -p "$mp does not exist. Create it?")
		      [ "$mkdiryn" = "Yes" ] && (mkdir -p "$mp" || sudo -A mkdir -p "$mp")
		  fi
     }

     mountusb() { \
		  chosen="$(echo "$usbdrives" | dmenu -i -p "Mount which drive?" | awk '{print $1}')"
		  sudo -A mount "$chosen" && notify-send "$chosen mounted." && exit 0
		  getmount "/mnt /media /mount /home -maxdepth 5 -type d"
		  partitiontype="$(lsblk -no "fstype" "$chosen")"
		  case "$partitiontype" in
		      "vfat") sudo -A mount -t vfat "$chosen" "$mp" -o rw,umask=0000;;
		      ,*) sudo -A mount "$chosen" "$mp";;
		  esac
		  notify-send "$chosen mounted to $mp."
     }

     mountandroid() { \
		      chosen=$(echo "$anddrives" | dmenu -i -p "Which Android device?" | cut -d : -f 1)
		      getmount "$HOME -maxdepth 3 -type d"
		      simple-mtpfs --device "$chosen" "$mp"
		      notify-send "Android device mounted to $mp."
     }

     asktype() { \
		 case $(printf "USB\\nAndroid" | dmenu -i -p "Mount a USB drive or Android device?") in
		     USB) mountusb ;;
		     Android) mountandroid ;;
		 esac
     }

     anddrives=$(simple-mtpfs -l 2>/dev/null)
     usbdrives="$(lsblk -rpo "name,type,size,mountpoint" | awk '$2=="part"&&$4==""{printf "%s (%s)\n",$1,$3}')"

     if [ -z "$usbdrives" ]; then
	 [ -z "$anddrives" ] && echo "No USB drive or Android device detected" && exit
	 echo "Android device(s) detected."
	 mountandroid
     else
	 if [ -z "$anddrives" ]; then
	     echo "USB drive(s) detected."
	     mountusb
	 else
	     echo "Mountable USB drive(s) and Android device(s) detected."
	     asktype
	 fi
     fi

     #+END_SRC
