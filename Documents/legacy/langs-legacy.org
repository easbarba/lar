#+TITLE: Langs Legacy

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#projects][Projects]]
  - [[#cejo][cejo]]
- [[#dotfiles][Dotfiles]]
  - [[#irbrc][irbrc]]
  - [[#blog][Blog]]
  - [[#neovim][neovim]]
  - [[#asdf][asdf]]
  - [[#fish][fish]]
  - [[#shell-software][shell-software]]
  - [[#shell-misc][shell-misc]]
  - [[#shell-custom][shell-custom]]
  - [[#emacs][Emacs]]
  - [[#nixos][Nixos]]
  - [[#bin][bin]]
  - [[#autostart][autostart]]
  - [[#xsessionrc][.xsessionrc]]
  - [[#xinitrc][.xinitrc]]
  - [[#sysinfo][sysinfo]]
  - [[#guix-config][Guix Config]]
  - [[#e_packs][e_packs]]
  - [[#e_distro][e_distro]]
  - [[#nyxt][Nyxt]]
  - [[#bashrc][bashrc]]
  - [[#xserverrc][.xserverrc]]
  - [[#sbcl][Sbcl]]
  - [[#xmobar][Xmobar]]
  - [[#pypirc][.pypirc]]
  - [[#gtk-30][gtk-3.0]]
  - [[#fontconfig][fontconfig]]
  - [[#stalonetray][StaloneTray]]
  - [[#pycodestyle][pycodestyle]]
  - [[#flake][Flake]]
  - [[#stumpwm][StumpWM]]
  - [[#xmonad][Xmonad]]
  - [[#xmobar][Xmobar]]
  - [[#qtile][Qtile]]
  - [[#bashrc][Bashrc]]
  - [[#tmux][Tmux]]
  - [[#xprofile][.xprofile]]
  - [[#autostart][autostart]]
  - [[#make][Make]]
  - [[#suckless][Suckless]]
- [[#languages][Languages]]
  - [[#elixir][Elixir]]
  - [[#javascript][Javascript]]
  - [[#rails][Rails]]
  - [[#frontend][FrontEnd]]
  - [[#css][Css]]
  - [[#html][HTML]]
  - [[#haskell][Haskell]]
  - [[#common-lisp][Common Lisp]]
  - [[#golang][Golang]]
  - [[#php][PHP]]
  - [[#python][Python]]
  - [[#c][C]]
  - [[#rust][Rust]]
  - [[#net][.NET]]
  - [[#swift][Swift]]
  - [[#java][Java]]
  - [[#cpp][CPP]]
- [[#tools][Tools]]
  - [[#devops][DevOps]]
:END:


* Languages
** Elixir
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 3 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
    - [[#priorities][Priorities]]
  - [[#features][Features]]
    - [[#type][Type]]
      - [[#atoms][atoms]]
      - [[#boolean][Boolean]]
      - [[#map][map]]
      - [[#binaries-and-bitstrings][Binaries and bitstrings]]
      - [[#strings-binary-strings][Strings (binary strings)]]
      - [[#character-lists][Character lists]]
      - [[#keyword][Keyword]]
      - [[#mapset][MapSet]]
      - [[#dates][Dates]]
      - [[#time][Time]]
      - [[#datetime][DateTime]]
      - [[#io-lists][IO lists]]
      - [[#typespec][Typespec]]
    - [[#operators][Operators]]
    - [[#macros][Macros]]
    - [[#beam][BEAM]]
      - [[#apply][Apply]]
    - [[#functions][Functions]]
      - [[#default-argument-values][default argument values]]
    - [[#lambdaanonymous-func][lambda/anonymous func]]
      - [[#-operator][& operator]]
  - [[#packages][Packages]]
    - [[#elixir][elixir]]
    - [[#elixirc][elixirc]]
    - [[#eex][eex]]
    - [[#ex_unit][ex_unit]]
    - [[#iex][iex]]
    - [[#paths][Paths]]
    - [[#ex_doc][ex_doc]]
    - [[#phoenix][phoenix]]
    - [[#mix][mix]]
      - [[#format][format]]
  - [[#tests][Tests]]
    - [[#rspec][RSpec]]
    - [[#unit][Unit]]
  :END:
*** Progress
**** Books
     | Books                  | Chapter                  | @                                    | late | revision |
     |------------------------+--------------------------+--------------------------------------+------+----------|
     | Elixir in Action       | Building blocks          | Other built-in types                 |      |          |
     | Programming Elixir 1.6 | Conventional Programming | Ignoring a Value with _ (Underscore) |      |          |
     | Programming in Elixir  | Elixir Basics            |                                      |      |          |
**** SLOC
     | Project   | folder | file | @ |
     |-----------+--------+------+---|
     | elixir    |        |      |   |
     | phoenix   |        |      |   |
     | elixir-ls |        |      |   |
**** Priorities
     - Elixir
     - Phoenix
     - Unit Test
     - SOLID, KISS, YAGNI, DRY, Clean Code, Design Patterns
     - Git
     - HTML/CSS/JS
     - PostgreSQL
     - API REST { YAML, JSON, XML, SOAP }
     - CS
     - English
     - Container
     - Sidekiq
     - Heroku
     - Slim
     - CI/CD
     - Cloud

*** Features
    | features     | example                              | desc   |
    |--------------+--------------------------------------+--------|
    | pin operator | ^                                    | forces |
    | ranges       | 1..100                               |        |
    | regex        | Regex.run ~r{[aeiou]}, "caterpillar" |        |

**** Type
***** atoms
      #+begin_src elixir
      :an_atom
      #+end_src
******* aliases
	- aliases are atoms that begin with upcased: AnAtom
	  -
***** Boolean
      - :true
      - :false
      - true, false are syntax sugar of those
***** map
      #+begin_src elixir
      x = %{1 => '1'}
      y = Map.new({1,'1'}, {2, '2'})

      y[1] # '1'

      Map.get(y, 1)
      Map.get(y, 3, :not_found) # returns `:not_found` as default value if index is no found

      Map.fetch(y, 1) # {:ok, '1'}
      Map.fetch(y, 3) # :error

      Map.put a, 4, '4'

      a = %{:name => 'boy', :age => 2}
      a = %{name: 'boy', age: 2} # shorter notation if keys are atom

      a[:name] #  'boy'
      a.name # 'boy'
      a.height # ** (KeyError) key :non_existent_field not found
      b = %{a | name: 'gota', age: 4}

      #+end_src
***** Binaries and bitstrings
      #+begin_src elixir
      <<1, 2, 3>>
      <<257::16>> # use 16bits
      <<1, 2>> <> <<3, 4>>
      #+end_src
***** Strings (binary strings)
      - printed as a string, but underneath it’s a binary

      #+begin_src elixir
      "Hello World"

      #
      "1 + 1 is equal #{1+1}"

      "String" <> " " <> "concatenation"

      #+end_src
****** conversion
       #+begin_src elixir
       List.to_string/1
       #+end_src
****** embedded string expressions
       #+begin_src elixir
       "1 + 1 is equal #{1+1}"
       #+end_src
****** sigils
       - ~S that doesn’t handle interpolation or escape characters
       #+begin_src elixir
       ~s(This is also a string)
       ~s(1 + 1 = #{3 + 0.14})

       ~S(Not interpolated #{3 + 0.14})
       #+end_src
****** heredocs
       #+begin_src elixir
       """
       Heredoc must end on its own line """
       """
       #+end_src
***** Character lists
      #+begin_src elixir
      'ABC'

      [65, 66, 67]

      ~c(Barri gota)
      ~C(Unescaped sigil #{3 + 0.14})

      '''
      Heredoc
      '''
      #+end_src
****** conversion
       #+begin_src elixir
       String.to_charlist("ABC")
       #+end_src
***** Keyword
      - a list, where each element is a two-element tuple, and the first element of each tuple is an atom. The second element can be of any type
      - often used for small-size key/value structures
      - can contain multiple values for the same key
      - can control the ordering of keyword list elements
      - many functions in standard libraries of Elixir and Erlang take their options as keyword lists.

	#+begin_src elixir
	[{:monday, 1}, {:tuesday, 2}, {:wednesday, 3}]
	[monday: 1, tuesday: 2, wednesday: 3]
	days[:tuesday]
	#+end_src
***** MapSet
      - store of unique values
       #+begin_src elixir
       MapSet.new([:monday, :tuesday, :wednesday])
       #+end_src

****** Functions
       #+begin_src elixir
       MapSet.member?(days, :monday)
       MapSet.put(days, :thursday)
       #+end_src
***** Dates
      - ~D sigil.
	#+begin_src elixir
	date = ~D[2018-01-31]
	date.year # 2018
	#+end_src

***** Time
      - ~T sigil
      #+begin_src elixir
      time = ~T[11:59:12.00007]
      time.hour
      #+end_src

***** DateTime
      #+begin_src elixir
      naive_datetime = ~N[2018-01-31 11:59:12.000007]
      naive_datetime.year
      datetime = DateTime.from_naive!(naive_datetime, "Etc/UTC")
      #+end_src

***** IO lists
      - useful for incrementally building output that will be forwarded to an I/O device, such as a network or a file.
      - Each element of an IO list must be: An integer in the range of 0 to 255, a binary, An IO list
      - Under the hood, the structure is flattened

	#+begin_src elixir
	iolist = [[['H', 'e'], "llo,"], " worl", "d!"]
	IO.puts(iolist)
	#+end_src

***** Typespec
      - type
      - opaque
      - typep
      - spec
      - callback
      - macrocallback
**** Operators
     - many operators in Elixir are actually functions
     - atoms false and nil are treated as falsy
**** Macros
**** BEAM
***** Apply
      Dynamically call functions at runtime.
      #+begin_src elixir
      apply(IO, :puts, ["Dynamic function call."])
      #+end_src
**** Functions
     - can be assigned to a variable

***** default argument values
      #+begin_src elixir
      def my_fun(arg1, arg2, opts \\ "foo")
      #+end_src
**** lambda/anonymous func
     - can be assigned to a variable
     - can be argument of function
     - closure capts outside vars value
     - captures a specific memory location. Rebinding a variable doesn’t affect the previously defined lambda that references the same symbolic name
     #+begin_src elixir
     fn x -> IO.puts(x) end

     Enum.each(
       [1, 2, 3],
       fn x -> IO.puts(x) end
     )
     #+end_src
***** & operator
     - capture operator: &, turns that function into a lambda that can be assigned to a variable.
     - & operator can be used to shorten the lambda definition, making it possible to omit explicit argument naming.
       #+begin_src elixir
       Enum.each([1, 2, 3], &IO.puts/1)

       lambda = fn x, y, z -> x * y + z end # short version of is
       lambda = &(&1 * &2 + &3)
       lambda.(2, 3, 4)
       #+end_src
*** Packages
**** elixir
     |                    |                                                   |
     |--------------------+---------------------------------------------------|
     | --no-halt <script> | BEAM instance wont terminate after script is run |
     |                    |                                                   |

**** elixirc
**** eex
**** ex_unit
**** iex
     |               |               |                     |
     |---------------+---------------+---------------------|
     | h [<feature>] | h IO.puts     | help                |
     | i             |               | interactive         |
     | c <filepath>  | c 'hello.exs' | compile and execute |

**** Paths
     add additional code paths by providing the -pa switch:
     #+begin_src elixir
     iex -pa my/code/path -pa another/code/path
     #+end_src

**** ex_doc
**** phoenix
**** [[https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html][mix]]
     | options                         | desc                       |
     +---------------------------------+----------------------------|
     | mix help deps                   |                            |
     | new <name> --module <Namespace> | new project named <name>   |
     | compile                         | compile the entire project |
     | run -e "<code>"                 |                            |
     | test                            |                            |

***** format

*** Tests
**** RSpec
**** Unit
** Javascript
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
    - [[#skills][SKills]]
  - [[#features][Features]]
    - [[#nubers][Nubers]]
  - [[#concepts][Concepts]]
  - [[#books][Books]]
    - [[#eloquent-javascript][Eloquent JavaScript]]
  - [[#sites][Sites]]
    - [[#web-js---misc][Web JS - Misc]]
    - [[#web-js---online-tools][Web JS - Online Tools]]
  - [[#frameworks][Frameworks]]
  - [[#refactoring][Refactoring]]
  - [[#articles][Articles]]
  - [[#interview][Interview]]
  :END:
*** Progress
**** Books
     | Books                                     | Cap | @                                               | late | revision |
     |-------------------------------------------+-----+-------------------------------------------------+------+----------|
     | JavaScript The Definitive Guide           |   3 | 3.2.4 Binary Floating-Point and Rounding Errors |      |          |
     | Essential TypeScript From Beginner to Pro |     | Marking Tasks Complete                          |      |          |

**** SLOC
     | Project  | folder           | file      | @ |
     |----------+------------------+-----------+---|
     | yarn     | src/cli/commands | access.js |   |
     | node     |                  |           |   |
     | inquirer |                  |           |   |
**** SKills
     - Javascript
     - ES6+
     - NodeJS
     - Design Patterns
*** Features
**** Nubers
     #+begin_src javascript
     0 === -0 // true
     1/0 === 1/-0 // false

     NaN === NaN // false
     Number.isNaN(NaN) // true

     #+end_src

*** Concepts
    - Types: numbers, strings, boolean, null, undefined, symbols
    - Primitives: numbers, strings, boolean, null, undefined

*** Books
**** Eloquent JavaScript
***** 2. Program Structure
****** Exercises
******* Looping a triangle
	#+BEGIN_SRC javascript

	let Hash = "#";
	let numberLoop = 1;

	do {
	    console.log(Hash);
	    Hash = Hash + "#";
	    numberLoop++;
	} while (numberLoop <= 7)

	#+END_SRC
******* FizzBuzz
	#+BEGIN_SRC javascript

	let numberIncreasing = 1;

	while (numberIncreasing <= 100) {

	    if ((numberIncreasing % 3) == 0 && (numberIncreasing % 5)  == 0)
		console.log("FizzBuzz");
	    else
		if ((numberIncreasing % 3) == 0)
		    console.log("Fizz");
	    else
		if ((numberIncreasing % 5)  == 0)
		    console.log("Buzz");
	    else
		console.log(numberIncreasing);

	    numberIncreasing++;
	}

	#+END_SRC
******* ChessBoard
	#+BEGIN_SRC javascript

	let columns = 1;

	while (columns <= 8) {
	    let symbol = "# # # #";

	    if ((columns % 2) === 0)
		console.log(" " + symbol);
	    else
		console.log(symbol);

	    columns++;
	}

	#+END_SRC
***** 3. Functions
****** examples
       #+BEGIN_SRC javascript

       // -----
       const makeNoise = function() {
	   console.log(square("Pling!"));
       };

       makeNoise();


       // -----
       const power = function(base, exponent) {
	   let result = 1;
	   for (let count = 0; count < exponent; count++) {
	       result *= base;
	   }
	   return result;
       };

       console.log(power(2, 10));

       // -----
       const power = (base, exponent) => {
	   let result = 1;
	   for (let count = 0; count < exponent; count++) {
	       result *= base;
	   }
	   return result;
       };


       // -----
       const square1 = (x) => { return x * x; };
       const square1 = x => x * x;


       // -----
       const hummus = function(factor) {
	   const ingredient = function(amount, unit, name){
	       let ingredientAmount = amount * factor;
	       if (ingredientAmount > 1) {
		   unit += "s";
	       }
	       console.log(`${ingredientAmount} ${unit} ${name}`);
	   };

	   ingredient(1, "can", "chickpeas");
	   ingredient(0.25, "cup", "tahini");
	   ingredient(0.25, "cup", "lemon juice");
	   ingredient(1, "tablespoon", "olive oil");
	   ingredient(0.5, "teaspoon", "cumin");
       };
       #+END_SRC
****** exercises
******* Minimum
	#+BEGIN_SRC javascript


	function min(a, b){
	    return (a < b) ? a : b
	}

	console.log(min(20,2))

	#+END_SRC
******* Recursion - isEven
	#+BEGIN_SRC javascript

	function isEven(number){

	    let numberIsEven = false;

	    if (number == 0)
		return numberIsEven = true;
	    else if (number == 1)
		return numberIsEven = false;
	    else if (number <= 0)
		return console.log("Please, enter a natural(positive) number.")
	    else
		return isEven(number - 2);
	}

	isEven(50); // true
	isEven(75); // false
	isEven(-1); // RangeError: Maximum call stack size exceeded
	isEven(-1); // Please, enter a positive number.

	#+END_SRC
******* Bean Counting
	#+BEGIN_SRC javascript

	// -----
	function countBs(string){

	    let BinString = 0;

	    for (let i = 0; i < string.length; i++) {
		if (string[i] == "B")
		    BinString++;
	    }

	    return BinString;
	}

	console.log(countBs("bbC"))


	// -----
	function countChar(string, charToMatch){

	    let BinString = 0;

	    for (let i = 0; i < string.length; i++) {
		if (string[i] == charToMatch)
		    BinString++;
	    }

	    return BinString;
	}

	console.log(countChar("bbC", "B"))

	#+END_SRC
*** Sites
**** Web JS - Misc
     https://bestofjs.org/

     https://leanpub.com/understandinges6/read/#leanpub-auto-block-bindings
**** Web JS - Online Tools
     https://jsperf.com/
*** Frameworks
    https://polyfill.io/v3/

    https://github.com/vuejs/vue

    https://api.jquery.com/
*** Refactoring
    https://medium.com/@jochasinga/how-i-refactor-my-code-561aa9132045
*** Articles
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference

    https://medium.com/womakerscode/10-dicas-para-se-tornar-ninja-em-javascript-31a963ad17a1

    https://medium.com/@oliver.grack/using-eslint-with-typescript-and-react-hooks-and-vscode-c583a18f0c75
*** Interview
    https://www.pixelstech.net/article/1552133174-JavaScript-interview-questions

** FrontEnd
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#frontend][FrontEnd]]
  - [[#progress][Progress]]
  - [[#web-studies][Web Studies]]
  - [[#web-node][Web Node]]
  - [[#web-tools][Web Tools]]
  - [[#web-design][Web Design]]
  - [[#web-frameworks][Web Frameworks]]
  - [[#web-images][Web Images]]
  - [[#web-performance][Web Performance]]
  - [[#web-crossbrowsers][Web CrossBrowsers]]
  - [[#web-backend][Web Backend]]
  - [[#web-native-apps][Web Native Apps]]
  - [[#web-security][Web Security]]
  - [[#web-more][Web More]]
  :END:
*** Progress
**** Books
     | Books                                     | Cap                                     | @                                     | late | revision |
     |-------------------------------------------+-----------------------------------------+---------------------------------------+------+---------|
     | JavaScript The Definitive Guide           | Chapter 3. Types, Values, and Variables | 3.9.3 Object to Primitive Conversions |      |         |
     | Essential TypeScript From Beginner to Pro |                                         | Marking Tasks Complete                |      |         |

**** SLOC
     | Project | folder | file | @ |
     |-------------+--------+------+---|
     | node        |        |      |   |
     | angular     |        |      |   |
     | inquirer    |        |      |   |
*** Web Studies
**** Web Books
***** Learning Web Design
****** Exercises
****** Books/Articles recommended
       | Books/Articles                                                                                                             |   |
       |----------------------------------------------------------------------------------------------------------------------------+---|
       | Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement, 2nd Edition, by Aaron Gustafson (New Riders). |   |
       | The Uncertain Web: Web Development in a Changing Landscape by Rob Larson                                                   |   |
       | Designing with Progressive Enhancement by Todd Parker                                                                      |   |
       | https://webmasters.googleblog.com/2016/11/mobile-first-indexing.html                                                       |   |
       |                                                                                                                            |   |
**** Web Courses
     https://courses.wesbos.com/account
***** Web Courses Tips
      https://freefrontend.com/html-css-books/
      https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-1-7d4f7f0bff02
      https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-2-adfa4824da9b

*** Web Node
**** Node frameworks
     https://adonisjs.com/
*** Web Tools
***** Web Tools - Task Runners
****** Gulp
       https://css-tricks.com/gulp-for-beginners/
****** Grunt
***** Web Tools - Debug
****** Unitary Test:
****** UI Test
****** TDD:
       Selenium
       Test Complete
       Cuit
***** Web Tools - Dep Manger
      Bower
      Yarn
***** Web Tools - Misc
      https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=db

      http://gs.statcounter.com/

      https://caniuse.com/

      https://egghead.io/

      http://overapi.com

      https://web.dev/
***** Web Tools - Test Automation
      Selenium, Jest, or Enzyme
*** Web Design
    http://paletton.com/

    https://webgradients.com/
**** Web Design - Articles
     https://www.smashingmagazine.com/2019/05/svg-design-tools-practical-guide/

     https://www.yeseniaperezcruz.com/blog-1/2018/4/28/scenario-driven-design-systems

     https://jakearchibald.com/2015/anatomy-of-responsive-images/
**** Web Desing - People
     Aaron Draplin

**** Web Desing - Sites
     https://tympanus.net/codrops/
*** Web Frameworks
    bootstrap
    materalize
    foundation
*** Web Images
    http://responsiveimages.org/
*** Web Performance
    https://larahogan.me/design/

    High Performance Mobile Web: Best Practices for Optimizing Mobile Web Apps by Maximiliano Firtman

    https://developers.google.com/speed/?csw=1

    http://webpagetest.org/

    https://developers.google.com/speed/pagespeed/insights/

    http://yslow.org/

*** Web CrossBrowsers
**** <IE10 - Excuses:
     - E10 and below don't have support for the latest TLS encryption (out of the
     box), and thus if you handle any credit card payments, IE10 is no longer
     considered secure.
     - Entering passwords becomes risky too. Logging in no longer becomes
       secure. That will affect a much greater number of sites and is another
       good point to raise.

*** Web Backend
**** Web Backend - Node.js
     [[https://nodejs.org/en/][Node.js]]
****** NPM commands
       List all npm packages (no verbose): npm list -g --depth=0
****** NPM Tips
       https://www.sitepoint.com/beginners-guide-node-package-manager/
**** Web Backend - Ruby
**** Web Backend - PHP
**** Web Backend - Python
     https://welcometothedjango.com.br
*** Web Native Apps
    https://www.nativescript.org/
*** Web Security
    Strong understanding of web application security (e.g. XSS, CSRF, CORS)
*** Web More
    https://www.schoolofnet.com/plano-de-estudo-frontend-developer/

    https://www.htmldog.com/

    https://web.archive.org/web/20151110193658/https://www.drupal.org/node/1245650

    https://www.happybearsoftware.com/how-to-get-a-programmer-job

    https://developer.mozilla.org/en-US/Learn/Common_questions/How_does_the_Internet_work#Summary


    li <strong>Semantics:</strong> Semantic, SEO, HTTP Requests, Viewport.
    li <strong>CSS:</strong> Grid, Flexbox, Sizing, Queries.
    li <strong>JavaScript:</strong> Dynamic transitions, Complex/Immersive UI animations.
    li <strong>Design:</strong> Unified, Reusable & Flexible Design, Animated Illustrations, Infographics, Morphing Shapes.

**** Web Beginners - Books/Videos/Tips
     Books and w3.org Standards:
     Learning Web Design by Jennifer Niederst Robbins
     CSS Definitive Guide by Eric Meyer
     Eloquent Javascript by Marijn Haverbeke

     Youtube:
     Jen Simmons,
     Rachel Andrew,
     Brad Traversy Media,
     Kevin Powell,
     Dev Ed,
     Wes Bros
     whatsdev
     Joshua Fluke
     Logos by Nick
     Design Matters

     Blogs:
     aneventapart.com
     smashingmagazine.com
     css-tricks.com
     syntax.fm
     javascript weekly

**** Web More - Sites Eg
     https://projecteuler.net/archives

     https://html5up.net/

     https://codesandbox.io/

     https://www.awwwards.com/

     https://www.hackerrank.com/

     https://eusoudev.com.br/

     https://tableless.com.br/todos-os-posts/

**** Web More - Terms
     | Terms                     |   |
     |---------------------------+---|
     | standards-compliant sites |   |

**** Web More - PodCasts
     https://soundcloud.com/lambdatres
**** Web More - Articles
     https://medium.freecodecamp.org/from-zero-to-front-end-hero-part-1-7d4f7f0bff02

     https://hackernoon.com/how-i-used-my-programming-skills-to-save-over-8-hours-of-writing-work-7aba154d4232

     https://soundcloud.com/lambdatres/100-aprendendo-javascript

     https://dev.to/gypsydave5/why-you-shouldnt-use-a-web-framework-3g24

     https://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/140-thank_youhelloyiibucom
**** Web More - Jobs
     https://vulpi.com.br/

     upwork
**** Web More - Learning resources
     https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web

     https://abookapart.com/

     https://www.learnenough.com/

     https://www.theodinproject.com/home
**** Web More - Standards
     https://www.w3.org/standards/
***** Web Standards - Best Pratices
      https://www.w3.org/standards/techs/htmlbp#w3c_all

**** Web More - Skill and Projects
     | Skill                 | ....                                                                                                                             |
     |-----------------------+----------------------------------------------------------------------------------------------------------------------------------|
     | Editors               | '(Emacs VSCode)                                                                                                                  |
     | Design/Mockup         | '(Gimp Krita Photoshop)                                                                                                          |
     | HTML                  | semantics HTML5                                                                                                                  |
     | CSS                   | (Positionint Box Model  Flexbox  CSS Grid  CSS Variables)                                                                        |
     | Browser               | Dev Tools                                                                                                                        |
     | Layout                | Responsive - Set viewport - Fluid width - Media Queries - rem over px - Mobile First/Stacked Columns                             |
     | Hosting/Domain        | FTP/SFTP(Filezilla...) - Sharing Hostesd (hostgator) - (Static hosting (Netlify Github Pages))                                   |
     | JS                    | DOM manipulation / Events - JSON - FetchAPI - ES8+                                                                               |
     | Frameworks            | ((HTML '(Bootstrap Materalize Bulma))  (CSS '(Sass)) (JS '(Vue React Angular)))                                                  |
     | Git & Tooling         | ((Packages Manager (NPM Yarn)) (Module Bundling (WebPack Parcel)) (TaskRunners (Gulp Grunt NPMscripts)))                         |
     | Server Side Languages | (Languages '(NodeJS ((Pack Managn) (HTTP Routing)) (Framework (Express Koa Adonis))))                                            |
     | Server Side Database  | ((Relational '(MySQL PosteSQL)) (NoSQL '(MongoDB CouchBase)) (Cloud '(Firebase AWS Azure)) (Lighweight '(SQLite NeDB Redis)))    |
     | State Management      | '(Redux ContextAPI (Apollo '(GraphQL Client)) (VueX NgRx))                                                                       |
     | Server Rendered Pages | '(Next.js Nuxt.js )                                                                                                              |
     | CMS                   | ((PHP '(WordPress Drupal)) (JS '(Ghost KeyStone)))                                                                               |
     | DevOPS Deploying      | ((Virtual '(Docker Vagrant)) (Testing '(Unit Integration Functional System) (Jest Mocha)) (Platform '(DigitalOcean AWS Heroku))) |
     | Mobile Apps           | (ReactNative Flutter)                                                                                                            |
     | Desktop               | (Electron)                                                                                                                       |


     | Projects              |                  |
     |-----------------------+------------------|
     | Static Website        | small, informal  |
     | UI Layouts            | create           |
     | Dynamic Functionality | modal, slideshow |
     | Deploy/Maintain       | ...              |

***** Interview Tips
***** Questions/Answers
      | Questions                                                  | Answers                                                                           |
      |------------------------------------------------------------+-----------------------------------------------------------------------------------|
      | 1. Why you are interested in this job?                     | What drivers and motivates to this choose this job?                               |
      | 2. Why/How do you want to sell this product (pen)?         | Why you are worthy their time ? Be thoughtful why you want to sell this product   |
      | 3. What do you know about our costumers? Why they chose us |                                                                                   |
      | 4. Tell me about our competitors,                          | Who we are, what they know about our clients, and why you can win their proposals |
      | 5. How you deal with work burnout                          | What you do solve it and keep up selling well...                                  |
      | 6. Last time you took risk and it did not pay out!         | Be honest. You should have take more risks and why it did not work out, SMILE!    |
      | 7.                                                         |                                                                                   |
      | 8.                                                         |                                                                                   |
      | 9. What last time you did what you learned and succed.     | Sources may vary from books, random ads...what you have learn from people         |
      | 10. What do you would take you sell yourself to them       | what on you makes you special...                                                  |
      | 11. Do you like this person and why would by its product?  | No one buys if they dont like who is selling                                      |
      | 12. How fast you sell this product                         | Taking long means less chance to sell                                             |
      | 13. Connections and network                                |                                                                                   |
      | 14. What are your prospect/strategy                        |                                                                                   |

      https://medium.freecodecamp.org/9-books-for-junior-developers-in-2019-e41fc7ecc586
**** Web More - Organizations
     https://www.w3.org
** Css
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#css-pre-processors][CSS Pre-Processors]]
  - [[#css-resources][CSS Resources]]
  - [[#frameworks][Frameworks]]
  - [[#tools][Tools]]
  - [[#css-properties][CSS Properties]]
  - [[#css-articles][CSS Articles]]
    - [[#css-grid][CSS Grid]]
    - [[#css-flexbox][CSS Flexbox]]
    - [[#css-misc][CSS Misc]]
  - [[#css-blogssite][CSS Blogs/Site]]
  - [[#css-frameworks][CSS Frameworks]]
  - [[#css-backward-compatibility][CSS Backward Compatibility]]
  :END:
*** Progress
**** Books
     | Books                                     | Cap                                     | @                                     | late | revision |
     |-------------------------------------------+-----------------------------------------+---------------------------------------+------+---------|
     | JavaScript The Definitive Guide           | Chapter 3. Types, Values, and Variables | 3.9.3 Object to Primitive Conversions |      |         |
     | Essential TypeScript From Beginner to Pro |                                         | Marking Tasks Complete                |      |         |

**** SLOC
     | Project | folder | file | @ |
     |-------------+--------+------+---|
     | node        |        |      |   |
     | angular     |        |      |   |
     | inquirer    |        |      |   |
*** CSS Pre-Processors
    [[https://sass-lang.com/][SASS]]
    less
    flexbox
*** CSS Resources
    https://jensimmons.github.io/

    https://labs.jensimmons.com

    https://daneden.github.io/animate.css/

    https://css-tricks.com

    https://flexboxfroggy.com/

    https://leaverou.github.io/css3patterns/#lined-paper
*** Frameworks
    - semantic-ui
    - materialize

*** Tools
    https://cssicon.space/#/

    greensock
    velocity,js
    anime.js

    https://animejs.com/

    https://postcss.org/

    https://autoprefixer.github.io/

    http://screensiz.es/

    http://mqtest.io/

    https://www.axis-praxis.org/
*** CSS Properties
    | Properties                         |                                                              |
    |------------------------------------+--------------------------------------------------------------|
    | font-variant-numeric: tabular-nums | aplied in time interval, ensure its number to use even space |
    |                                    |                                                              |
*** CSS Articles
**** CSS Grid
     https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/

     https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/

     https://medium.com/@elad/supporting-css-grid-in-internet-explorer-b38669e75d66

     https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/

     https://css-tricks.com/css-grid-in-ie-duplicate-area-names-now-supported/

**** CSS Flexbox
     https://philipwalton.github.io/solved-by-flexbox/demos/grids/

     https://codepen.io/chriscoyier/pen/vWEMWw?editors=1100
**** CSS Misc

     https://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/

     https://philipwalton.github.io/solved-by-flexbox/demos/grids/

     http://bradfrost.com/blog/post/responsive-nav-patterns/

     https://css-irl.info/how-to-convince-your-team-to-adopt-grid/

     https://love2dev.com/blog/html-css-underline/

     https://flaviocopes.com/css-centering/

     https://meyerweb.com/eric/tools/css/reset/index.html

     https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06

     https://css-tricks.com/dont-overthink-it-grids/

     https://www.sitepoint.com/understanding-css-grid-systems/

     https://www.sitepoint.com/css-architectures-refactor-your-css/

     https://www.smashingmagazine.com/2013/06/workflow-design-develop-modern-portfolio-website/

     https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/

     https://www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/

     https://medium.freecodecamp.org/how-to-get-better-at-writing-css-a1732c32a72f

     https://css-tricks.com/snippets/css/a-guide-to-flexbox/

     https://css-tricks.com/snippets/css/complete-guide-grid/

     https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#Keyword_index

     https://www.learnenough.com/css-and-layout-tutorial/css/introduction
*** CSS Blogs/Site
    csstriggers.com
    https://thecssworkshop.com/

    https://gridbyexample.com/

    http://www.csszengarden.com/

    http://learnlayout.com/

*** CSS Frameworks
    Compass
*** CSS Backward Compatibility
    https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks
** HTML
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#tips][Tips]]
    - [[#html-workaround][HTML Workaround]]
  :END:
*** Progress
**** Books
     | Books                                     | Cap                                     | @                                     | late | revision |
     |-------------------------------------------+-----------------------------------------+---------------------------------------+------+---------|
     | JavaScript The Definitive Guide           | Chapter 3. Types, Values, and Variables | 3.9.3 Object to Primitive Conversions |      |         |
     | Essential TypeScript From Beginner to Pro |                                         | Marking Tasks Complete                |      |         |

**** SLOC
     | Project | folder | file | @ |
     |-------------+--------+------+---|
     | node        |        |      |   |
     | angular     |        |      |   |
     | inquirer    |        |      |   |

*** Tips
**** HTML Workaround
****** IE8 - HTML5
       #+BEGIN_SRC html
       <!--[if lt IE 9]><script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/ html5shiv.min.js"></script ><![endif]-->
       #+END_SRC
** Haskell
*** TOC
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progress][Progress]]
    - [[#books][Books]]
    - [[#sloc][SLOC]]
  - [[#haskell-resources][Haskell Resources]]
  - [[#haskell-toolings][Haskell Toolings]]
  :END:
*** Progress
**** Books
     | Books                  | cap | @ | later | revision |
     |------------------------+-----+---+-------+----------|
     | Programming in Haskell |     |   |       |          |
**** SLOC
     | Source Code | folder | file | @ |
     |-------------+--------+------+---|
     | ghc         |        |      |   |
     | xmonad      |        |      |   |

*** Haskell Resources
    https://www.haskell.org/documentation/

    http://hackage.haskell.org/
*** Haskell Toolings
    https://www.haskell.org/cabal/

    https://www.haskellstack.org/
** Common Lisp
*** Progress
**** Books
     | Books            | Capitulo      | em | tarde | revisao |
     |------------------+---------------+----+-------+---------|
     | ANSI Common Lisp | 4.4 Sequences |    |       |         |
     |                  |               |    |       |         |
**** SLOC
     | Source Code | folder | file | @ |
     |-------------+--------+------+---|
     | sbcl        |        |      |   |
     | asdf        |        |      |   |
     | alexandria  |        |      |   |
*** Features
**** char
     |           |   |
     |-----------+---|
     | char-code |   |

**** array
***** eg
      #+begin_src lisp
      (setf *print-array* t) ;; display form

      (setf arr (make-array '(2 3) : initial-element nil)) ;; make
      (aref arr 0 0) ;; retrieve
      (setf (aref arr 0 0) 'b) ;; replace
      #2a((b nil nil) (nil nil nil))
      (vector "a" 'b 3)
      #+end_src
***** annnotaion
      - multiple dimensions
      - zero indexed
      - one-dimensional array is also called a vector

**** lists
***** list
***** dotted (proper) list
      - is either nil, or a cons whose cdr is a proper list
      - dot notation
      - separated by a period
***** assoc lists (alist)
      - mapping
      - are slow
      - good for prototyping
      - assoc retrieves the pair associated with a given key else nil
      - assoc-if
**** conditionals
***** let
***** cond
***** when
***** unless
**** comparable
***** equal
***** eql
***** nth
***** sort
      - destructive
**** Misc
***** member
***** member-if
***** every
***** some
***** keywords (:test)
**** Short Notations
***** #'
***** '
***** `(,)
***** '()
**** Predicates
***** evenp
***** oddp
***** consp
***** atom
**** Sets
***** union
***** intersection
***** set-difference
***** adjoin
***** member
**** Sequences
***** length
***** subseq
***** reverse
** Golang
*** Summary
    :PROPERTIES:
    :TOC:      :include all :depth 3 :ignore this
    :END:
    :CONTENTS:
    - [[#progress][Progress]]
      - [[#books][Books]]
      - [[#sloc][SLOC]]
    - [[#packages][Packages]]
      - [[#gem][gem]]
      - [[#bundle][bundle]]
	- [[#outdated][outdated]]
	- [[#gem][gem]]
	- [[#install][install]]
	- [[#update][update]]
      - [[#irb][irb]]
	- [[#cli][cli]]
	- [[#inside][inside]]
      - [[#rspec][rspec]]
      - [[#unit-test][unit test]]
      - [[#pry][pry]]
    - [[#features][Features]]
      - [[#project-structure][project structure]]
      - [[#system-errors][System Errors]]
	- [[#usage][usage]]
      - [[#exceptions][exceptions]]
	- [[#errors][Errors]]
	- [[#usage][usage]]
      - [[#writable-object-attribute][writable object attribute]]
      - [[#multithreading][Multithreading]]
	- [[#usage][usage]]
      - [[#modules][modules]]
      - [[#continuation][continuation]]
      - [[#fibers][Fibers]]
	- [[#errors][errors]]
	- [[#usage][usage]]
      - [[#delimited-input][delimited input]]
      - [[#rake][rake]]
	- [[#usage][usage]]
      - [[#gem][gem]]
      - [[#variables][Variables]]
	- [[#class-variables][class variables]]
	- [[#global-variables][global variables]]
      - [[#self][self]]
      - [[#commentary][commentary]]
      - [[#defined][defined?]]
      - [[#iterators][iterators]]
      - [[#block-local-variables][block-local variables]]
      - [[#loops][loops]]
      - [[#statement-modifiers][statement modifiers]]
      - [[#comparison][comparison]]
      - [[#conditional][conditional]]
      - [[#class][class]]
	- [[#class][class]]
      - [[#append-][append <<]]
      - [[#blocks][blocks]]
      - [[#lambda][lambda]]
	- [[#how][How]]
	- [[#usage][Usage]]
      - [[#methods][methods]]
      - [[#yield][yield]]
      - [[#procs][procs]]
      - [[#operators][operators]]
      - [[#enumerable][enumerable]]
      - [[#enumerator][enumerator]]
	- [[#lazy][lazy]]
	- [[#each_car][each_car]]
	- [[#each][each]]
	- [[#to_enumenum_for][to_enum/enum_for]]
      - [[#inject][inject]]
      - [[#select][select]]
      - [[#succ][succ]]
      - [[#collect][collect]]
      - [[#freeze][freeze]]
      - [[#dup][dup]]
      - [[#dig][dig]]
      - [[#fetch][fetch]]
      - [[#tap][tap]]
      - [[#map][map]]
      - [[#pluck][pluck]]
      - [[#quoting][Quoting]]
      - [[#here-documents][here documents]]
      - [[#proc][proc]]
      - [[#do-end-as-param][do end as param]]
      - [[#array][array]]
      - [[#datetime][date/time]]
      - [[#lambda][lambda]]
      - [[#begin-rescue][begin rescue]]
      - [[#hash][hash]]
      - [[#range][range]]
      - [[#sets][sets]]
      - [[#gsub][gsub]]
      - [[#find][find]]
      - [[#map][map]]
      - [[#each_slice][each_slice]]
      - [[#lazy][lazy]]
      - [[#with_index][with_index]]
      - [[#enum_for][enum_for]]
      - [[#more][more]]
      - [[#concepts][Concepts]]
	- [[#iterator][Iterator]]
	- [[#methods][Methods]]
	- [[#enumerator][Enumerator]]
      - [[#instructions][Instructions]]
	- [[#rbenv][Rbenv]]
	- [[#misc][misc]]
    - [[#toolings][Toolings]]
    - [[#videos][Videos]]
    - [[#tests][Tests]]
      - [[#rspec][RSpec]]
      - [[#unit][Unit]]
    :END:
*** Progress
**** Books
     | name                    | chapter | @                                    | late | revision |
     |-------------------------+---------+--------------------------------------+------+----------|
     | Learning go             |         | Using const                          |      |          |
     | Go Programming Language | Methods | 6.2. Methods with a Pointer Receiver |      |          |
     |                         |         |                                      |      |          |

**** LDC
     | Source Code | folder          | file            | @ |
     |-------------+-----------------+-----------------+---|
     | go          | src/archive/tar | example_test.go |   |

*** Features
**** operators
***** arithmetic
      |          |                           |
      |----------+---------------------------|
      | combined | += , -= , *= ,/= , and %= |
      |          |                           |

**** types
***** numeric
      |         |                 |
      |---------+-----------------|
      | byte    | uint8           |
      | int     | int64           |
      | uint    | unsigned  int64 |
      | complex |                 |
      | float   |                 |


****** byte
****** int
****** complext
****** float
***** strings
      |              |              |
      |--------------+--------------|
      | immutable    |              |
      | zero value   | empty string |
      | concatenate  | +            |
      | equality     | \==, !=      |
      | empty string | s == ""      |
      |              |              |

***** boolean
      - no other type can be converted to a bool, implicitly or explicitly
      - convert to boolean with: \== , != , > , < , <= , or >=

***** runes
      - chars
      - int32 type
      -

**** cli
***** vet
      Examines Go source code and reports suspicious constructs

      |   |   |
      |---+---|
      |   |   |

***** build
      - build project and create binary
      |                  |              |
      |------------------+--------------|
      | -o <name> <file> | set location |
      |                  |              |

***** get
      |   |   |
      |---+---|
      |   |   |

***** install
      |               |                            |
      |---------------+----------------------------|
      | <name>        |                            |
      | <name>@latest | latest version of the tool |

***** run
      |   |   |
      |---+---|
      |   |   |

***** env
      - list golang environment variables
      |   |   |
      |---+---|
      |   |   |

**** mutex
     #+begin_src go emacs-lisp
     sync.Mutex
     #+end_src
**** collective
     #+begin_src go
     strings.Map
     #+end_src
**** standary library
     #+begin_src go
     // end of line
     io.EOF

     #+end_src
**** functions
     - reference type
     - function values are not comparable.

     #+begin_src go
     // assign f to nil function
     var f func(int) int

     // assign var to a function
     func square(n int) int { return n * n }
     f =  square
     fmt.Println(f(3)) // "9"

     // can compare function to nil but not another function
     if f != nil { ... }

     // recursion in go is fast

     // lambda/anonymous function
     strings.Map(func(r rune) rune { return r + 1 }, "HAL-9000")


     // function that returns a lambda
     func squares() func() int {
	     var x int
	     return func() int {
		     x++
		     return x * x
	     }
     }
     func main() {
	     f := squares()
	     fmt.Println(f()) // "1"
	     fmt.Println(f()) // "4"
	     fmt.Println(f())
	     fmt.Println(f())
     }

     // Defer
     var mu sync.Mutex
     var m = make(map[string]int)

     func lookup(key string) int {
	     mu.Lock()
	     defer mu.Unlock()
	     return m[key]
     }
     #+end_src
**** print
     #+begin_src go
     Printf("%#v\n", w) // # display values in a form similar to Go synVtax.
     #+end_src
**** make
     #+begin_src go
     make([]T, len)
     make([]T, len, cap) // same as make([]T, cap)[:len]
     #+end_src
**** type
     #+begin_src go
     func (c Clear) String() string { // associates Clear to String
	     ...
     }

     #+end_src
**** variables
***** var
      #+begin_src go
      var x int

      var x int = 10
      var x = 10
      #+end_src
***** :=
      - allows assign values to existing variables, as long as there is one new variable on the lefthand side of the :=
      - uses type inference
      - inside function

     #+begin_src go
     func main() {
	     x := 10
	     x, y := 30, "hello"
     }


     #+end_src
**** const
**** doc comment
     Extensive doc comments are often place d in a file of their own, convent ion ally cal le d doc.go
**** pointers
     #+Begin_Src go

     func main() {
	     x = 1
	     ,*p = x
	     Printf(&p) // address of x
     }
     #+end_src
*** Terms
    - runes: single characthers
*** Packages
**** golint
     |       |                                  |
     |-------+----------------------------------|
     | ./... | runs golint over entire project. |
     |       |                                  |

**** goimports
     |    |                                                     |
     |----+-----------------------------------------------------|
     | -l | list files whose formatting differs from goimport's |
     | -w | write result to (source) file instead of stdout     |
     |    |                                                     |
     #+begin_src shell-script
     goimports -l -w .
     #+end_src
** PHP
** [[https://www.python.org/][Python]]
*** Modules
    | Modules   |   |
    |-----------+---|
    | [[https://docs.python.org/3/library/shutil.html][shutil]]    |   |
    | [[https://docs.python.org/3/library/os.html][os]]        |   |
    | [[https://docs.python.org/3/library/os.path.html][os.path]]   |   |
    | [[https://docs.python.org/3/library/builtins.html][bultins]]   |   |
    | [[https://docs.python.org/3/library/sys.html][sys]]       |   |
    | importlib |   |

*** Features
    | Command                                        | description                                                                                      |   |
    |------------------------------------------------+--------------------------------------------------------------------------------------------------+---|
    | sys.ps1/ sys.ps2                               | variables that define the strings used as primary and secondary prompts                          |   |
    | sys.path                                       | list of strings that determines the interpreter’s search path for modules                        |   |
    | PYTHONPATH                                     |                                                                                                  |   |
    | importlib.reload()                             | reload modules in interpreter session                                                            |   |
    | dir()                                          | find out which names a module defines / no arguments: lists the names you have defined currently |   |
    | vars()                                         |                                                                                                  |   |
    | import builtins                                | list the names of built-in functions and variables                                               |   |
    | import inspect                                 | analyze functions...                                                                             |   |
    | itertools                                      |                                                                                                  |   |
    | argparse                                       |                                                                                                  |   |
    | pickle                                         | object serialization                                                                             |   |
    | dbm                                            |                                                                                                  |   |
    | unpacking assignment(comma)                    | x, = lst equal [x] = lst equal x, y = 1, 2                                                       |   |
    | list index as value in assignment              | var = [asd][0]                                                                                   |   |
    | args                                           |                                                                                                  |   |
    | kwargs                                         |                                                                                                  |   |
    | yield                                          |                                                                                                  |   |
    | collections.defaultdict                        |                                                                                                  |   |
    | itertools.product                              |                                                                                                  |   |
    | functools.lru_cache                            |                                                                                                  |   |
    | itertools                                      |                                                                                                  |   |
    | dunders                                        |                                                                                                  |   |
    | (__repr__, __init__, ...)                          |                                                                                                  |   |
    | decorators                                     |                                                                                                  |   |
    | classes                                        |                                                                                                  |   |
    | lambda                                         |                                                                                                  |   |
    | debug                                          |                                                                                                  |   |
    | hash                                           |                                                                                                  |   |
    | Unit tests                                     |                                                                                                  |   |
    | operator: attrgetter, itemgetter, methodcaller |                                                                                                  |   |
    | functools.partial                              |                                                                                                  |   |
    | metaclasses                                    |                                                                                                  |   |
    | getattr__ / __getattribute__                     |                                                                                                  |   |
    | operator overloading                           |                                                                                                  |   |
    | ast, inspect, dis                              |                                                                                                  |   |
    | pdb                                            | debuggin                                                                                         |   |
    | faulthandler                                   | dump python tracebacks                                                                           |   |
    | python -vv                                     | run python in verbose                                                                            |   |
    | python -I                                      | lock user customization                                                                          |   |
    | PYTHONHOME                                     |                                                                                                  |   |
    | from operator import or_                       | functional version of set union or                                                               |   |
    | from functools import reduce                   |                                                                                                  |   |
    | from itertools import chain                    |                                                                                                  |   |
*** Books
**** Python Crash Course
**** Automating
**** Fluent Python
*** PEPs
    - PEP 582 -- Python local packages directory
    - PEP 428 -- The pathlib module -- object-oriented filesystem paths
    - PEP 519 -- Adding a file system path protocol
    - PEP 443 -- Single dispatch generic functions
    - PEP 441 -- Execute zip file with py files inside as package
    - PEP 318 — Decorators for Functions and Methods
    - http://www.diegor.it/2017/06/15/the-must-read-pythons-peps/
*** Tools
**** build Tools
     https://github.com/SCons/scons
     https://github.com/pre-commit/pre-commit
     https://github.com/LINKIT-Group/pyshipper
**** code formatter
     https://github.com/psf/black

**** Browser tools
     http://chromedriver.chromium.org/downloads
**** Games Engine
     https://github.com/pvcraven/arcade

**** Misc
     https://github.com/pygobject/pycairo
     https://github.com/tonybaloney/wily
     https://github.com/python-mario/mario
     https://github.com/celery/celery
     https://github.com/cs01/pythonloc
     https://github.com/tqdm/tqdm
     https://github.com/dabeaz/thredo
     poetry
     tox
     pyenv
     pyinstaller

**** CLI
     https://gitlab.com/dslackw/colored
**** env
     https://github.com/pyenv/pyenv

**** Data
     https://github.com/numba/numba

**** Perfomance
     https://github.com/numba/llvmlite
     https://github.com/microsoft/Pyjion
*** Hacks
    | hack                     | eg             | description                                                                         |
    |--------------------------+----------------+-------------------------------------------------------------------------------------|
    | Unpacking Empty List     | *[]            | Return empty output                                                                 |
    | C's cast-like on the fly | type(EXP)(EXP) | type coercion just like in C, (float) 2, useful when you dont know what type EXP is |
*** Warning
    https://github.com/pypa/pip/issues/5599
*** Blogs
    https://julien.danjou.info/
*** PSF
    https://www.python.org/psf/contrib/contrib-form/
*** Read Later
**** Packaging
     https://docs.python-guide.org/writing/structure/
     https://dev.to/codemouse92/dead-simple-python-project-structure-and-imports-38c6
**** Argparse
     https://dusty.phillips.codes/2018/08/13/python-loading-pathlib-paths-with-argparse/
**** Misc
     tox
     nose

     https://www.artima.com/forums/flat.jsp?forum=106&thread=161207

     http://www.attrs.org/en/stable/why.html#data-classes

     https://docs.python-guide.org/writing/style/

     https://devblogs.microsoft.com/python/idiomatic-python-functions-versus-classes/

     https://old.reddit.com/r/learnpython/comments/d7o8qr/how_do_you_work_freelance_as_a_python_programmer/

     https://github.com/python-trio/trio

     https://glyph.twistedmatrix.com/2016/08/attrs.html

     https://realpython.com/command-line-interfaces-python-argparse/

     https://www.reddit.com/r/Python/comments/3p8m2s/what_did_you_automate_with_python/

     https://www.fullstackpython.com/best-python-resources.html

     https://docs.python-guide.org/

     https://docs.python.org/3/library/index.html

     https://bugs.python.org/

     [[https://www.youtube.com/watch?v=e4S8zfLdLgQ&list=PLLy4MeON3hKCtMvu4yA-DKRG_gsgRR1jM&index=45&t=0s][How the Internet Works for Developers - Pt 1 - Overview & Frontend]]

     https://treyhunner.com/2019/01/no-really-pathlib-is-great/
**** Blogs
     http://inventwithpython.com/blog/

**** Web Scrapping
     https://www.freecodecamp.org/news/web-scraping-101-in-python/
**** Code Style - Read later
     https://realpython.com/cpython-source-code-guide/
**** Sequences - Read later
     https://eli.thegreenplace.net/2011/11/28/less-copies-in-python-with-the-buffer-protocol-and-memoryviews
**** Authors
     | Author            |
     |-------------------|
     | Trey Hunner       |
     | Raymond Hettinger |
     | Jack Diederich    |

**** Videos
***** Worthy to watch
      | title                                             | @                                           |
      |---------------------------------------------------+---------------------------------------------|
      | Python Conferences Videos                         | http://www.pyvideo.org                      |
      | transforming code into beautiful idiomatic python | https://www.youtube.com/watch?v=OSGv2VnC0go |
      | Pycon                                             |                                             |
      | EuroPython Conference                             |                                             |

***** Still to watch
      |                                                                            |   |
      |----------------------------------------------------------------------------+---|
      | Andrey Vlasovskikh - The Story of Features Coming in Python 3.8 and Beyond |   |
**** TODO
****** TODO Dired Cli App: Fork Ranger and change it into dired
*** BackEnd Job - Priorities
    | Skill           | desc                             |
    |-----------------+----------------------------------|
    | Languages       | Python (+3yrs) - ...             |
    | Back-End        | Django (+2yrs) - ORM             |
    | REST API        | ...                              |
    | Database Engine | PostgreSQL - NoSQL - SQLAlchemy- |
    | Linux           | CLI Toolings -                   |
    | Git             | ... - GitHub                     |
    | Test Unit       | pytest ...                       |
    | Misc            | Nginx, Redis                     |
    | Education       | CS Bachelor’s degree             |
    | Nice to have    | AWS - Docker - Front-End - ...   |

*** Skills
    | Skills To learn                                                                         |
    |-----------------------------------------------------------------------------------------|
    | UniTest & Pytest                                                                        |
    | OOP & Class                                                                             |
    | dataclasses                                                                             |
    | p                                                                                       |
    | Python Interfaces                                                                       |
    | ContextManager                                                                          |
    | refactoring                                                                             |
    | exception system                                                                        |
    | recursion                                                                               |
    | REST API, docker, testing, etc. testing concepts, algorithms, databases, devops, ci/cd, |



    | Python related tools |
    |----------------------|
    | https://redash.io/   |
    | Django               |
    | Flask                |
    | SQL & Non-SQL        |
    | Docker               |
    | pyQT                 |
    | SQLAlquemy           |
    | Celery               |
    | Pytest               |
    | Agile                |
    | Scrum                |
    | PostgreSQL / MySQL   |
    | Redis                |
    | Ansible              |
    | ElasticSearch        |
    | Logstash             |
    | HTTP Request         |
    | API Rest             |
    | JSON                 |
    | Grafana              |
    | Postman              |
    | Buildout             |
*** Misc
    #+begin_src python
    phone_folder = Path( str("/run/user/1001/" + phone_id + "/SD
	card/Download/sent") )

    copyfile(this, Path(phone_folder) / file_name)
    copytree(this, phone_folder, dirs_exist_ok=True)

    def asd(*args):
	lst = args[0][1:]
	subprocess.run(['sudo', 'apt', args[0][0], *lst], check=True)

    asd(sys.argv[1:])

    # Create CLI commands
    parser = argparse.ArgumentParser(
	description=__doc__,
	prog=sys.argv[0],
	usage='lx <command> <subcommands>',
    )

    # Set CLI Commands
    parser.add_argument(
	'homer',
	help='Prepare home folders/files software',
    )

    parser.add_argument(
	'gitter',
	help='Clone/Pull group of git repositories',
    )

    # Collect CLI commands as dict(key:value)
    args = vars(parser.parse_args())

    # CLI Command call for specific function
    if args['homer'] == 'homer':
	home_setup()

    if args['gitter'] == 'gitter':
	file = Path(sys.argv[2])
	to = Path(sys.argv[3])

	gitter(file, to)


    class CliColors:
	""" Provide CLI's Font Colors """

	def __init__(self):
	    self.cli_color_red = '\033[31m'
	    self.cli_color_green = "\033[32m"
	    self.cli_color_blue = "\033[34m"
	    self.cli_color_purple = "\033[45m"
	    self.cli_color_bold = "\033[1m"
	    self.cli_color_reset = "\033[0m"

	def warning(self, message=None):
	    """ Warning Color Text Print """
	    print(f'{self.cli_color_red}{message}{self.cli_color_reset} \n')

	def success(self, message=None):
	    """ Success Color Text Print """
	    print(f'{self.cli_color_green}{message}{self.cli_color_reset} \n')

	def notify(self, message=None):
	    """ Notify Color Text Print """
	    print(f'{self.cli_color_purple}{message}{self.cli_color_reset} \n')

	def welcome(self, message=None):
	    """ Welcome Color Text Print """
	    print(f'{self.cli_color_blue}{message}{self.cli_color_reset} \n')

	def bold(self, message=None):
	    """ Bold Color Text Print """
	    print(f'{self.cli_color_bold}{message}{self.cli_color_reset} \n')


    def main():
	""" and, so it begins. """

	tools_install = ToolsPip()

	parser = argparse.ArgumentParser()
	subparsers = parser.add_subparsers()

	parser_echo = subparsers.add_parser(
	    "tools_python",
	    help="Pip install packages"
	)
	parser_echo.set_defaults(func=tools_install.tools_python)

	options = parser.parse_args()
	options.func()


    #+end_src
*** setup.py
    #+begin_src python
    setup(scripts=["bin/liz"],)
    #+end_src
** C
*** Fortschritt
**** Buch
     | Buch              | Capitulo | em | tarde | revisao |
     |-------------------+----------+----+-------+---------|
     | C Modern Approach |          |    |       |         |

**** LDC
     | Source Code | folder    | file        | @ |
     |-------------+-----------+-------------+---|
     | curl        | lib/vauth | cleartext.c |   |
     | tmux        |           |             |   |

*** Features

**** pointers
     #+begin_src c


     int main(){
	 int i, *p, *b;
	 int i = 4;

	 ,*p = i; // p = 4
	 ,*p = &i; // get address of i, p is alias of i var.
	 ,*b = &p; // b get address of p, that is, i address.
	 ,*b = *p; // b gets value of p
	 ,*b = *&p; // get address first then back to its value
     }


     #+end_src
*** Books
**** CPAMA
***** Chapter 8
****** Exercises
******* 5. Array of Fibonacci numbers up to 40
	#+BEGIN_SRC c
	#include <stdio.h>

	#define N 40

	int main(void)
	{
	  printf("Enter up to %d numbers: ", N);

	  int fib_numbers[N] = {[0] = 0, [1] = 1, 0};
	  for(int i = 2; i < N; i++){
	    fib_numbers[i] = fib_numbers[i-1] + fib_numbers[i-2];
	  }

	  /* Sorted Array */
	  printf("Array: { ");
	  for(int i = 0; i < N; i++) {
	    printf("%d", fib_numbers[i]);
	    if(i < N-1)
	      printf(", ");
	  }
	  printf(" }\n");


	  return 0;
	}
	#+END_SRC
******* 11 8x8 even checker_board
	#+begin_src c
	#include <stdio.h>

	#define N 8

	int main(void)
	{
	  char checker_board[N][N] = {0};
	  for(int i = 0; i < N; i++){
	    for (int j = 0; j < N; j++) {
	      checker_board[i][j] = ((i+j) % 2 == 0) ? 'B' : 'R';
	    }
	  }

	  printf("\n");
	  /* Sorted Array */
	  printf("Multi Dimension Array: \n{");
	  for(int i = 0; i < N; i++) {
	    for (int j = 0; j < N; j++) {

	      if(i == 0 && j == 0)  printf("{ ");
	      else if (j == 0) printf(" { ");
	      printf("%c", checker_board[i][j]);

	      if(j < N-1)
		printf(", ");

	      if(j == N-1 && i < N-1) printf(" }\n");
	      else if (j == N-1) printf(" }");
	    }
	  }
	  printf("}\n");

	  return 0;
	}

	#+end_src
****** Projects
******* .1
	#+BEGIN_SRC c
	#include <stdio.h>
	#include <stdbool.h>

	int main(void)
	{
	  bool digit_seen[10] = {false};
	  int digit;
	  long n;

	  printf("Enter a number: ");
	  scanf("%ld", &n);

	  printf("Repeated digits: ");
	  while (n > 0) {
	    digit = n % 10;
	    if (digit_seen[digit])
	      printf("%d ", digit);
	    digit_seen[digit] = true;
	    n /= 10;
	  }

	  printf("\n");

	  return 0;
	}
	#+END_SRC
******* .7

***** Chapter 9
****** Exercises
****** Projects
******* Project 1

	 Write a program that asks the user to enter a series of integers (which it
	 stores in an array), then sorts the integers by calling the function
	 selection_sort. When given an array with n elements, selection_sort must do
	 the following:

	 1) Search the array to find the largest element, then move it
	    to the last position in the array.
	 2) Call itself recursively to sort the first n - 1 elements of the array.

	 #+BEGIN_SRC c
	 #include <stdio.h>

	 #define N 4

	 void selection_sort(int a[], int n);

	 int main(void)
	 {
	   printf("Enter up to %d numbers: ", N);

	   int a[N] = {0};
	   for(int i = 0; i < N; i++){
	     scanf("%d", &a[i]);
	   }

	   /* Sorted Array */
	   printf("Unsorted Array: { ");
	   for(int i = 0; i < N; i++) {
	     printf("%d", a[i]);
	     if(i < N-1)
	       printf(", ");
	   }
	   printf(" }\n");

	   selection_sort(a, N);

	   /* Sorted Array */
	   printf("Sorted Array: { ");
	   for(int i = 0; i < N; i++) {
	     printf("%d", a[i]);
	     if(i < N-1)
	       printf(", ");
	   }

	   printf(" }\n");

	   return 0;
	 }

	 void selection_sort(int a[], int n)
	 {
	   if (n == 0) return;

	   // Sort Array
	   int largest, smallest, i;
	   i = largest = smallest = 0;

	   for(; i < n; i++)
	     if(a[i] > a[largest])
	       largest = i;

	   smallest = a[largest];
	   a[largest] = a[n - 1];
	   a[n -1] = smallest;

	   /* Recursion Unfolding */
	   printf("{ ");
	   for(int i = 0; i < n; i++) {
	     printf("%d", a[i]);
	     if(i < n-1)
	       printf(", ");
	   }

	   printf(" }\n");

	   selection_sort(a, n-1);
	 }
	 #+END_SRC

*** Snippets

**** find exec in path
     #+begin_src c


     #include <stdlib.h>
     #include <sys/stat.h>
     #include <sys/types.h>
     #include <unistd.h>

     #include <string>
     #include <iostream>

     using namespace std;

     int main ()
     {
       struct stat sb;
       string delimiter = ":";
       string path = string(getenv("PATH"));
       size_t start_pos = 0, end_pos = 0;

       while ((end_pos = path.find(':', start_pos)) != string::npos)
	 {
	   string current_path =
	     path.substr(start_pos, end_pos - start_pos) + "/mathsat";

	   if ((stat(mathsat_path.c_str(), &sb) == 0) && (sb.st_mode & S_IXOTH))
	     {
	       cout << "Okay" << endl;
	       return EXIT_SUCCESS;
	      }

	   start_pos = end_pos + 1;
	  }

       return EXIT_SUCCESS;
     }

     #+end_src

*** Tools
    https://cdecl.org/  - C gibberish ↔ English
    https://build2.org/

*** Read later
    Mike Gancarz's The Unix Philosophy
    The Pragmatic Programmer [Hunt-Thomas
    The Practice of Programming [Kernighan-Pike99
    Zen Flesh, Zen Bones [Reps-Senzaki],

    https://multun.net/obscure-c-features.html

    https://norasandler.com/2017/11/29/Write-a-Compiler.html

    https://ecc-comp.blogspot.com/2014/12/homogeneous-operating-systems-are-better.html

    https://usesthis.com/interviews/christopher.allan.webber/

    https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html

    https://jacobmossberg.se/posts/2018/08/11/run-c-program-bare-metal-on-arm-cortex-m3.html

    https://mort.coffee/home/obscure-c-features/

    https://monades.roperzh.com/rediscovering-make-automatic-variables/

    https://monades.roperzh.com/rediscovering-make-power-behind-rules/

    http://www.shubhro.com/2018/01/20/brushing-up-os-c/

    https://solarianprogrammer.com/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/

    https://solarianprogrammer.com/2017/01/06/c99-c11-dynamic-array-mimics-cpp-vector/

    http://collin.moe/post.php?i=8

    https://www.viva64.com/en/b/0558/

    http://devarea.com/the-c-preprocessor/

    https://fgiesen.wordpress.com/2018/02/19/reading-bits-in-far-too-many-ways-part-1/

    https://gustedt.wordpress.com/2012/10/14/c11-defects-c-threads-are-not-realizable-with-posix-threads/

    http://arjunsreedharan.org/post/148675821737/write-a-simple-memory-allocator

    https://www.manager.com.br/empregos-c-programador-desenvolvedor

    https://github.com/aleksandar-todorovic/awesome-c

    https://queue.acm.org/detail.cfm?id=3212479

    https://www.quora.com/Why-does-it-seem-that-Unix-is-written-in-C-and-not-written-with-any-C++-Isn%E2%80%99t-C++-more-powerful-than-C

    http://www.code-in-c.com/galton-board-in-c/

    https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html

    http://www.itachay.com/2018/06/cc-programming-questions-practice.html

    http://nullprogram.com/blog/2018/06/23/

    http://www.code-in-c.com/an-introduction-to-ncurses-in-c/

    https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/C-Extensions.html

    https://www.ibm.com/developerworks/linux/library/l-gcc-hacks/

    https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html

    http://www.buildyourownlisp.com/chapter6_parsing

    http://nullprogram.com/blog/2018/06/10/

    https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/

    https://www.reddit.com/r/C_Programming/comments/8h4pda/c_is_not_a_lowlevel_language/

    https://github.com/ruslo/hunter

    https://github.com/oriansj/knight-vm
*** Articles
    http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel

    https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list

    http://publications.gbdirect.co.uk/c_book/

    http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

    https://nazavode.github.io/blog/aliasing/

    http://clc-wiki.net/wiki/The_C_Standard#Obtaining_the_Standard

    https://www.embedded.com/design/programming-languages-and-tools/4437696/C11--C-finally-gets-a-new-standard

    http://www.drdobbs.com/cpp/c-finally-gets-a-new-standard/232800444

    https://github.com/andreas-gone-wild/blog/blob/master/skip_lists_revisited.md

    https://port70.net/~nsz/c/c11/n1570.html

    http://nullprogram.com/blog/2017/11/03/

    https://www.cossacklabs.com/blog/macros-in-crypto-c-code.html

    https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234

    https://stackoverflow.com/tags/c/info

    http://cs-education.github.io/sys/#/lessons

    https://blog.holbertonschool.com/hack-virtual-memory-stack-registers-assembly-code/

    https://www.wikiwand.com/en/MISRA_C

    https://danluu.com/malloc-tutorial/

    https://blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/

    http://seenaburns.com/building-c-programs/

    https://lwn.net/Articles/741171/

    http://www.techaed.com/how-to-code-like-the-top-programmers-at-nasa-10-critical-rules/

    https://notabug.org/koz.ross/awesome-c

    http://marek.vavrusa.com/c/memory/2015/02/20/memory/

    http://nullprogram.com/blog/2017/08/20/

    http://nullprogram.com/

    https://viewsourcecode.org/snaptoken/kilo/

    https://aransentin.github.io/cwasm/

    https://include-what-you-use.org/

    http://www.catb.org/esr/structure-packing/#_who_should_read_this

    http://www.catb.org/esr/structure-packing/

    https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a

    http://www.agner.org/optimize/

    http://c-faq.com/

    http://www.buildyourownlisp.com/chapter1_introduction

    https://blog.bradfieldcs.com/the-cost-of-forsaking-c-113986438784

    http://www.iso-9899.info/wiki/Main_Page#Stuff_that_should_be_avoided

    http://www.pldaniels.com/c-of-peril/

    https://wiki.osdev.org/Main_Page

    https://wiki.osdev.org/Books

    https://wiki.osdev.org/Bare_Bones

    http://git.annexia.org/?p=jonesforth.git;a=summary

    http://howtowriteaprogram.blogspot.com.br/2010/11/lisp-interpreter-in-90-lines-of-c.html

    http://peter.michaux.ca/articles/scheme-from-scratch-introduction

    https://github.com/kanaka/mal/blob/master/process/guide.md

    https://norvig.com/lispy.html

    https://www.joelonsoftware.com/2001/12/11/back-to-basics/

    https://ops.tips/blog/a-tcp-server-in-c/

    https://beej.us/guide/bgnet/

    https://github.com/cquery-project/cquery/wiki/compile_commands.json

    https://sarcasm.github.io/notes/dev/compilation-database.html

    http://antongerdelan.net/blog/formatted/2018_03_08_how_i_write_code.html

    http://port70.net/~nsz/c/c99/C99RationaleV5.10.pdf

    http://www.lysator.liu.se/c/pikestyle.html

    http://port70.net/~nsz/c/c89/rationale/

    http://marek.vavrusa.com/memory/

    https://blog.noctua-software.com/c-tricks.html

    https://blogs.oracle.com/ksplice/8-gdb-tricks-you-should-know

    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html

    https://www.gnu.org/software/emacs/manual/html_node/efaq/Customizing-C-and-C_002b_002b-indentation.html
*** Libraries
    https://www.gnu.org/software/libc/

    https://github.com/universal-ctags/ctags

    https://www.fossil-scm.org/index.html/doc/trunk/www/index.wiki

    https://github.com/conan-io/conan
*** Documentation
    http://knking.com/books/c2/index.html

    http://www.iso-9899.info/wiki/Books

    http://fabiensanglard.net/c/

    https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list/562377#562377

    https://gcc.gnu.org/onlinedocs/

    http://www.c-faq.com/

    http://port70.net/~nsz/c/

    http://port70.net/~nsz/c/c99/n1256.html
*** Bootstraping
    http://git.savannah.nongnu.org/cgit/stage0.git/tree/x86/stage0/stage0_monitor.hex

    http://git.savannah.nongnu.org/cgit/stage0.git/tree/stage0/stage0_monitor.hex0

    https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/
*** Tips
    https://github.com/aleksandar-todorovic/awesome-c#game-programming

    http://www.embedded.com/design/programming-languages-and-tools/4215552/Seventeen-steps-to-safer-C-code

    http://doc.cat-v.org/bell_labs/pikestyle

    https://www.kernel.org/doc/Documentation/process/coding-style.rst

    https://kristerw.blogspot.com.br/2017/09/useful-gcc-warning-options-not-enabled.html

    http://doc.cat-v.org/plan_9/4th_edition/papers/mk

*** System Software Skills
    |---+------------------------------------------------------+---|
    | C | Data Structures rather than just databases           |   |
    | C | deliver clean, efficient and glamorous code quickly. |   |
    | C | current, low level "C" skills                        |   |
    | C | write API's and not just use them.                   |   |
    |   | SQL                                                  |   |
    |   | Excellent writing skills                             |   |
    |   | Outstanding communications skills are a must         |   |
    |   | Git                                                  |   |
    |   | ) Experience in programming microcontrollers.        |   |
    |---+------------------------------------------------------+---|
** Rust
*** Fortschritt
**** Buch
     | Buch      | Capitulo           | em | tarde | revisao |
     |-----------+--------------------+----+-------+---------|
     | Rust Book | Processing a Guess |    |       |         |
**** LDC
     | Source Code | folder | file | @ |
     |-------------+--------+------+---|
     | Rust        |        |      |   |
*** Features
**** cli
     |                 |                       |
     |-----------------+-----------------------|
     | checks          | make sure it compiles |
     | run             | compile and run       |
     | build           | compile               |
     | build --release | praise the sun        |
** .NET
*** Sumario
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progresso][Progresso]]
    - [[#livros][Livros]]
    - [[#ldc][LDC]]
    - [[#skills][Skills]]
  - [[#projetos][Projetos]]
    - [[#cero][Cero]]
  - [[#net][.NET]]
    - [[#net-resources][.NET Resources]]
    - [[#net-snippets][.NET Snippets]]
    - [[#net-best-practices][.NET Best Practices]]
    - [[#net-toolings][.NET Toolings]]
    - [[#net-projects][.NET Projects]]
    - [[#net-csproj][.NET csproj]]
    - [[#net-developer-skills][.NET Developer skills]]
    - [[#aspnet][ASP.NET]]
  - [[#powershell][Powershell]]
    - [[#more-information][More Information]]
    - [[#projects][projects]]
    - [[#find-all-powershell-profile-locations][Find All PowerShell Profile Locations]]
  - [[#databases][Databases]]
    - [[#msql][MSql]]
    - [[#sql-read-later][SQL read later]]
  :END:
*** Progresso
**** Livros
     | Livros                                      | Capitulo                                                             | em                                                         | tarde | revisao          | AdHoc                                                           |
     |---------------------------------------------+----------------------------------------------------------------------+------------------------------------------------------------+-------+------------------+-----------------------------------------------------------------|
     | C# 8 in a Nutshell The Definitive Reference | Collections                                                          | Customizable Collections and Proxies                       |       | Order Comparison | Concurrency and Asynchrony/Foreground versus Background Threads |
     | C# In Depth                                 | 2.4 Iterators                                                        |                                                            |       |                  |                                                                 |
     | Essential C#                                | Chapter 13 Delegates and Lambda Expressions                          | Delegate Internals                                         |       |                  |                                                                 |
     | The Art of Unit Testing                     | Chapter 3. Using stubs to break dependencies                         |                                                            |       |                  |                                                                 |
     | Asp.Net Core in Action                      | 2.8 Generating responses with Razor Pages                            | Adding and configuring services                            |       |                  |                                                                 |
     | Learn ASP.NET Core 3                        | Chapter 4: Basic Concepts of ASP.NET Core 3 via a Custom Application | Conceiving and implementing your first Tic-Tac-Toe feature |       |                  |                                                                 |
**** LDC
     | Source Code                     | folder                                                         | file                    | @ |
     |---------------------------------+----------------------------------------------------------------+-------------------------+---|
     | roslyn                          | Analyzers/CSharp/Analyzers/InvokeDelegateWithConditionalAccess |                         |   |
     | runtime                         | libraries/System.Linq/src/System/Linq                          | Aggregate               |   |
     | csharp-language-server-protocol | src/Client                                                     | ArrayPoolEventSource.cs |   |
     | omnisharp-roslyn                | OmniSharp.Abstractions/Models/v1                               |                         |   |
**** Skills
      | X                       | Y         |
      |-------------------------+-----------|
      | Collections             |           |
      | Generics                |           |
      | Delegates/Lambda/Events |           |
      | Test Unit               |           |
      | REST                    |           |
      | JSON                    |           |
      | Refactoring             |           |
      | ASP.NET                 | Razor/MVC |
      | Design Patterns         |           |
      | CI/CD                   |           |
      | Docker                  |           |
      | {No-}SQL                |           |
      | Bootstrap               |           |
      | Angular                 |           |
      | Git                     |           |
      | Scrum                   |           |
      | Agile                   |           |
*** Projetos
**** Cero
*** [[https://dotnet.microsoft.com/][.NET]]
**** .NET Resources
     Documentation: https://docs.microsoft.com/en-us/dotnet/

**** .NET Snippets
***** Walk
      #+begin_src csharp
      public interface IDirectoryTree
      {
	  [NotNull, ItemNotNull]
	  IEnumerable<IDirectoryTreeNode> Walk([NotNull] string path, [NotNull] Action<Exception> onException);
      }

      public class DirectoryTree : IDirectoryTree
      {
	  public IEnumerable<IDirectoryTreeNode> Walk(string path, Action<Exception> onException)
	  {
	      if (path == null) throw new ArgumentNullException(nameof(path));
	      if (onException == null) throw new ArgumentNullException(nameof(onException));

	      var nodes = new Queue<DirectoryTreeNode>
	      {
		  new DirectoryTreeNode(path)
	      };

	      while (nodes.Any())
	      {
		  var current = nodes.Dequeue();
		  yield return current;

		  try
		  {
		      dolist (var directory in current.DirectoryNames)
		      {
			  nodes.Enqueue(new DirectoryTreeNode(Path.Combine(current.DirectoryName, directory)));
		      }
		  }
		  catch (Exception inner)
		  {
		      onException(inner);
		  }
	      }
	  }
      }

      [PublicAPI]
      public interface IDirectoryTreeNode
      {
	  [NotNull]
	  string DirectoryName { get; }

	  [NotNull, ItemNotNull]
	  IEnumerable<string> DirectoryNames { get; }

	  [NotNull, ItemNotNull]
	  IEnumerable<string> FileNames { get; }
      }

      internal class DirectoryTreeNode : IDirectoryTreeNode
      {
	  internal DirectoryTreeNode(string path)
	  {
	      DirectoryName = path;
	  }

	  public string DirectoryName { get; }

	  public IEnumerable<string> DirectoryNames => Directory.EnumerateDirectories(DirectoryName).Select(Path.GetFileName);

	  public IEnumerable<string> FileNames => Directory.EnumerateFiles(DirectoryName).Select(Path.GetFileName);
      }


      public static class DirectoryTreeNodeExtensions
      {
	  public static void Deconstruct(
	      [CanBeNull] this IDirectoryTreeNode directoryTreeNode,
	      [CanBeNull] out string directoryName,
	      [CanBeNull] out IEnumerable<string> directoryNames,
	      [CanBeNull] out IEnumerable<string> fileNames)
	  {
	      directoryName = directoryTreeNode?.DirectoryName;
	      directoryNames = directoryTreeNode?.DirectoryNames;
	      fileNames = directoryTreeNode?.FileNames;
	  }

	  public static bool Exists(
	      [CanBeNull] this IDirectoryTreeNode directoryTreeNode)
	  {
	      // Empty string does not exist and it'll return false.
	      return Directory.Exists(directoryTreeNode?.DirectoryName ?? string.Empty);
	  }
      }

      public static class QueueExtensions
      {
	  public static void Add<T>(this Queue<T> queue, T item)
	  {
	      queue.Enqueue(item);
	  }
      }

      public static class Main
      {
	  var directoryTree = new DirectoryTree();
	  directoryTree
	  .WalkSilently(@"c:\temp")
	  .Where(n => !n.DirectoryName.Contains(".git"))
	  .Take(100)
	  .Select(node => node.DirectoryName)
	  .Dump();


	  dolist (var (dirpath, dirnames, filenames) in directoryTree.WalkSilently(@"c:\temp").Where(n => !n.DirectoryName.Contains(".git")).Take(10))
	  {
	      filenames.Dump();
	  }

      }

      #+end_src
***** Links
      https://stackoverflow.com/questions/294138/merging-dictionaries-in-c-sharp
**** .NET Best Practices
***** .NET project layout
      #+begin_src markdown
      ```
      $/
	artifacts/
	build/
	docs/
	lib/
	packages/
	samples/
	src/
	tests/
	.editorconfig
	.gitignore
	.gitattributes
	build.cmd
	build.sh
	LICENSE
	NuGet.Config
	README.md
	{solution}.sln
      ```


      - `src` - Main projects (the product code)
      - `tests` - Test projects
      - `docs` - Documentation stuff, markdown files, help files etc.
      - `samples` (optional) - Sample projects
      - `lib` - Things that can **NEVER** exist in a nuget package
      - `artifacts` - Build outputs go here. Doing a build.cmd/build.sh generates artifacts here (nupkgs, dlls, pdbs, etc.)
      - `packages` - NuGet packages
      - `build` - Build customizations (custom msbuild files/psake/fake/albacore/etc) scripts
      - `build.cmd` - Bootstrap the build for windows
      - `build.sh` - Bootstrap the build for *nix
      - `global.json` - ASP.NET vNext only

      ## .gitignore
      ```
      [Oo]bj/
      [Bb]in/
      .nuget/
      _ReSharper.*
      packages/
      artifacts/
      ,*.user
      ,*.suo
      ,*.userprefs
      ,*DS_Store
      ,*.sln.ide
      ```

      There's probably more things that go in the ignore file.


      - Update: Added docs folder
      - Added README.md and LICENSE - Critical if you're OSS, if not ignore it
      - Renamed `test` to `tests`
      - Added lib for things that *CANNOT* exist in nuget packages
      - Removed NuGet.config for people using packet :)
      - Added global.json for ASP.NET vnext
      - Added .editorconfig file in the root (x-plat IDE settings)
      - Added NuGet.config back because people were confused about it missing
      #+end_src
***** .NET elements order in classes
      #+begin_src markdown
      ## SA1201

      <table>
      <tr>
	<td>TypeName</td>
	<td>SA1201ElementsMustAppearInTheCorrectOrder</td>
      </tr>
      <tr>
	<td>CheckId</td>
	<td>SA1201</td>
      </tr>
      <tr>
	<td>Category</td>
	<td>Ordering Rules</td>
      </tr>
      </table>

      ## Cause

      An element within a C# code file is out of order in relation to the other elements in the code.

      ## Rule description

      A violation of this rule occurs when the code elements within a file do not follow a standard ordering scheme.

      To comply with this rule, elements at the file root level or within a namespace should be positioned in the following order:

      ,* Extern Alias Directives
      ,* Using Directives
      ,* Namespaces
      ,* Delegates
      ,* Enums
      ,* Interfaces
      ,* Structs
      ,* Classes

      Within a class, struct, or interface, elements should be positioned in the following order:

      ,* Fields
      ,* Constructors
      ,* Finalizers (Destructors)
      ,* Delegates
      ,* Events
      ,* Enums
      ,* Interfaces
      ,* Properties
      ,* Indexers
      ,* Methods
      ,* Structs
      ,* Classes*

      Complying with a standard ordering scheme based on element type can increase the readability and maintainability of the file and encourage code reuse.

      When implementing an interface, it is sometimes desirable to group all members of the interface next to one another. This will sometimes require violating this rule, if the interface contains elements of different types. This problem can be solved through the use of partial classes.

      1. Add the partial attribute to the class, if the class is not already partial.

      2. Add a second partial class with the same name. It is possible to place this in the same file, just below the original class, or within a second file.

      3. Move the interface inheritance and all members of the interface implementation to the second part of the class.

      For example:

      ```csharp
      /// <summary>
      /// Represents a customer of the system.
      /// </summary>
      public partial class Customer
      {
	  // Contains the main functionality of the class.
      }

      /// <content>
      /// Implements the ICollection class.
      /// </content>
      public partial class Customer : ICollection
      {
	  public int Count
	  {
	      get { return this.count; }
	  }

	  public bool IsSynchronized
	  {
	      get { return false; }
	  }

	  public object SyncRoot
	  {
	      get { return null; }
	  }

	  public void CopyTo(Array array, int index)
	  {
	      throw new NotImplementedException();
	  }
      }
      ```

      ## How to fix violations

      To fix an instance of this violation, order the elements in the file in the order described above.

      ## How to suppress violations

      ```csharp
      [SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1201:ElementsMustAppearInTheCorrectOrder", Justification = "Reviewed.")]
      ```

      ```csharp
      #pragma warning disable SA1201 // ElementsMustAppearInTheCorrectOrder
      #pragma warning restore SA1201 // ElementsMustAppearInTheCorrectOrder
      ```

      #+end_src
**** .NET Toolings
***** .NET GUI:
      - https://avaloniaui.net/

**** .NET Projects
***** Lisp.NET
***** Unix Clipboard Manager
***** CLI Code Formater
**** .NET csproj
     #+begin_src xml
     <TargetFramework>net5.0</TargetFramework>
     <LangVersion>preview</LangVersion>
     <PublishTrimmed>true</PublishTrimmed>
     <DocumentationFile>$(OutputPath)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
     <PackAsTool>true</PackAsTool>
     <NoWarn>CS4014</NoWarn>
     <PackageOutputPath>./nupkg</PackageOutputPath>
     #+end_src
**** .NET Developer skills
     - Bachelor's degree in computer science
     - Experience with C#
     - Experience with ASP.NET [Core] and ASP.NET MVC frameworks
     - Good understanding and hands on experience with AWS, .NET, and WebAPI
     - Experience with data modeling, normalization, and SQL optimization
     - Strong understanding of SDLC, including Agile methodologies
     - Ability to collaborate and work with other developers and test effectively within SCRUM/Agile environment
     - Strong understanding of object-oriented design patterns, including dependency injection and inversion of control
     - Experience producing and consuming web APIs, including JSON and XML formats
     - Experience with REST-based services and APIs
     - Build and deployment knowledge to host .NET application on AWS using Visual Studio Team Services
     - Strong documentation, writing and interpersonal skills.
     - Front-End Toolings
**** [[https://docs.microsoft.com/en-us/aspnet/][ASP.NET]]
****** new project scaffold

       - dotnet new razor -o lxbarbosa

       - dotnet watch run

       - dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 3.1.2
       - dotnet aspnet-codegenerator razorpage List Empty -udl -outDir Pages/Restaurants
*** [[https://docs.microsoft.com/en-us/powershell/][Powershell]]
**** More Information
     powershell.org/
**** TODO projects
     - PowerPlug: Zplug like that easy managament of PowerShell modules and settings
**** Find All PowerShell Profile Locations
     $PROFILE | Format-List -Force
*** Databases
**** MSql

**** SQL read later
     http://www.craigkerstiens.com/2012/10/01/understanding-postgres-performance/

      https://github.com/edgedb/edgedb
** Swift
*** Sumario
    :PROPERTIES:
    :TOC:      :include all :depth 2 :ignore this
    :END:
  :CONTENTS:
  - [[#progresso][Progresso]]
    - [[#livros][Livros]]
    - [[#ldc][LDC]]
  :END:
*** Progresso
**** Livros
     | Livros | Capitulo | em | tarde | revisao |
     |--------+----------+----+-------+---------|
     |        |          |    |       |         |
**** LDC
     | Source Code | folder | file | @ |
     |-------------+--------+------+---|
     |             |        |      |   |
** Java
*** Java Books
****** JBG
******* Chapter 1
******** Chapter 1 Self Test
	 1.   What is bytecode and why is it important to Java’s use for Internet programming?

	    A1: Bytecode is a highly optimized set of instructions designed to be executed by the Java run-time system.
	    A2:Translating a Java program into bytecode makes it much easier to run a program in a wide variety
	       of environments because only the JVM needs to be implemented for each platform.

	 2.   What are the three main principles of object-oriented programming?
	    A: encapsulation, polymorphism, and inheritance

	 3.   Where do Java programs begin execution?
	    A: A call to main()

	 4.   What is a variable?
	    A: A variable is a named memory location that can be assigned a value

	 5.   Which of the following variable names is invalid?

	    A.   count

	    B.   $count

	    C.   count27

	--> D.   67count

	 6.   How do you create a single-line comment? How do you create a multiline comment?
	    // single-line comment

	 7.   Show the general form of the if statement. Show the general form of the for loop.
	    A1: if()
	    A2: for(){}

	 8.   How do you create a block of code?
	    A: A pair of {}

	 9.   The moon’s gravity is about 17 percent that of earth’s. Write a program that computes your
	 effective weight on the moon.
	 #+BEGIN_SRC java

	 /*  9.   The moon’s gravity is about 17 percent that of earth’s. Write a program that computes your
	     effective weight on the moon.
	 ,*/

	 class MoonWeight {
	     public static void main(String args[]) {

		 double EarthlyWeight = 202;
		 double moonGravityPercentage = 0.17;

		 double MoonlyWeight = EarthlyWeight  * moonGravityPercentage;

		 System.out.println(" Weight on Moon is: " + MoonlyWeight);
	     }
	 }

	 #+END_SRC

	 10.   Adapt Try This 1-2 so that it prints a conversion table of inches to meters. Display 12 feet of
	 conversions, inch by inch. Output a blank line every 12 inches. (One meter equals approximately
	 39.37 inches.)
	 #+BEGIN_SRC java

	 /*  10.   Adapt Try This 1-2 so that it prints a conversion table of inches to meters. Display 12 feet of
	     conversions, inch by inch. Output a blank line every 12 inches. (One meter equals approximately
	     39.37 inches.)
	 ,*/

	 class InchToMeterConversion {
	     public static void main(String args[]) {

		 double inches, meters;
		 int counter = 0;

		 for (inches = 1.0; inches <= 22; inches++) {

		     meters = inches * 0.0254; //convert to meters

		     System.out.println(inches + " inches is " + meters + " meters.");


		     counter++;

		     // every 12th line, print a blank line
		     if (counter == 12) {
			 System.out.println();

			 counter = 0; // reset the line counter
		     }
		 }
	     }
	 }

	  #+END_SRC

	 11.   If you make a typing mistake when entering your program, what sort of error will result?
	    A:error: cannot find symbol

	 12.   Does it matter where on a line you put a statement?
	     Nope. Indenting is for human readability.n

******* Chapter 2
******** Exercises
********* 1. Why does Java strictly specify the range and behavior of its primitive types?
	  Java’s portability requirement!!!!!
********* 2. What is Java’s character type, and how does it differ from the character type used by some other programming languages?
	  Java uses Unicode. Unicode defines a character set that can represent all of the characters found in all human languages.
	  In Java, char is an unsigned 16-bit type having a range of 0 to 65,535.
	  The standard 8-bit ASCII character set is a subset of Unicode and ranges from 0 to 127.
	  Thus, the ASCII characters are still valid Java characters.
********* 3. A boolean value can have any value you like because any non-zero value is true. True or False?
	  True, very True!
********* 4. Given this output, using a single string, show the println( ) statement that produced it.
	  #+BEGIN_SRC java

	  System.out.println("One\nTwo\nThree");

	  #+END_SRC
********* 5. What is wrong with this fragment?
	  #+BEGIN_SRC java

	  #+END_SRC
	  print is out of the for loop and will issue an error as sum is not know out of for block scope!!

********* 6. Explain the difference between the prefix and postfix forms of the increment operator.
	  PREFIX =  When an increment or	decrement operator precedes its operand, Java will perform the corresponding
	  operation prior to obtaining the operand’s value for use by the rest of the expression.

	  POSTFIX = If the operator follows its operand, Java will obtain the operand’s value before incrementing or decrementing it.

********* TODO 7. Show how a short-circuit AND can be used to prevent a divide-by-zero error.
	  #+BEGIN_SRC java

	  #+END_SRC
********* 8. In an expression, what type are byte and short promoted to?
	  int
********* 9. In general, when is a cast needed?
	  When you need to ensure a given type is yield by the expression.
********* TODO 10. Write a program that finds all of the prime numbers between 2 and 100.
********* 11. Does the use of redundant parentheses affect program performance?
	  Use of redundant or additional parentheses will not cause errors or slow down the execution of the expression.
********* 12. Does a block define a scope?
	  Each time you start a new block, you are creating a new scope.
	  A scope determines what objects are visible to other parts of your program. It also determines the lifetime of those objects.
******* Chapter 3
******* Chapter 4
******** Exercises
********* 1.   What is the difference between a class and an object?
	  A class is a template that defines the form of an object. Java uses a class specification to construct objects.
	  Objects are instances of a class.
	  It is not until an object of that class has been created that a physical representation	of that class exists in memory.
********* 2.   How is a class defined?
	  You do this by specifying the instance variables that it contains and the methods that operate on them.
	  A well-designed class should define one and only one logical entity.

	  #+BEGIN_SRC java
	  class Example {
	      int var1;
	  }
	  #+END_SRC

	  A class definition creates a new data type.
********* 3.   What does each object have its own copy of?
	  Each object has its own copies of the instance variables defined by its class.
	  Thus, the contents of the variables in one object can differ from the contents of the variables in another.
	  There is no connection between the two objects	except for the fact that they are both objects of the same type.
********* 4.   Using two separate statements, show how to declare an object called counter of a class called MyCounter.
	  #+BEGIN_SRC java

	  class MyCounter {
	      int a = 10;
	  }

	  class DemoCounter {
	      public static void main(String[] args) {

		  MyCounter counter;
		  counter = new MyCounter();

		  System.out.println(counter.a);
	      }
	  }
	  #+END_SRC
********* 5.   Show how a method called myMeth( ) is declared if it has a return type of double and has two int parameters called a and b.
	  #+BEGIN_SRC java

	  class Meth {

	      int aa, bb;

	      double myMeth (int a, int b) {
		  aa = a;
		  bb = b;
	      }
	  }

	  #+END_SRC
********* *6.   How must a method return if it returns a value?**
	  #+BEGIN_SRC java

	  class Meth {

	      int a, b;

	      double myMeth (int a, int b) {
		  this.a = a;
		  this.b = b;

		  return (double) a + b;
	      }
	  }



	  #+END_SRC
********* 7.   What name does a constructor have?
	  It has the same name as its class and is syntactically similar to a method.
	  However, constructors have no explicit return type.
	  Typically, you will use a constructor to give initial values to the instance variables defined by the class,
	  or to perform any other startup procedures required to create a fully formed object.
********* 8.   What does new do?
	  *new* can be used to create an object of any class type. The new operator returns a
	  reference to the newly created object!
********* 9.   What is garbage collection, and how does it work?
	  Java’s garbage collection system reclaims objects automatically without any programmer intervention.
	  When no references to an object exist, that object is assumed to be no longer needed, and the memory occupied by the object is released.
	  This recycled memory can then be used for a subsequent allocation.
********* 10.   What is this?
	  When a method is called, it is automatically passed an implicit argument that is a reference to the invoking object
	  (that is, the object on which the method is called).
	  This reference is called this.

	  The Java syntax permits the name of a parameter or a local variable to be the same as the name of an instance variable.
	  When this happens, the local name hides the instance variable. You can gain access to the hidden instance variable by referring to it through *this*.
********* 11.   Can a constructor have one or more parameters?
	  Parameters are added to a constructor in the same way that they are added to a method: just declare them
	  inside the parentheses after the constructor’s name.
********* 12.   If a method returns no value, what must its return type be?
	  Void. You can use a return with a null statement or no return at all.
******* Chapter 5
******** Self Test
********* 1.   Show two ways to declare a one-dimensional array of 12 doubles.
	  #+BEGIN_SRC java
	  class OneDTwelve {
	      int i[] = new int[12];

	  }

	  #+END_SRC
********* 2.   Show how to initialize a one-dimensional array of integers to the values 1 through 5.
	  #+BEGIN_SRC java

	  int nums[] = {1,2,3,4,5}

	  #+END_SRC
********* 3.   Write a program that uses an array to find the average of 10 double values. Use any 10 values you like.
	  #+BEGIN_SRC java

	  public class BubbleDolist {

	      public static void main(String[] args) {

		  double nums[] = { 200.1, 2.5, 5.2, 199.1, 2.1};

		  int a, b;
		  int size;

		  size = 5; // number of elements to sort

		  // display original array
		  System.out.print("Original array is:");
		  for (double i : nums)
		      System.out.print(" " + i);
		  System.out.println();

		  // This is the Bubble sort.
		  for (a = 1; a < size; a++)
		      for (b = size-1; b >= a; b--) {
			  if(nums[b-1] > nums[b]) { // if out of order
			      // exchance elements
			      double t = nums[b-1];
			      nums[b-1] = nums[b];
			      nums[b] = t;
			  }

		      }

		  // display sorted array
		  System.out.print("Sorted array is:");
		  for (double z : nums)
		      System.out.print(" " + z);
	      }

	  }


	  #+END_SRC
********* TODO 4.   Change the sort in Try This 5-1 so that it sorts an array of strings. Demonstrate that it works.
	  #+BEGIN_SRC java

	  #+END_SRC
********* 5.   What is the difference between the String methods indexOf( ) and lastIndexOf( )?
	  indexOf( ): This method returns the index within this string of the first occurrence
	  of the specified character or -1, if the character does not occur.
	  lastIndexOf( ): This method returns the index of the last occurrence of the character in the character sequence represented
	  by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point.
********* 6.   Since all strings are objects of type String, show how you can call the length( ) and charAt( ) methods on this
	  #+BEGIN_SRC java

	  String str = new String("I like Java");

	  System.out.println(str);
	  System.out.println(str.length());
	  System.out.println(str.charAt(2));

	  #+END_SRC
********* TODO 7.   Expanding on the Encode cipher class, modify it so that it uses an eight-character string as the key.
********* 8.   Can the bitwise operators be applied to the double type?
	  Bitwise operations cannot be used on boolean, float, or double, or class types.
	  They are called the bitwise operators because they are used to test, set, or shift the individual bits that make up a value.
********* 9.   Show how this sequence can be rewritten using the ? operator.
	  #+BEGIN_SRC java

	  if(x < 0) y = 10;
	  else y = 20;

	  x < 0 ?  y = 10 : y = 20;

	  #+END_SRC
********* 10.   In the following fragment, is the & a bitwise or logical operator? Why?
	  #+BEGIN_SRC java
	  boolean a, b;
	  if(a & b)
	  #+END_SRC
	  No. Bitwise operations cannot be used on boolean, float, or double, or class types.
********* 11.   Is it an error to overrun the end of an array? Is it an error to index an array with a negative value?
	  Yes. it is a run-time error to overrun or underrun the end of an array.
	  Yes. Java Arrays index do not allow negative index
********* 12.   What is the unsigned right-shift operator?
	  always brings in a 0 on the left.
	  For this reason, the >>> is also called the zero-fill right shift.
	  You will use the unsigned right shift when shifting bit patterns, such as status codes, that do not represent integers.
********* 13.   Rewrite the MinMax class shown earlier in this chapter so that it uses a for-each style for loop.
	  #+BEGIN_SRC java

	  class MinMaxDolist {
	      public static void main(String[] args) {
		  int nums[] = {1, 99, -10, 100123, 18, -978,
				5623, 463, -9, 287, 49};

		  int min, max;
		  min = max = nums[0];

		  for (int x : nums) {
		      if(x < min) min = x;
		      if(x > max) max = x;
		  }

		  System.out.println("min: " + min);
		  System.out.println("max: " + max);
	      }
	  }

	  #+END_SRC
********* 14.   Can the for loops that perform sorting in the Bubble class shown in Try This 5-1 be converted into for-each style loops? If not, why not?
	  As for-each loops only objects I could not achieve a full for-each Bubble without some hackish trick! hehe
	  #+BEGIN_SRC java

	  class BubbleDolist {
	      public static void main(String[] args) {

		  int nums[] = {99, -10, 100123, 18, -978,
				5623, 463, -9, 287, 49};
		  int sample[] = new int[9]; // HACKISH TRICK

		  // display original array
		  System.out.print("Original array is:");
		  for (int i : nums)
		      System.out.print(" " + i);
		  System.out.println();

		  // This is the Bubble sort.
		  for (int x : nums){
		      for (int y: sample) {

			  int b = nums.length-1;

			  if(nums[b-1] > nums[b]) { // if out of order
			      // exchance elements
			      int t = nums[b-1];
			      nums[b-1] = nums[b];
			      nums[b] = t;
			  }

			  b--;
		      }
		  }

		  // display sorted array
		  System.out.print("Sorted array is:");
		  for (int z : nums)
		      System.out.print(" " + z);
	      }
	  }

	  #+END_SRC
********* 15.   Can a String control a switch statement?
	  Yes.
	  Being able to use strings in a switch statement can be very convenient and can improve the readability of some code.
	  However, switching on strings can be less efficient than switching on integers.
	  Therefore, it is best to switch on strings only in cases in which the controlling data is already in string form.
******* Chapter 6
******** Try This
********* Try 6-1 Queue - Control Acess
	   #+BEGIN_SRC java

	   class Queue {
	       private char q[];
	       private int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }

	   class QueueDemo {
	       public static void main(String[] args) {
		   Queue bigQ = new Queue(100);
		   Queue smallQ = new Queue(4);
		   char ch;
		   int i;

		   System.out.println("Using bigQ to store the alphabet.");

		   for (i = 0; i < 26; i++) {
		       bigQ.put((char) ('A' + i) );
		   }

		   // retrieve
		   System.out.println("Contents of bigQ: ");
		   for (i = 0; i < 26; i++) {
		       ch = bigQ.get();
		       if(ch != (char) 0) System.out.println(ch);
		   }

		   System.out.println("\n");

		   System.out.println("Using smallQ to generate errors.");
		   // Now
		   for (i = 0; i < 5; i++) {
		       System.out.println("Attempting to store " + (char) ('Z' - i));

		       smallQ.put((char) ('Z' - i));

		       System.out.println();
		   }
		   System.out.println();

		   // more errors on smallQ
		   System.out.println("Contets of smallQ: ");
		   for (i = 0; i < 5; i++) {
		       ch = smallQ.get();

		       if(ch != (char ) 0) System.out.println(ch);
		   }
	       }
	   }
	   #+END_SRC

********* Try 6-2 Queue - Construct Overload
	  #+BEGIN_SRC java

	  class Queue {
	      private char q[];
	      private int putloc, getloc;

	      Queue(int size) {
		  q = new char[size];
		  putloc = getloc = 0;
	      }

	      Queue(Queue ob) {
		  putloc = ob.putloc;
		  getloc = ob.getloc;
		  q = new char[ob.q.length];

		  for (int i = getloc; i < putloc; i++) {
		      q[i] = ob.q[i];
		  }
	      }

	      Queue(char a[]) {
		  putloc = 0;
		  getloc = 0;
		  q = new char[a.length];

		  for (int i = 0; i < a.length; i++) {
		      put(a[i]);
		  }
	      }

	      void put(char ch){
		  if(putloc==q.length){
		      System.out.println(" - Queue is full.");
		      return;
		  }

		  q[putloc++] = ch;
	      }

	      char get() {
		  if(getloc == putloc) {
		      System.out.println(" - Queue is empty.");
		      return (char) 0;
		  }

		  return q[getloc++];
	      }
	  }


	  class QDemo2 {
	      public static void main(String[] args) {

		  Queue q1 = new Queue(10);

		  char name[] = {'T', 'o', 'm'};

		  Queue q2 = new Queue(name);

		  char ch;
		  int i;

		  for (i = 0; i < 10; i++) {
		      q1.put((char) ('A' + i) );
		  }

		  Queue q3 = new Queue(q1);

		  System.out.print("Contents of q1: ");
		  for (i = 0; i < 10; i++) {
		      ch = q1.get();
		      System.out.print(ch);
		  }

		  System.out.println("\n");

		  System.out.print("Contents of q2: ");
		  for (i = 0; i < 3; i++) {
		      ch = q2.get();
		      System.out.print(ch);
		  }

		  System.out.println("\n");

		  System.out.print("Contents of q3: ");
		  for (i = 0; i < 10; i++) {
		      ch = q3.get();
		      System.out.print(ch);
		  }
	      }
	  }


	  #+END_SRC
******* Example
******** Chapter 1
********* example
	  #+BEGIN_SRC java
	      /*
		This is a simple Java program
		call this file Example.java
	      ,*/

	      class Example {
		// A java program begins with a call to main()
		public static void main(String arg[]) {
		  System.out.println("Java drives the Web.");
		}
	      }
	  #+END_SRC
********* example2
	  #+BEGIN_SRC java
	  /*
	    This demonstrate a variable
	    ,Call this file Example2.java */

	  class Example2 {
	      public static void main(String args[]){
		  int var1; // this declares a variable
		  int var2;  // this declares a variable

		  var1 = 1024; // this asigns 1024 to var1
		  System.out.println("var1 contains " + var1);

		  var2 = var1 / 2;

		  System.out.print("var2 contains var1 / 2: ");
		  System.out.println(var2);
	      }
	  }
	  #+END_SRC

********* example3
	  #+BEGIN_SRC java

	  /* This program illustrates the differences
	     ,between int and double.
	     ,
	     ,Call this file Example3.java
	  ,*/

	  class Example3 {

	      public static void main(String arg[]) {
		  int var;
		  double x;

		  var = 10;

		  x = 10.0;

		  System.out.println("Original value of var: " + var);
		  System.out.println("Original value of x: " + x);
		  System.out.println();

		  var = var / 4;
		  x = x / 4;

		  System.out.println("var after division : " + var);
		  System.out.println("x after division: " + x);
	      }
	  }

	  #+END_SRC

********* GalToLit
	 #+BEGIN_SRC java
	 /*
	   Try this 1-1

	   This program converts  gallons to liters.

	   Call this program GalToLit.java

	 ,*/

	 class GalToLit {
	     public static void main(String a[]) {
		 double gallons;
		 double liters;

		 gallons = 10;

		 liters = gallons * 3.7854;

		 System.out.println(gallons + " gallons is " + liters + " Liters.");
	     }
	 }

	 #+END_SRC
********* ifDemo.java
	  #+BEGIN_SRC java
	  // Demonstrate if
	  // Call this file ifDemo.java

	  class ifDemo  {
	      public static void main(String[] args) {
		  int a, b, c;

		  a = 2;
		  b = 3;

		  if (a < b) System.out.println("a is less than b");

		  // this wont display anything
		  if (a == b) System.out.println("you wont see this");

		  System.out.println();

		  c = a - b; // c contains -1

		  System.out.println("c contains -1");
		  if (c >= 0) System.out.println("c is non-negative");
		  if (c < 0) System.out.println("c is negative");

		  System.out.println();

		  c = b - a; // c contains 1

		  System.out.println("c contains 1");
		  if (c >= 0) System.out.println("c is non-negative");
		  if (c < 0) System.out.println("c is negative");
	      }
	  }

	  #+END_SRC
********* ForDemo.java
	  #+BEGIN_SRC java

	  /*  Demonstrate the for loop */

	  class ForDemo {
	      public static void main(String args[]){
		  int count;

		  for(count = 0; count < 5; count++)
		      System.out.println("This is count: " + count);

		  System.out.println("Done!");
	      }
	  }

	  #+END_SRC
********* BlockDemo.java
	#+BEGIN_SRC java
	/*  Demonstrate a block of code */

	class BlockDemo {
	    public static void main(String args[]) {
		double i, j, d;

		i = 5;
		j = 10;

		//  the target of this if is a block
		if (i != 0) {
		    System.out.println("i does not equal zero");
		    d = j / i;
		    System.out.println("j / is " + d);
		}
	    }
	}


       #+END_SRC
********* GalToLitTable
	 #+BEGIN_SRC java

	 /*  This program converts  gallons to liters. */

	 class GalToLitTable {
	     public static void main(String a[]) {
		 double gallons, liters;
		 int counter;

		 counter  = 10;
		 for( gallons = 1; gallons <= 100; gallons++){
		     liters = gallons * 3.7854; //convert to liters
		     System.out.println(gallons + " gallons is " +
					liters + "liters.");

		     counter++;
		     // every 10th line, print a blank line
		     if(counter == 10 ){
			 System.out.println();
			 counter = 0; // reset the line counter
		     }
		 }
	     }
	 }

	 #+END_SRC

******** Chapter 2
********* Examples
********** Inches
	   #+BEGIN_SRC java

	   /*  Compute the number of cubic inches
	       in 1 cubic mile
	   ,*/

	   class inches {
	       public static void main(String args[]){
		   long ci;
		   long im;

		   im = 5280 * 12;
		   ci = im * im * im;
		   System.out.println("There are " + ci +
				      " cubic inches in cubic mile.");
	       }
	   }

	   #+END_SRC

********** Hypotenuse
	   #+BEGIN_SRC java

	   /*  Use the pythagorean theorem to
	       find the length of the hypotenuse
	       given the lengths of the two opposing
	       sides */

	   class Hypto {
	       public static void main(String args[]){
		   double x, y, z;

		   x = 3;
		   y = 4;

		   z = Math.sqrt(x*x + y*y);

		   System.out.println("Hypotenuse is " +z);
	       }
	   }


	   #+END_SRC

********** CharArithDemo
	    #+BEGIN_SRC java
	    // Character variables can handle like integers

	    class CharArithDemo {
		public static void main(String args[]) {

		    char ch = 'X';
		    System.out.println("ch contains " + ch);

		    ch++; //increment ch
		    System.out.println("ch is now " + ch);

		    ch = 90; // give ch the value Z
		    System.out.println("ch is now " + ch);

		}
	    }

    #+END_SRC

********** BoolDemo
	    #+BEGIN_SRC java
	    // Demonstrates boolean values.

	    class BoolDemo {
		public static void main(String args[]) {

		    boolean b;

		    b = false;
		    System.out.println("b is " + b);

		    b = true;
		    System.out.println("b is " + b);

		    // a boolean value can control the if statement
		    if(b) System.out.println("This is executed");

		    b = false;
		    if(b) System.out.println("This is not executed");

		    // outcome  of a relational operator is a boolean value
		    System.out.println("10 > 9 is  " + (10 > 9));

		}
	    }

    #+END_SRC

********** StrDemo
	   #+BEGIN_SRC java

	   class StrDemo {
	       public static void main(String args[]){
		   System.out.println("First line\n Second line");
		   System.out.println("A\tB\tC");
		   System.out.println("D\tE\tF");
	       }
	   }


	   #+END_SRC
********** Dyninit
	   #+BEGIN_SRC java
	   // Computes the volume of a cylinder given the radius of its base and its height

	   class Dyninit {
	       public static void main(String args[]){
		   double radius = 4, height = 5;

		   double volume = 3.146 * radius * radius * height;

		   System.out.println("Volume is " + volume);
	       }
	   }


	   #+END_SRC
********** ScopeDemo
	   #+BEGIN_SRC java

	   class ScopeDemo {
	       public static void main(String args[]){
		   int x; // global

		   x = 10;
		   if(x == 10)  { // new scope

		       int y = 20; // block local var

		       // x and y are visible here

		       System.out.println("x and y: " +  x + " " + y);

		       x = y * 2;
		   }

		   // y = 100; // Error! y not known here

		   // x still global/visible here

		   System.out.println("x is " + x);
	       }
	   }


	   #+END_SRC
********** VarInitDemo
	   #+BEGIN_SRC java
	   class VarInitDemo {
	       public static void main(String args[]){
		   int x;

		   for(x = 0; x< 3; x++) {
		       int y = -1;
		       System.out.println("y is: " + y);
		       y = 100;
		       System.out.println("y is now:" + y);
		   }
	       }
	   }


	   #+END_SRC
********** NestVar
	   #+BEGIN_SRC java
	   class NestVar {
	       public static void main(String args[]){
		   int count;

		   for(count = 0; count< 10; count = count+1) {
		       System.out.println("this is count: " + count);

		       int count;
		       for (count = 0; count < 2; count++) {
			   System.out.println("This program is in error!");
		       }
		   }
	       }
	   }


	   #+END_SRC
********** ModDemo
	   #+BEGIN_SRC java

	   class ModDemo {
	       public static void main(String[] args) {
		   int iresult, irem;
		   double dresult, drem;

		   iresult = 10 / 3;
		   irem = 10 % 3;
		   dresult = 10.0 / 3.0;
		   drem = 10.0 % 3.0;

		   System.out.println("Result and remainder of 10 / 3 " +
				      iresult + " " + irem);

		   System.out.println("Result and remainder of 10.0 / 3.0 " +
				      dresult + " " + drem);
	       }
	   }

	   #+END_SRC
********** SqrRoot
	   #+BEGIN_SRC java

	   // Show square roots of 1 to 99 and rounding error.
	   public class SqrRoot {
	       public static void main(String[] args) {
		   double num, sroot, rerr;

		   for (num = 1.0; num < 100.0; num++) {
		       sroot = Math.sqrt(num);
		       System.out.println("Square root of " + num +
					  " is " + sroot);

		       // compute rounding error
		       rerr = num  - (sroot * sroot);
		       System.out.println("Rounding error is " + rerr);
		       System.out.println();
		   }
	       }
	   }

	   #+END_SRC
********** RelLogOps
	   #+BEGIN_SRC java

	   class RelLogOps {
	       public static void main(String[] args) {
		   int i, j;
		   boolean b1, b2;

		   i = 10;
		   j = 11;
		   if(i < j) System.out.println("i < j");
		   if(i <= j) System.out.println("i <= j");
		   if(i != j) System.out.println("i != j");
		   if(i == j) System.out.println("this wont execute");
		   if(i >= j) System.out.println("this wont execute");
		   if(i > j) System.out.println("this wont execute");

		   b1 = true;
		   b2 = false;
		   if(b1 & b2) System.out.println("this wont execute");
		   if(!(b1 & b2)) System.out.println("!(b1 & b2) is true");
		   if(b1 | b2) System.out.println("b1 | b2 is true");
		   if(b1 ^ b2) System.out.println("b1 ^ b2 is true");
	       }
	   }

	   #+END_SRC
********** SCops
	   #+BEGIN_SRC java
	   class SCops {
	       public static void main(String[] args) {
		   int n, d;

		   n = 10;
		   d = 2;
		   if(d != 0 && (n % d) == 0)
		       System.out.println(d + "is a factor of " + n);

		   d = 0;

		   if(d != 0 && (n % d) == 0)
		       System.out.println(d + "is a factor of " + n);


		   if(d != 0 & (n % d) == 0) // WARNING: / by zero
		       System.out.println(d + "is a factor of " + n);

	       }
	   }

	   #+END_SRC
********** SideEffects
	   #+BEGIN_SRC java
	   class SideEffects {
	       public static void main(String[] args) {
		   int i;

		   i = 0;

		   if (false & (++i < 100))
		       System.out.println("this wont be displayed");
		   System.out.println("if statement executed: " + i); // 1


		   if (false && (++i < 100))
		       System.out.println("this wont be displayed");
		   System.out.println("if statement executed: " + i); // still 1
	       }
	   }

	   #+END_SRC
********** LtoD
	   #+BEGIN_SRC java
	   class LtoD {
	       public static void main(String[] args) {
		   long L;
		   double D;

		   D = 1000123285.0;
		   L = D; // ERROR: illegal

		   System.out.println("L and D: " + L + " " + D);
	       }
	   }

	   #+END_SRC
********** CastDemo
	   #+BEGIN_SRC java

	   class CastDemo {
	       public static void main(String[] args) {
		   double x, y;
		   byte b;
		   int i;
		   char ch;

		   x = 10.0;
		   y = 3.0;

		   i = (int) (x / y); // double to int
		   System.out.println("Integer outcome of x / y: " + i);

		   i = 100;
		   b = (byte) i;
		   System.out.println("Value of b: " + b);

		   i = 257;
		   b = (byte) i;
		   System.out.println("Value of b:" + b);

		   b = 88; // ASCII X
		   ch = (char) b;
		   System.out.println("ch: " + ch);
	       }
	   }

	   #+END_SRC
********** PromDemo
	   #+BEGIN_SRC java
	   class PromDemo {
	       public static void main(String[] args) {
		   byte b;
		   int i;

		   b = 10;
		   i = b * b;

		   b = 10;
		   b = (byte) (b * b);

		   System.out.println("i and b: " + i + " " + b);
	       }
	   }


	   #+END_SRC
********** UseCast
	   #+BEGIN_SRC java
	   class UseCast {
	       public static void main(String[] args) {
		   int i;

		   for (i = 0; i < 5; i++) {
		       System.out.println(i + " / 3: " + i / 3 );
		       System.out.println(i + " / 3 with fractions: "
					  + (double) i / 3);
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
********* Try This
********** Try This 2-1 Sound
	   #+BEGIN_SRC java

	   class Sound {
	       public static void main(String args[]){
		   double dist;

		   dist = 7.2 * 1110;

		   System.out.println("The lightning is " + dist +
				      " feet away.");
	       }
	   }


	   #+END_SRC
********** Try This 2-1 Sound - Challenge
	   #+BEGIN_SRC java

	   #+END_SRC
********** Try This 2-2 LogicalOpTable
	   #+BEGIN_SRC java
	   class LogicalOpTable {
	       public static void main(String[] args) {
		   boolean p, q;

		   System.out.println("P\tQ\tAND\tOR\tXOR\tNOT");

		   p = true; q = true;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));

		   p = true; q = false;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));


		   p = false; q = true;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));

		   p = false; q = false;
		   System.out.print(p + "\t" + q + "\t");
		   System.out.print((p&q) + "\t"  + (p|q) + "\t");
		   System.out.println((p^q) + "\t" + (!p));
	       }
	   }

	   #+END_SRC
********** Try This 2-2 LogicalOpTable - Challenge
	   #+BEGIN_SRC java

	   class LogicalOpTableChallenge {
	       public static void main(String[] args) {
		   boolean p, q;

		   System.out.println("P\tQ\tAND\tOR\tXOR\tNOT");

		   p = true; q = true;
		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = true; q = false;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = false; q = true;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

		   System.out.println();

		   p = false; q = false;

		   if (p) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p&q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p|q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (p^q) System.out.print("1\t");
		   else System.out.print("0\t");

		   if (!p) System.out.print("1\t");
		   else System.out.print("0\t");

	       }
	   }


	   #+END_SRC

******** Chapter 3
******** Chapter 4
********* Examples
********** VehicleDemo
	   #+BEGIN_SRC java
	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;
	   }

	   class VehicleDemo {
	       public static void main(String[] args) {
		   Vehicle minivan = new Vehicle();
		   int range;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   range = minivan.fuelcap * minivan.mpg;
		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with a range of " + range);
	       }
	   }

	   #+END_SRC
********** TwoVehicle
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;
	   }

	   class TwoVehicles {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   int range, range2;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;


		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   range = minivan.fuelcap * minivan.mpg;
		   range2 = sportscar.fuelcap * sportscar.mpg;

		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with a range of " + range);

		   System.out.println("Sportscar can carry " + sportscar.passengers +
				      " with a range of " + range2);
	       }
	   }

	   #+END_SRC
********** AddMeth
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // Display the range
	       void range () {
		   System.out.println("Range is " + fuelcap * mpg);
	       }
	   }

	   class AddMeth {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   int range, range2;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   range = minivan.fuelcap * minivan.mpg;
		   range2 = sportscar.fuelcap * sportscar.mpg;

		   System.out.print("Minivan can carry " +  minivan.passengers +
				    ". ");

		   minivan.range(); // Display range of minivan

		   System.out.print("Sportscar can carry " + sportscar.passengers +
				    ". ");

		   sportscar.range(); // Display range of sportcar
	       }
	   }

	   #+END_SRC
********** RetMeth
	   #+BEGIN_SRC java

	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // Display the range
	       int range () {
		   return mpg * fuelcap;
	       }
	   }

	   class RetMeth {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   System.out.println("Minivan can carry " +  minivan.passengers +
				      " with ranger of " + minivan.range() + " Miles");

		   System.out.print("Sportscar can carry " + sportscar.passengers +
				    " with ranger of " + sportscar.range() + " Miles");
	       }
	   }

	   #+END_SRC
********** IsFact
	   #+BEGIN_SRC java

	   class Factor {

	       boolean isFactor (int a, int b){
		   if ( (b % a) == 0) return true;
		   else return false;
	       }
	   }

	   class IsFact {
	       public static void main(String[] args) {

		   Factor x = new Factor();

		   if (x.isFactor(2, 20)) System.out.println("2 is factor");
		   if (x.isFactor(3, 20)) System.out.println("This wont be displayed");
	       }
	   }

	   #+END_SRC
********** VehicleDemo2
	   #+BEGIN_SRC java


	   class Vehicle {
	       int passengers;
	       int fuelcap;
	       int mpg;

	       // return the range
	       int range () {
		   return mpg * fuelcap;
	       }

	       double fuelneeded (int miles){
		   return (double) miles / mpg;
	       }
	   }

	   class CompFuel {
	       public static void main(String[] args) {

		   Vehicle minivan = new Vehicle();
		   Vehicle sportscar = new Vehicle();

		   double gallons;
		   int dist = 252;

		   minivan.passengers = 7;
		   minivan.fuelcap = 16;
		   minivan.mpg = 21;

		   sportscar.passengers = 2;
		   sportscar.fuelcap = 14;
		   sportscar.mpg = 12;

		   gallons = minivan.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles minivan needs  " +
				      gallons + "gallons of fuel.");

		   System.out.println("To go " + dist + " miles sportcar needs  " +
				      gallons + "gallons of fuel.");
	       }
	   }
	   #+END_SRC
********** ConsDemo
	   #+BEGIN_SRC java


	   class MyClass {
	       int x;

	       MyClass () {
		   x = 10;
	       }
	   }

	   class ConsDemo {
	       public static void main(String[] args) {
		   MyClass t1 = new MyClass();
		   MyClass t2 = new MyClass();

		   System.out.println(t1.x + " " + t2.x);
	       }
	   }
	   #+END_SRC
********** VehConsDemo
	   #+BEGIN_SRC java

	   class Vehicle {

	       int passengers;
	       int fuelcap;
	       int mpg;

	       Vehicle (int p, int f, int m) {

		   passengers = p;
		   fuelcap = f;
		   mpg = m;
	       }

	       // return the range
	       int range () {

		   return mpg * fuelcap;
	       }

	       double fuelneeded (int miles){
		   return (double) miles / mpg;
	       }
	   }

	   class VehConsDemo {
	       public static void main(String[] args) {

		   // Construct complete vehicles
		   Vehicle minivan = new Vehicle(7, 16, 21);
		   Vehicle sportscar = new Vehicle(2, 14, 12);

		   double gallons;
		   int dist = 252;

		   gallons = minivan.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles minivan needs  " +
				      gallons + " gallons of fuel.");

		   gallons = sportscar.fuelneeded(dist);

		   System.out.println("To go " + dist + " miles sportcar needs  " +
				      gallons + " gallons of fuel.");
	       }
	   }

	   #+END_SRC
********** DemoPwr
	   #+BEGIN_SRC java

	   class Pwr {
	       double b;
	       int e;
	       double val;

	       Pwr (double base, int exp) {
		   b = base;
		   e = exp;

		   val = 1;
		   if (exp == 0) return;
		   for (; exp > 0; exp--) val = val * base;
	       }

	       double get_pwr() {
		   return val;
	       }
	   }

	   class DemoPwr {
	       public static void main(String[] args) {
		   Pwr x = new Pwr(4.0, 2);
		   Pwr y = new Pwr(2.5, 1);
		   Pwr z = new Pwr(5.7, 0);

		   System.out.println(x.b + " raised to the " + x.e +
				      " power is " + x.get_pwr());

		   System.out.println(y.b + " raised to the " + y.e +
				      " power is " + y.get_pwr());

		   System.out.println(z.b + " raised to the " + z.e +
				      " power is " + z.get_pwr());
	       }
	   }
	   #+END_SRC
********* Try This
********** Try this 4-1 HelpClassDemo
	   #+BEGIN_SRC java
	   // Try this 4-1

	   // Convert the help system from Try This 3-3 into
	   // a Help Class

	   class Help {
	       void helpOn(int what) {
		   switch(what) {
		   case '1':
		       // System.out.println("The if:\n");
		       System.out.println("if(condition) statement;");
		       System.out.println("else statement;");
		       break;
		   case '2':
		       System.out.println("The switch:\n");
		       System.out.println("switch(expression) {");
		       System.out.println(" case constant:");
		       System.out.println("   statement sequence ");
		       System.out.println("    break;");
		       System.out.println("   // ...");
		       System.out.println("}");
		       break;
		   case '3':
		       System.out.println("The for:\n");
		       System.out.println("for(init; condition; iteration)");
		       System.out.println(" statement");
		       break;
		   case '4':
		       System.out.println("The while:\n");
		       System.out.println("while(condition) statement");
		       break;
		   case '5':
		       System.out.println("The do-while:\n");
		       System.out.println("do {");
		       System.out.println("   statement;");
		       System.out.println("} while (condition);");
		       break;
		   case '6':
		       System.out.println("The break:\n");
		       System.out.println("break; or break label;");
		       break;
		   case '7':
		       System.out.println("The continue:\n");
		       System.out.println("continue; or continue label;");
		       break;
		   }
		   System.out.println();
	       }

	       void showMenu() {
		   System.out.println("Help on:");
		   System.out.println("   1. if");
		   System.out.println("   2. switch");
		   System.out.println("   3. for");
		   System.out.println("   4. while");
		   System.out.println("   5. do-while");
		   System.out.println("   6. break");
		   System.out.println("   7. continue");
		   System.out.println("Choose one (q to quit): ");
	       }

	       boolean isValid(int ch) {
		   if(ch < '1' | ch > '7' & ch != 'q') return false;
		   else return true;
	       }
	   }

	   class HelpClassDemo {
	       public static void main(String[] args)
		   throws java.io.IOException {

		   char choice, ignore;
		   Help hlpobj = new Help();

		   for (;;) {
		       do {
			   hlpobj.showMenu();

			   choice = (char) System.in.read();

			   do {
			       ignore = (char) System.in.read();
			   } while(ignore != '\n');

		       } while( !hlpobj.isValid(choice));

		       if(choice == 'q') break;

		       System.out.println("\n");

		       hlpobj.helpOn(choice);
		   }
	       }
	   }


	   #+END_SRC
******** Chapter 5
********* Examples
********** ArrayDemo
	   #+BEGIN_SRC java

	   class ArrayDemo {
	       public static void main(String[] args) {
		   int sample[] = new int[10];
		   int i;

		   for (i = 0; i < 10; i = i + 1)
		       sample[i] = i;

		   for (i = 0; i < 10; i= i + 1)
		       System.out.println("This is sample[" + i + "]: " +
					  sample[i]);
	       }
	   }
	   #+END_SRC
********** MinMax
	   #+BEGIN_SRC java

	   class MinMax {
	       public static void main(String[] args) {
		   int nums[] = new int[10];
		   int min, max;

		   nums[0] = 99;
		   nums[1] = -10;
		   nums[2] = 100123;
		   nums[3] = 18;
		   nums[4] = -978;
		   nums[5] = 5623;
		   nums[6] = 463;
		   nums[7] = -9;
		   nums[8] = 287;
		   nums[9] = 49;

		   min = max = nums[0];

		   for (int i = 1; i < 10; i++) {
		       if(nums[i] < min) min = nums[i];
		       if(nums[i] > max) max = nums[i];
		   }

		   System.out.println("min and max:" + min + " " + max);
	       }
	   }


	   #+END_SRC
********** MinMax2
	   #+BEGIN_SRC java

	   class MinMax2 {
	       public static void main(String[] args) {
		   int nums[] = {99, -10, 100123, 18, -978,
				 5623, 463, -9, 287, 49};
		   int min, max;

		   min = max = nums[0];
		   for (int i = 1; i < 10; i++) {
		       if(nums[i] < min) min = nums[i];
		       if(nums[i] > max) max = nums[i];
		   }

		   System.out.println("min and max:" + min +b " " + max);
	       }
	   }


	   #+END_SRC
********** ArrayErr
	   #+BEGIN_SRC java

	   class ArrayErr {
	       public static void main(String[] args) {
		   int sample[] = new int[10];
		   int i;

		   // generate an array overrun
		   for (i = 0; i < 100; i = i+1)
		       sample[i] = i;
	       }
	   }

	   #+END_SRC
********** TwoD
	   #+BEGIN_SRC java

	   class TwoD {
	       public static void main(String[] args) {
		   int t, i;
		   int table[][] = new int[3][4];

		   for (t = 0; t < 3; ++t) {
		       for (i = 0; i < 4; ++i) {
			   table[t][i] = (t*4) +i +1;
			   System.out.println(table[t][i] + " ");
		       }
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
********** Squares
	   #+BEGIN_SRC java

	   class Squares {
	       public static void main(String[] args) {
		   int sqrs[][] = {
		       {1, 1},
		       {2, 4},
		       {3, 9},
		       {4, 16},
		       {5, 25},
		       {6, 36},
		       {7, 49},
		       {8, 64},
		       {9, 81},
		       {10, 100}
		   };

		   int i, j;

		   for (i = 0; i < 10; i++) {
		       for (j = 0; j < 2; j++)
			   System.out.print(sqrs[i][j] + " ");
		       System.out.println();
		   }
	       }
	   }


	   #+END_SRC
********** AssignARef
	   #+BEGIN_SRC java

	   class AssignARef {
	       public static void main(String[] args) {
		   int i;

		   int nums1[] = new int[10];
		   int nums2[] = new int[10];

		   for (i = 0; i < 10; i++)
		       nums1[i] = i;

		   for (i = 0; i < 10; i++)
		       nums2[i] = i;

		   System.out.print("Here is nums1: ");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums1[i] + " ");
		   System.out.println();

		   nums2 = nums1; // now num2 refers to nums1

		   System.out.print("Here is nums2 after assignment: ");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums2[i] + " ");
		   System.out.println();

		   // now operate on nums1 array through nums2
		   nums2[3] = 99;

		   System.out.print("Here is nums1 after chang through nums2:");
		   for (i = 0; i < 10; i++)
		       System.out.print(nums1[i] + " ");
		   System.out.println();
	       }
	   }


	   #+END_SRC
********** LengthDemo
	   #+BEGIN_SRC java

	   class LengthDemo {
	       public static void main(String[] args) {
		   int list[] = new int[10];
		   int nums[] = { 1, 2, 3};
		   int table[][] = { // a variable-length table

		       {1, 2, 3},
		       {4, 5},
		       {6, 7, 8, 9}
		   };

		   System.out.println("length of list is " + list.length);
		   System.out.println("length of list is " + nums.length);
		   System.out.println("length of table is " + table.length);
		   System.out.println("length of table[0] is " + table[0].length);
		   System.out.println("length of table[1] is " + table[1].length);
		   System.out.println("length of table[2] is " + table[2].length);
		   System.out.println();

		   // use length to initialize list
		   for (int i = 0; i < list.length; i++)
		       list[i] = i * i;

		   System.out.print("Here is list: ");
		   // now use length to display list
		   for (int i = 0; i < list.length; i++)
		       System.out.print(list[i] + " ");
		   System.out.println();
	       }
	   }


	   #+END_SRC
********** ACopy
	   #+BEGIN_SRC java

	   class ACopy {
	       public static void main(String[] args) {

		   int i;
		   int nums1[] = new int[10];
		   int nums2[] = new int[10];

		   for (i = 0; i < nums1.length; i++)
		       nums1[i] = i;

		   // copy nums1 to nums2
		   if(nums2.length >= nums1.length)
		       for (i = 0; i < nums1.length; i++)
			   nums2[i] = nums1[i];

		   for (i = 0; i < nums2.length; i++)
		       System.out.println(nums2[i] + " ");
	       }
	   }


	   #+END_SRC
********** UpCase
	   #+BEGIN_SRC java

	   class UpCase {
	       public static void main(String[] args) {
		   char ch;

		   for (int i = 0; i < 10; i++) {
		       ch = (char) ('a' + i);
		       System.out.print(ch);

		       // This statement turns off the 6th bit.
		       ch = (char) ((int) ch & 65503); // ch is now uppercase

		       System.out.print(ch + " ");
		   }
	       }
	   }


	   #+END_SRC
********** ShowBits
	   #+BEGIN_SRC java

	   class ShowBits {
	       public static void main(String[] args) {
		   int t;
		   byte val;

		   val= 123;
		   for (t = 128; t > 0; t = t/2) {
		       if((val & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
	       }
	   }


	   #+END_SRC
********** LowCase
	   #+BEGIN_SRC java

	   class LowCase {
	       public static void main(String[] args) {
		   char ch;

		   for (int i = 0; i < 10; i++) {
		       ch = (char) ('A' + i);
		       System.out.print(ch);

		       // This statement turns on the 6th bit.
		       ch = (char) ((int) ch | 32); // ch isnw lowercase

		       System.out.print(ch + " ");
		   }
	       }
	   }


	   #+END_SRC
********** Encode
	   #+BEGIN_SRC java

	   class Encode {
	       public static void main(String[] args) {
		   String msg = "This is a test";
		   String encmsg = "";
		   String decmsg = "";
		   int key = 88;

		   System.out.print("Original message");
		   System.out.println(msg);

		   // encode the message
		   for (int i = 0; i < msg.length(); i++)
		       encmsg = encmsg + (char) (msg.charAt(i) ^ key);

		   System.out.print("Encoded message: ");
		   System.out.println(encmsg);

		   // decode the message
		   for (int i = 0; i < msg.length(); i++)
		       decmsg = decmsg + (char) (encmsg.charAt(i) ^ key);

		   System.out.print("Decoded message: ");
		   System.out.println(decmsg);
	       }
	   }


	   #+END_SRC
********** NotDemo
	   #+BEGIN_SRC java

	   class NotDemo {
	       public static void main(String[] args) {
		   byte b = -34;

		   for (int t = 128; t > 0; t = t/2) {
		       if((b & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
		   System.out.println();

		   // reverse all bits
		   b = (byte) ~b;

		   for (int t = 128; t > 0; t = t/2) {
		       if((b & t) != 0) System.out.print("1 ");
		       else System.out.print("0 ");
		   }
	       }
	   }


	   #+END_SRC
********** ShiftDemo
	   #+BEGIN_SRC java

	   class ShiftDemo {
	       public static void main(String[] args) {
		   int val = 1;

		   for (int i = 0; i < 8; i++) {
		       for (int t = 128; t > 0; t = t/2) {
			   if ((val & t) != 0) System.out.print("1 ");
			   else System.out.print("0 ");
		       }

		       System.out.println();
		       val = val << 1;	// left shift
		   }
		   System.out.println();

		   val = 128;

		   for (int i = 0; i < 8; i++) {
		       for (int t = 128; t > 0; t = t/2) {
			   if ((val & t) != 0) System.out.print("1 ");
			   else System.out.print("0 ");
		       }

		       System.out.println();
		       val = val >> 1;	// right shift
		   }
	       }
	   }


	   #+END_SRC
********** NoZeroDiv
	   #+BEGIN_SRC java

	   class NoZeroDiv {
	       public static void main(String[] args) {

		   int result;

		   for (int i = -5; i < 6; i++) {
		       result = i != 0 ? 100 / i : 0;
		       if(i != 0)
			   System.out.println("100 / " + i + " is " + result);
		   }
	       }
	   }


	   #+END_SRC
********** NoZeroDiv2
	   #+BEGIN_SRC java

	   class NoZeroDiv2 {
	       public static void main(String[] args) {

		   for (int i = -5; i < 6; i++)
		       if(i != 0 ? true : false)
			   System.out.println("100 / " + i +
					      " is " + 100 / i);
	       }
	   }
	   #+END_SRC
********* Try This
********** Try this 5-1 Bubbles
	   #+BEGIN_SRC java

	   /*
	     Try This 5-1

	     Demonstrate the Bubble sort.
	   ,*/

	   class Bubble {
	       public static void main(String[] args) {
		   int nums[] = {99, -10, 100123, 18, -978,
				 5623, 463, -9, 287, 49};

		   int a, b, t;
		   int size;

		   size = 10; // number of elements to sort

		   // display original array
		   System.out.println("Original array is:");
		   for (int i = 0; i < size; i++)
		       System.out.println(" " + nums[i]);
		   System.out.println();

		   // This is the Bubble sort.
		   for (a = 1; a < size; a++)
		       for (b = size-1; b >= a; b--) {
			   if(nums[b-1] > nums[b]) { // if out of order
			       // exchance elements
			       t = nums[b-1];
			       nums[b-1] = nums[b];
			       nums[b] = t;
			   }

		       }

		   // display sorted array
		   System.out.println("Sorted array is:");
		   for (int i = 0; i < size; i++)
		       System.out.println(" " + nums[i]);
		   System.out.println();
	       }
	   }


	   #+END_SRC
********** Try this 5-2 Queue
	   #+BEGIN_SRC java

	   class Queue {
	       char q[];
	       int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }


	   class QueueDemo {
	       public static void main(String[] args) {
		   Queue bigQ = new Queue(100);
		   Queue smallQ = new Queue(4);
		   char ch;
		   int i;

		   System.out.println("Using bigQ to store the alphabet.");

		   for (i = 0; i < 26; i++) {
		       bigQ.put((char) ('A' + i) );
		   }

		   // retrieve
		   System.out.println("Contents of bigQ: ");
		   for (i = 0; i < 26; i++) {
		       ch = bigQ.get();
		       if(ch != (char) 0) System.out.println(ch);
		   }

		   System.out.println("\n");


		   System.out.println("Using smallQ to generate errors.");
		   // Now
		   for (i = 0; i < 5; i++) {
		       System.out.println("Attempting to store " + (char) ('Z' - i));

		       smallQ.put((char) ('Z' - i));

		       System.out.println();
		   }
		   System.out.println();

		   // more errors on smallQ
		   System.out.println("Contets of smallQ: ");
		   for (i = 0; i < 5; i++) {
		       ch = smallQ.get();

		       if(ch != (char ) 0) System.out.println(ch);
		   }
	       }
	   }


	   #+END_SRC
********** Try this 5-3 A ShowBits Class
	   #+BEGIN_SRC java

	   /*
	     Try This 5-3
	     A class that displays the binary representation of a value
	   ,*/


	   class ShowBits {
	       int numbits;

	       ShowBits(int n){
		   numbits = n;
	       }

	       void show(long val){
		   long mask = 1;

		   // left-shift a 1 into the proper position
		   mask <<= numbits-1;

		   int spacer = 0;
		   for (; mask != 0; mask >>>= 1) {
		       if((val & mask) != 0) System.out.print("1");
		       else System.out.print("0");
		       spacer++;
		       if((spacer % 8) == 0){
			   System.out.print(" ");
			   spacer = 0;
		       }
		   }
		   System.out.println();
	       }
	   }


	   // Demonstrate ShowBits
	   class ShowBitsDemo {
	       public static void main(String[] args) {
		   ShowBits b = new ShowBits(8);
		   ShowBits i = new ShowBits(32);
		   ShowBits li = new ShowBits(64);

		   System.out.println("123 in binary: ");
		   b.show(123);

		   System.out.println("\n87987 in binary: ");
		   i.show(237658768);

		   // you can also show low-order bits of any integer
		   System.out.println("\nLow order 8 bits of 87987 in binary: ");
		   li.show(87987);
	       }
	   }


	   #+END_SRC

******** Chapter 6
********* Examples
********** AcessDemo
	   #+BEGIN_SRC java

	   class MyClass {
	       private int alpha; // private acess
	       public int beta; // public acess
	       int gamma; // default acess

	       /* Methods to acess alpha. It is OK f
		  of a class to acess a private member
		  of the same class.
	       ,*/


	       void setAlpha(int a) {
		   alpha = a;
	       }

	       int getAlpha() {
		   return alpha;
	       }
	   }

	   class AcessDemo {
	       public static void main(String[] args) {
		   MyClass ob = new MyClass();

		   /* Acess to alpha is allowed only through
		      its acessor methods. */
		   ob.setAlpha(-99);
		   System.out.println("ob.alpha is " + ob.getAlpha());

		   // You cannot acess alpha like this:
		   ob.alpha = 10; // Wrong! alpha is private!

		   // There are OK because beta and gamma are public.
		   ob.beta = 88;
		   ob.gamma = 99;
	       }
	   }


	   #+END_SRC
********** CallByValue
	   #+BEGIN_SRC java

	   class Test {
	       /* This method cause no change to the arguments
		  used in the call. */

	       void noChange(int i, int j) {
		   i = i + j;
		   j = -j;
	       }
	   }

	   class CallByValue {
	       public static void main(String[] args) {
		   Test ob = new Test();

		   int a = 15, b = 20;

		   System.out.println("a and b before call: " +
				      a + " " +b);

		   ob.noChange(a, b);

		   System.out.println("a and b after call: " +
				      a + " " + b);
	       }
	   }


	   #+END_SRC
********** PassObRef
	   #+BEGIN_SRC java

	   class Test {
	       int a, b;

	       Test(int i, int  j) {
		   a = i;
		   b = j;
	       }

	       void Change(Test ob) {
		   ob.a = ob.a + ob.b;
		   ob.b = -ob.b;
	       }
	   }

	   class PassObRef {
	       public static void main(String[] args) {
		   Test ob = new Test(15, 20);

		   System.out.println("ob.a and ob.b before call: " +
				      ob.a + " " + ob.b);

		   ob.Change(ob);

		   System.out.println("ob.a and ob.b after call: " +
				      ob.a + " " + ob.b);
	       }
	   }

	   #+END_SRC
********** ErrorMsg
	   #+BEGIN_SRC java

	   class ErrorMsg {
	       String msgs[] = {
		   "Output Error",
		   "Input Error",
		   "Disk Full",
		   "Index Out-Of-Bounds"
	       };

	       String getErrorMsg(int i) {
		   if(i >= 0 & i < msgs.length)
		       return msgs[i];
		   else
		       return "Invalid Error Code";
	       }
	   }

	   class ErrMsg {
	       public static void main(String[] args) {

		   ErrorMsg err = new ErrorMsg();

		   System.out.println(err.getErrorMsg(2));
		   System.out.println(err.getErrorMsg(19));
	       }
	   }


	   #+END_SRC
********** ErrInfo
	   #+BEGIN_SRC java

	   class Err {

	       String msg;
	       int severity;

	       Err(String m, int s) {
		   msg = m;
		   severity = s;
	       }
	   }

	   class ErrorInfo {

	       String msgs[] = {
		   "Output Error",
		   "Input Error",
		   "Disk Full",
		   "Index Out-Of-Bounds"
	       };

	       int howbad[] = { 3, 3, 2, 4};


	       Err getErrorInfo(int i) {
		   if(i >= 0 & i < msgs.length)
		       return  new Err(msgs[i], howbad[i]);
		   else
		       return new Err("Invalid Error Code", 0);
	       }
	   }

	   class ErrInfo {
	       public static void main(String[] args) {

		   ErrorInfo err = new ErrorInfo();
		   Err e;

		   e = err.getErrorInfo(2);
		   System.out.println(e.msg + " severity: " + e.severity);

		   e = err.getErrorInfo(19);
		   System.out.println(e.msg + " severity: " + e.severity);
	       }
	   }


	   #+END_SRC
********** Overload
	   #+BEGIN_SRC java

	   class Overload {
	       void ovlDemo() {
		   System.out.println("No parameters");
	       }

	       void ovlDemo(int a) {
		   System.out.println("One parameters: " + a);
	       }

	       int ovlDemo(int a, int b) {
		   System.out.println("Two parameters: " + a + " " + b);
		   return a + b;
	       }

	       double ovlDemo(double a, double b) {
		   System.out.println("Two double parameters: " +
				      a + " " + b);
		   return a + b;
	       }
	   }


	   class OverloadDemo {
	       public static void main(String[] args) {
		   Overload ob = new Overload();
		   int resI;
		   double resD;

		   ob.ovlDemo();
		   System.out.println();

		   resI = ob.ovlDemo(4, 6);
		   System.out.println("Result of ob.ovlDemo(4, 6): " + resI
				      + "\n");

		   resD = ob.ovlDemo(1.1, 2.32);
		   System.out.println("Result of ob.ovlDemo(1.1, 2.32): " + resD
				      + "\n");
	       }
	   }


	   #+END_SRC
********** Overload2
	   #+BEGIN_SRC java
	   class Overload2 {

	       void f(byte x) {
		   System.out.println("Inside f(byte): " + x);
	       }


	       void f(int x) {
		   System.out.println("Inside f(int): " + x);
	       }

	       void f(double x) {
		   System.out.println("Inside f(double): " + x);
	       }
	   }


	   class TypeConv {
	       public static void main(String[] args) {
		   Overload2 ob = new Overload2();

		   int i = 10;
		   double d = 10.1;

		   byte b = 99;
		   short s = 10;
		   float f = 11.5F;

		   ob.f(i);
		   ob.f(d);

		   ob.f(b);
		   ob.f(s);
		   ob.f(f);
	       }
	   }


	   #+END_SRC
********** OverloadConsDemo
	   #+BEGIN_SRC java

	   class MyClass {
	       int x;

	       MyClass() {
		   System.out.println("Inside MyClass().");
		   x = 0;
	       }

	       MyClass(int i) {
		   System.out.println("Inside MyClass(int).");
		   x = i;
	       }
	       MyClass(double d) {
		   System.out.println("Inside MyClass(double).");
		   x = (int) d;
	       }

	       MyClass(int i, int j) {
		   System.out.println("Inside MyClass(int, int).");
		   x = i * j;
	       }
	   }

	   class OverloadConsDemo {
	       public static void main(String[] args) {
		   MyClass t1 = new MyClass();
		   MyClass t2 = new MyClass(88);
		   MyClass t3 = new MyClass(17.23);
		   MyClass t4 = new MyClass(2, 4);

		   System.out.println("t1.x: " + t1.x);
		   System.out.println("t2.x: " + t2.x);
		   System.out.println("t3.x: " + t3.x);
		   System.out.println("t4.x: " + t4.x);
	       }
	   }


	   #+END_SRC
********** Summation
	   #+BEGIN_SRC java

	   class Summation {
	       int sum;

	       Summation(int num) {
		   sum = 0;
		   for (int i = 1; i <= num; i++)
		       sum += i;
	       }

	       Summation(Summation ob) {
		   sum = ob.sum;
	       }
	   }

	   class SumDemo {
	       public static void main(String[] args) {
		   Summation s1 = new Summation(5);
		   Summation s2 = new Summation(s1);

		   System.out.println("s1.sum: " + s1.sum);
		   System.out.println("s2.sum: " + s2.sum);
	       }
	   }


	   #+END_SRC
********** Factorial
	   #+BEGIN_SRC java

	   class Factorial {

	       int factR(int n) {
		   int result;

		   if(n==1) return 1;
		   result = factR(n-1) * n;
		   return result;
	       }

	       int factI(int n) {
		   int t, result;

		   result = 1;
		   for (t = 1; t <= n; t++) result *= t;
		   return result;
	       }
	   }


	   class Recursion {
	       public static void main(String[] args) {
		   Factorial f = new Factorial();

		   System.out.println("Factorials using recursive method.");
		   System.out.println("Factorial of 3 is " + f.factR(3));
		   System.out.println("Factorial of 3 is " + f.factR(4));
		   System.out.println("Factorial of 3 is " + f.factR(5));
		   System.out.println();

		   System.out.println("Factorials using iterative method.");
		   System.out.println("Factorial of 3 is " + f.factI(3));
		   System.out.println("Factorial of 3 is " + f.factI(4));
		   System.out.println("Factorial of 3 is " + f.factI(5));
	       }
	   }


	   #+END_SRC
********** StaticDemo
	   #+BEGIN_SRC java

	   class StaticDemo {

		       int x;
		       static int y;

		       int sum() {
			   return x + y;
		       }
		   }

		   class SDemo {
		       public static void main(String[] args) {

			   StaticDemo ob1 = new StaticDemo();
			   StaticDemo ob2 = new StaticDemo();

			   ob1.x = 10;
			   ob2.x = 20;
			   System.out.println("Of course, ob1.x and ob2.x " +
					      "are independent.");

			   System.out.println("ob1.x: " + ob1.x +
					      "\nob2.x. " + ob2.x);

			   System.out.println();

			   System.out.println("The static variable y is shared.");
			   StaticDemo.y = 100;
			   System.out.println("Set StaticDemo.y to 19.");

			   System.out.println("ob1.sum(): " + ob1.sum());
			   System.out.println("ob2.sum(): " + ob2.sum());
			   System.out.println();

			   StaticDemo.y = 100;
			   System.out.println("Change StaticDemo.y to 100");

			   System.out.println("ob1.sum(): " + ob1.sum());
			   System.out.println("ob2.sum(): " + ob2.sum());
			   System.out.println();
		       }
		   }


	   #+END_SRC
********** StaticMeth
	   #+BEGIN_SRC java

	   class StaticMeth {
	       static int val = 1024;

	       static int valDiv2() {
		   return val/2;
	       }
	   }

	   class SDemo2 {
	       public static void main(String[] args) {
		   System.out.println("val is " + StaticMeth.val);
		   System.out.println("StaticMeth.valDiv2(): " +
				      StaticMeth.valDiv2());

		   StaticMeth.val = 4;
		   System.out.println("val is " + StaticMeth.val);
		   System.out.println("StaticMeth.valDiv2(): " +
				      StaticMeth.valDiv2());
	       }
	   }


	   #+END_SRC
********** StaticBlock
	   #+BEGIN_SRC java

	   class StaticBlock {
	       static double rootOf2;
	       static double rootOf3;

	       static {
		   System.out.println("Inside static block.");
		   rootOf2 = Math.sqrt(2.0);
		   rootOf3 = Math.sqrt(3.0);
	       }

	       StaticBlock(String msg) {
		   System.out.println(msg);
	       }
	   }


	   class SDemo3 {
	       public static void main(String[] args) {
		   StaticBlock ob = new StaticBlock("Inside Constructor");

		   System.out.println("Square root of 2 is " +
				      StaticBlock.rootOf2);
		   System.out.println("Square root of 3 is " +
				      StaticBlock.rootOf3);
	       }
	   }


	   #+END_SRC
********** VarArgs
	   #+BEGIN_SRC java

	   // Demonstrate variable-length arguments.
	   class VarArg {

	       // vaTest() now uses a vararg.
	       static void vaTest(int ... v) {
		   System.out.print("Number of args: " + v.length + " Contents: ");

		   for(int x : v){
		       System.out.print(x + " ");

		       System.out.println();
		   }

	       }

	       public static void main(String[] args) {

		   // Notice how vaTest() can be called with a
		   // variable number of arguments.
		   vaTest(10);        // 1 arg
		   vaTest(1, 2, 3);   // 3 args
		   vaTest();          // no args
	       }
	   }


	   #+END_SRC
********** VarArgs2
	   #+BEGIN_SRC java

	   // Use varargs with standard arguments.
	   class VarArg2 {

	       // Here, msg is a normal parameter and v is a
	       // VarArg parameter
	       static void vaTest(String msg, int ... v) {
		   System.out.print(msg + v.length + " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest("One vaarg: ", 10);
		   vaTest("Three varargs: ", 1, 2, 3);
		   vaTest("No varags: ");
	       }
	   }


	   #+END_SRC
********** VarArgs3
	   #+BEGIN_SRC java


	   // Use varargs with standard arguments.
	   class VarArg3 {

	       static void vaTest(int ... v) {
		   System.out.print("vaTest(int ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(boolean ... v) {
		   System.out.print("vaTest(boolean ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(boolean x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(String msg, int ... v) {
		   System.out.print("vaTest(String, int ...): " +
				    msg + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest(1, 2, 3);
		   vaTest("Testing: ", 10, 20);
		   vaTest(true, false, false);
	       }
	   }

	   #+END_SRC
********** VarArg4 Ambiguity
	   #+BEGIN_SRC java

	   // Vaargs, overloading, and ambiguity.
	   //
	   // This program contains an error and will
	   // not compile!

	   class VarArg4 {

	       static void vaTest(int ... v) {
		   System.out.print("vaTest(int ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(int x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }


	       static void vaTest(boolean ... v) {
		   System.out.print("vaTest(boolean ...): " +
				    "Number of args " + v.length +
				    " Contents: ");

		   for(boolean x : v)
		       System.out.print(x + " ");

		   System.out.println();
	       }

	       public static void main(String[] args) {
		   vaTest(1, 2, 3); // OK
		   vaTest(true, false, false); // OK
		   vaTest(); // Error: Ambiguous
	       }
	   }


	   #+END_SRC
********* Try This
********** Try 6-1 Queue - Control Acess
	    #+BEGIN_SRC java

	    class Queue {
		private char q[];
		private int putloc, getloc;

		Queue(int size) {
		    q = new char[size];
		    putloc = getloc = 0;
		}

		void put(char ch){
		    if(putloc==q.length){
			System.out.println(" - Queue is full.");
			return;
		    }

		    q[putloc++] = ch;
		}

		char get() {
		    if(getloc == putloc) {
			System.out.println(" - Queue is empty.");
			return (char) 0;
		    }

		    return q[getloc++];
		}
	    }

	    class QueueDemo {
		public static void main(String[] args) {
		    Queue bigQ = new Queue(100);
		    Queue smallQ = new Queue(4);
		    char ch;
		    int i;

		    System.out.println("Using bigQ to store the alphabet.");

		    for (i = 0; i < 26; i++) {
			bigQ.put((char) ('A' + i) );
		    }

		    // retrieve
		    System.out.println("Contents of bigQ: ");
		    for (i = 0; i < 26; i++) {
			ch = bigQ.get();
			if(ch != (char) 0) System.out.println(ch);
		    }

		    System.out.println("\n");

		    System.out.println("Using smallQ to generate errors.");
		    // Now
		    for (i = 0; i < 5; i++) {
			System.out.println("Attempting to store " + (char) ('Z' - i));

			smallQ.put((char) ('Z' - i));

			System.out.println();
		    }
		    System.out.println();

		    // more errors on smallQ
		    System.out.println("Contets of smallQ: ");
		    for (i = 0; i < 5; i++) {
			ch = smallQ.get();

			if(ch != (char ) 0) System.out.println(ch);
		    }
		}
	    }
	    #+END_SRC

********** Try 6-2 Queue - Construct Overload
	   #+BEGIN_SRC java

	   class Queue {
	       private char q[];
	       private int putloc, getloc;

	       Queue(int size) {
		   q = new char[size];
		   putloc = getloc = 0;
	       }

	       Queue(Queue ob) {
		   putloc = ob.putloc;
		   getloc = ob.getloc;
		   q = new char[ob.q.length];

		   for (int i = getloc; i < putloc; i++) {
		       q[i] = ob.q[i];
		   }
	       }

	       Queue(char a[]) {
		   putloc = 0;
		   getloc = 0;
		   q = new char[a.length];

		   for (int i = 0; i < a.length; i++) {
		       put(a[i]);
		   }
	       }

	       void put(char ch){
		   if(putloc==q.length){
		       System.out.println(" - Queue is full.");
		       return;
		   }

		   q[putloc++] = ch;
	       }

	       char get() {
		   if(getloc == putloc) {
		       System.out.println(" - Queue is empty.");
		       return (char) 0;
		   }

		   return q[getloc++];
	       }
	   }


	   class QDemo2 {
	       public static void main(String[] args) {

		   Queue q1 = new Queue(10);

		   char name[] = {'T', 'o', 'm'};

		   Queue q2 = new Queue(name);

		   char ch;
		   int i;

		   for (i = 0; i < 10; i++) {
		       q1.put((char) ('A' + i) );
		   }

		   Queue q3 = new Queue(q1);

		   System.out.print("Contents of q1: ");
		   for (i = 0; i < 10; i++) {
		       ch = q1.get();
		       System.out.print(ch);
		   }

		   System.out.println("\n");

		   System.out.print("Contents of q2: ");
		   for (i = 0; i < 3; i++) {
		       ch = q2.get();
		       System.out.print(ch);
		   }

		   System.out.println("\n");

		   System.out.print("Contents of q3: ");
		   for (i = 0; i < 10; i++) {
		       ch = q3.get();
		       System.out.print(ch);
		   }
	       }
	   }


	   #+END_SRC

****** JCR
******* Chapter 3 -
******** Examples
********* Array
	  #+BEGIN_SRC java

	  class Array {
	      public static void main(String[] args) {
		  int month_days[];
		  month_days = new int[12];
		  month_days[0] = 31;
		  month_days[1] = 28;
		  month_days[2] = 31;
		  month_days[3] = 30;
		  month_days[4] = 31;
		  month_days[5] = 30;
		  month_days[6] = 31;
		  month_days[7] = 31;
		  month_days[8] = 30;
		  month_days[9] = 31;
		  month_days[10] = 30;
		  month_days[11] = 31;
		  System.out.println("April has " + month_days[3] + " days.");
	      }
	  }

	  #+END_SRC
********* AutoArray
	  #+BEGIN_SRC java

	  class AutoArray {
	      public static void main(String[] args) {
		  int month_days[] = { 31, 28, 31, 30, 31, 30 , 31, 31, 30, 31, 30 , 31 };

		  System.out.println("April has " + month_days[3] + " days.");
	      }
	  }

	  #+END_SRC
********* Average
	  #+BEGIN_SRC java

	  class Average {
	      public static void main(String[] args) {
		  double nums[] = {10.1, 11.2 , 12.3, 13.4, 14.5};
		  double result = 0;
		  int i;

		  for (i = 0; i < 5; i++)
		      result = result + nums[i];

		  System.out.println("Average is " + result / 5);
	      }
	  }

	  #+END_SRC
********* TwoDArray
	  #+BEGIN_SRC java

	  class TwoDArray {
	      public static void main(String[] args) {
		  int twoD[][] = new int[4][5];
		  int i, j, k = 0;

		  for (i = 0; i < 4; i++)
		      for (j = 0; j < 5; j++) {
			  twoD[i][j] = k;
			  k++;
		      }

		  for (i = 0; i < 4; i++) {
		      for (j = 0; j < 5; j++)
			  System.out.print(twoD[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
********* TwoDAgain
	  #+BEGIN_SRC java

	  class TwoDAgain {
	      public static void main(String[] args) {
		  int twoD [][] = new int[4][];
		  twoD[0] = new int[1];
		  twoD[1] = new int[2];
		  twoD[2] = new int[3];
		  twoD[3] = new int[4];


		  int i, j, k = 0;

		  for (i = 0; i < 4; i++)
		      for (j = 0; j < i + 1; j++){
			  twoD[i][j] = k;
			  k++;
		      }

		  for (i = 0; i < 4; i++){
		      for (j = 0; j < i + 1; j++)
			  System.out.print () (twoD[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
********* Matrix
	  #+BEGIN_SRC java

	  class Matrix {
	      public static void main(String[] args) {
		  double m[][] = {
		      { 0*0, 1*0, 2*0, 3*0 },
		      { 0*1, 1*1, 2*1, 3*1},
		      { 0*2, 1*2, 2*2, 3*2},
		      { 0*3, 1*3, 2*3, 3*3},
		  };
		  int i, j;

		  for (i = 0; i < 4; i++){
		      for (j = 0; j < 4; j++)
			  System.out.print(m[i][j] + " ");
		      System.out.println();
		  }
	      }
	  }

	  #+END_SRC
********* ThreeDMatrix
	  #+BEGIN_SRC java

	  class ThreeDMatrix {
	      public static void main(String[] args) {
		  int threeD[][][] = new int[3][4][5];
		  int i, j, k;

		  for (i = 0; i < 3; i++)
		      for (j = 0; j < 4; j++)
			  for (k = 0; k < 5; k++)
			      threeD[i][j][k] = i * j * k;

		  for (i = 0; i < 3; i++){
		      for (j = 0; j < 4; j++) {
			  for (k = 0; k < 5; k++)
			      System.out.print(threeD[i][j][k] + " ");
			  System.out.println();
		      }
		  }
		  System.out.println();
	      }
	  }

	  #+END_SRC
********* VarDemo
	  #+BEGIN_SRC java

	  class VarDemo {
	      public static void main(String[] args) {

		  var avg = 10.0;
		  System.out.println("Value of avg: " + avg);

		  int var = 1;
		  System.out.println("Value of var: " + var);

		  var k = -var;
		  System.out.println("Value of k: " + k);
	      }
	  }

	  #+END_SRC

******* Chapter 4 - Operators
******** Examples
********* BasicMath
	  #+BEGIN_SRC java

	  class BasicMath {
	      public static void main(String[] args) {
		  System.out.println("Integer arithmetic");
		  int a = 1 + 1;
		  int b = a * 3;
		  int c = b / 4;
		  int d = c - a;
		  int e = -d;
		  System.out.println("a = " + a);
		  System.out.println("b = " + b);
		  System.out.println("c = " + c);
		  System.out.println("d = " + d);
		  System.out.println("e = " + e);

		  System.out.println("Floating Point Arithmetic");
		  double da = 1 + 1;
		  double db = da * 3;
		  double dc = db / 4;
		  double dd = dc - a;
		  double de = -dd;

		  System.out.println("da = " + da);
		  System.out.println("db = " + db);
		  System.out.println("dc = " + dc);
		  System.out.println("dd = " + dd);
		  System.out.println("de = " + de);
	      }
	  }

	  #+END_SRC
********* Modulus
	  #+BEGIN_SRC java

	  class Modulus {
	      public static void main(String[] args) {
		  int x = 42;
		  double y = 42.25;

		  System.out.println("x mod 10 = " + x % 10);
		  System.out.println("y mod 10 = " + y % 10);
	      }
	  }

	  #+END_SRC

********* OpEquals
	  #+BEGIN_SRC java

	  class OpEquals {
	      public static void main(String[] args) {
		  int a = 1;
		  int b = 2;
		  int c = 3;

		  a += 5;
		  b *= 4;
		  c %= 6;

		  System.out.println("a = " + a);
		  System.out.println("b = " + b);
		  System.out.println("c = " + c);
	      }
	  }

	  #+END_SRC

********* BitLogic
	  #+BEGIN_SRC java

	  class BitLogic {
	      public static void main(String[] args) {
		  String binary[] = {
		      "0000", "0001", "0010", "0011", "0100", "0110", "0111",
		      "1000", "1001", "1010", "1100", "1101", "1110", "1111"
		  };

		  int a = 3;
		  int b = 5;
		  int c = a | b;
		  int d = a & b;
		  int e = a ^ b;
		  int f = (~a & b)|(a & ~b);
		  int g = ~a & 0x0f;

		  System.out.println("                a = " + binary[a]);
		  System.out.println("                b = " + binary[b]);
		  System.out.println("                a|b = " + binary[c]);
		  System.out.println("                a&b = " + binary[d]);
		  System.out.println("                a^b = " + binary[e]);
		  System.out.println("                ~a&b|a&-b = "      + binary[f]);
		  System.out.println("                ~a = " + binary[g]);
	      }
	  }

	  #+END_SRC
******* Chapter 5 - Control Statements
******** Examples
******* Chapter 6 - Classes
******** BoxDemo
	 #+BEGIN_SRC java
	 class Box {
	     double width;
	     double height;
	     double depth;
	 }

	 class BoxDemo {
	     public static void main(String[] args) {
		 Box mybox = new Box();
		 double vol;

		 mybox.width = 10;
		 mybox.height = 20;
		 mybox.depth = 15;

		 vol = mybox.width * mybox.height * mybox.depth;

		 System.out.println("Volume is " + vol);
	     }
	 }

	 #+END_SRC
******** BoxDemo2
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;
	 }

	 class BoxDemo2 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;


		 vol = mybox1.width * mybox1.height * mybox1.depth;
		 System.out.println("Volume is " + vol);

		 vol = mybox2.width * mybox2.height * mybox2.depth;
		 System.out.println("Volume is " + vol);
	     }
	 }


	 #+END_SRC
******** BoxDemo3
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     void volume() {
		 System.out.print("Volume is ");
		 System.out.println(width * height * depth);
	     }
	 }

	 class BoxDemo3 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;

		 mybox1.volume();
		 mybox2.volume();

	     }
	 }


	 #+END_SRC
******** BoxDemo4
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     double volume() {
		 return width * height * depth;
	     }
	 }

	 class BoxDemo4 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.width = 10;
		 mybox1.height = 20;
		 mybox1.depth = 15;

		 mybox2.width = 3;
		 mybox2.height = 6;
		 mybox2.depth = 9;

		 vol = mybox1.volume();
		 System.out.println("Volume is " + vol);

		 vol = mybox2.volume();
		 System.out.println("Volume is " + vol);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
******** BoxDemo5
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     double volume() {
		 return width * height * depth;
	     }

	     void setDim(double w, double h, double d){
		 width = w;
		 height = h;
		 depth = d;
	     }
	 }

	 class BoxDemo5 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box();
		 Box mybox2 = new Box();
		 double vol;

		 mybox1.setDim(10, 20, 15);
		 mybox2.setDim(3, 6, 9);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
******** BoxDemo7
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;

	     Box (double w, double h,double d) {
		 System.out.println("Constructing Box");
		 width = w;
		 height = h;
		 depth = d;
	     }
	     double volume() {
		 return width * height * depth;
	     }

	 }

	 class BoxDemo7 {
	     public static void main(String[] args) {
		 Box mybox1 = new Box(10, 20, 15);
		 Box mybox2 = new Box(3, 6, 9);

		 System.out.println("Volume is " + mybox1.volume());
		 System.out.println("Volume is " + mybox2.volume());
	     }
	 }


	 #+END_SRC
******** TestStack
	 #+BEGIN_SRC java

	 class Stack {
	     int stck[] = new int[10];
	     int tos;

	     // Initialize top-of-stack
	     Stack () {
		 tos = -1;
	     }

	     // Push an item onto the stack
	     void push (int item) {
		 if(tos == 9)
		     System.out.println("Stack if full.");
		 else
		     stck[++tos] = item;
	     }

	     // Pop an item from the stack
	     int pop () {
		 if(tos < 0){
		     System.out.println("Stack underflow");
		     return 0;
		 }
		 else
		     return stck[tos--];
	     }
	 }


	 class TestStack {
	     public static void main(String[] args) {
		 Stack mystack1 = new Stack();
		 Stack mystack2 = new Stack();

		 // push some numbers onto the stack
		 for (int i = 0; i < 10; i++) mystack1.push(i);
		 for (int i = 10; i < 20; i++) mystack2.push(i);


		 // pop those numbers off the stack
		 System.out.println("Stack in mystack1:");
		 for (int i = 0; i < 10; i++)
		     System.out.println(mystack1.pop());

		 System.out.println("Stack in mystack2:");
		 for (int i = 0; i < 10; i++)
		     System.out.println(mystack2.pop());
	     }
	 }

	 #+END_SRC
******** OverloadCons
	 #+BEGIN_SRC java

	 class Box {
	     double width;
	     double height;
	     double depth;


	     // constructor used when all dimensions specified
	     Box (double w, double h, double d) {
		 width = w;
		 height = h;
		 depth = d;
	     }


	     // construct used when no dimensions specified
	     Box () {
		 width = -1;
		 height = -1;
		 depth = -1;
	     }

	     // construct used when when cube is created
	     Box (double len) {
		 width = height = depth = len;
	     }

	     // compute and return volume
	     double volume () {
		 return width * height * depth;
	     }
	 }
	 class OverloadCons {
	     public static void main(String[] args) {
		 // create boxes using the various constructors
		 Box mybox1 = new Box(10,20,15);
		 Box mybox2 = new Box();
		 Box mycube = new Box(7);

		 double vol;

		 // get volume of first box
		 vol = mybox1.volume();
		 System.out.println("Volume of mybox1 is " + vol);

		 // get volume of second box
		 vol = mybox2.volume();
		 System.out.println("Volume of mybox2 is " + vol);

		 // get volume of cube
		 vol = mycube.volume();
		 System.out.println("Volume of mycube is " + vol);
	     }
	 }


	 #+END_SRC
******** PassArray
	 #+BEGIN_SRC java

	 // Use an array to pass a variable number of
	 // arguments to a method. This is the old-style
	 // approach to variable-length arguments

	 class PassArray {
	     static void vaTest (int v[]) {
		 System.out.print("Number of args: " + v.length + " Contents: ");

		 for(int x : v)
		     System.out.print(x + " ");
		 System.out.println();
	     }

	     public static void main(String[] args) {


		 // Notice how an array must be created so
		 // hold the arguments.
		 int n1[] = { 10 };
		 int n2[] = { 1, 2, 3};
		 int n3[] = { };

		 vaTest(n1); // 1 arg
		 vaTest(n2); // 3 args
		 vaTest(n3); // no args
	     }
	 }


	 #+END_SRC
******* Chapter 7 - A Closer Look at Methods and Classes
****** JVF
******* Chapter 2
******** InputTest
	 #+BEGIN_SRC java
	 import java.util.*;

	 /**
	    4   * This program demonstrates console input.
	    5   * @version 1.10 2004-02-10
	    6   * @author Cay Horstmann
	    7   */
	 public class InputTest
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 // get first input
		 System.out.print("What is your name? ");
		 String name = in.nextLine();

		 // get second input
		 System.out.print("How old are you? ");
		 int age = in.nextInt();

		 // display output on console
		 System.out.println("Hello, " + name + ". Next year, you'll be " + (age + 1));
	     }
	 }
	 #+END_SRC
******** Retirement
	 #+BEGIN_SRC java

	 import java.util.Scanner;

	 class retirement {
	     public static void main(String args[]) {

		 // read inputs
		 Scanner in = new Scanner(System.in);

		 System.out.print("How much money do you need to retire? ");
		 double goal = in.nextDouble();

		 System.out.print("How much money will you contribute every year? ");
		 double payment = in.nextDouble();

		 System.out.print("Interest rate in %: ");
		 double interestRate = in.nextDouble();

		 double balance = 0;
		 int years = 0;

		 // update account balance while goal isn't reached
		 while (balance > goal)
		     {
			 // this year's payment and interest
			 balance += payment;
			 double interest = balance * interestRate / 100;
			 balance += interest;
			 years++;
		     }

		 Smaystem.out.println("You can retire in " + years + " years.");
	     }
	 }

	 #+END_SRC
******** Retirement2
	 #+BEGIN_SRC java

	 import java.util.Scanner;

	 /**
	  ,* This program demonstrates a do/while loop.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 class retirement2 {
	     public static void main(String args[]) {

		 Scanner in = new Scanner(System.in);

		 System.out.print("How much money will you contribute every year? ");
		 double payment = in.nextDouble();

		 System.out.print("Interest rate in %: ");
		 double interestRate = in.nextDouble();

		 double balance = 0;
		 int year = 0;

		 String input;

		 // update account balance while user isn't ready to retire
		 do
		     {
			 // add this year's payment and interest
			 balance += payment;
			 double interest = balance * interestRate / 100;
			 balance += interest;

			 year++;

			 // print current balance
			 System.out.printf("After year %d, your balance is %,.2f%n", year, balance);

			 // ask if ready to retire and get input
			 System.out.print("Ready to retire? (Y/N) ");
			 input = in.next();
		     }  while (input.equals("N"));
	     }
	 }

	 #+END_SRC
******** lotteryOdds
	 #+BEGIN_SRC java
	 import java.util.*;

	 /**
	  ,* This program demonstrates a for loop.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 public class LotteryOdds
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 /*
		  ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
		  ,*/
		 int lotteryOdds = 1;
		 for (int i = 1; i <= k; i++)
		     lotteryOdds = lotteryOdds * (n - i + 1) / i;

		 System.out.println("Your odds are 1 in " + lotteryOdds + ". Good luck!");
	     }
	 }

	 #+END_SRC
******** BigIntegerTest
	 #+BEGIN_SRC java
	 import java.math.*;
	 import java.util.*;

	 /**
	  ,* This program uses big numbers to compute the odds of winning the grand prize in a lottery.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/

	 public class BigIntegerTest
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 /*
		  ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
		  ,*/

		 BigInteger lotteryOdds = BigInteger.valueOf(1);

		 for (int i = 1; i <= k; i++)
		     lotteryOdds = lotteryOdds.multiply(BigInteger.valueOf(n - i + 1)).divide(
											      BigInteger.valueOf(i));

		 System.out.println("Your odds are 1 in " + lotteryOdds + ". Good luck!");
	     }
	 }
	 #+END_SRC
******** LotteryDrawing
	 #+BEGIN_SRC java

	 import java.util.*;

	 /**
	  ,* This program demonstrates array manipulation.
	  ,* @version 1.20 2004-02-10
	  ,* @author Cay Horstmann
	  ,*/
	 public class LotteryDrawing
	 {
	     public static void main(String[] args)
	     {
		 Scanner in = new Scanner(System.in);

		 System.out.print("How many numbers do you need to draw? ");
		 int k = in.nextInt();

		 System.out.print("What is the highest number you can draw? ");
		 int n = in.nextInt();

		 // fill an array with numbers 1 2 3 . . . n
		 int[] numbers = new int[n];
		 for (int i = 0; i < numbers.length; i++)
		     numbers[i] = i + 1;

		 // draw k numbers and put them into a second array
		 int[] result = new int[k];
		 for (int i = 0; i < result.length; i++)
		     {
			 // make a random index between 0 and n - 1
			 int r = (int) (Math.random() * n);

			 // pick the element at the random location
			 result[i] = numbers[r];

			 // move the last element into the random location
			 numbers[r] = numbers[n - 1];
			 n--;
		     }

		 // print the sorted array
		 Arrays.sort(result);
		 System.out.println("Bet the following combination. It'll make you rich!");
		 for (int r : result)
		     System.out.println(r);
	     }
	 }

	 #+END_SRC
******** CompoundInterest
	 #+BEGIN_SRC java

	 /**
	  ,* This program shows how to store tabular data in a 2D array.
	  ,* @version 1.40 2004-02-10
	  ,*  Cay Horstmann
	  ,*/

	 public class CompoundInterest
	 {
	     public static void main(String[] args)
	     {
		 final double STARTRATE = 10;
		 final int NRATES = 6;
		 final int NYEARS = 10;

		 // set interest rates to 10 . . . 15%
		 double[] interestRate = new double[NRATES];

		 for (int j = 0; j < interestRate.length; j++)
		     interestRate[j] = (STARTRATE + j) / 100.0;

		 double[][] balances = new double[NYEARS][NRATES];

		 // set initial balances to 10000
		 for (int j = 0; j < balances[0].length; j++)
		     balances[0][j] = 10000;

		 // compute interest for future years
		 for (int i = 1; i < balances.length; i++)
		     {
			 for (int j = 0; j < balances[i].length; j++)
			     {
				 // get last year's balances from previous row
				 double oldBalance = balances[i - 1][j];

				 // compute interest
				 double interest = oldBalance * interestRate[j];

				 // compute this year's balances
				 balances[i][j] = oldBalance + interest;
			     }
		     }

		 // print one row of interest rates
		 for (int j = 0; j < interestRate.length; j++)
		     System.out.printf("%9.0f%%", 100 * interestRate[j]);

		 System.out.println();

		 // print balance table
		 for (double[] row : balances)
		     {
			 // print table row
			 for (double b : row)
			     System.out.printf("%10.2f", b);

			 System.out.println();
		     }
	     }
	 }
	 #+END_SRC
******** LotteryArray
	 #+BEGIN_SRC java


	 /**
	  ,* This program demonstrates a triangular array.
	  ,* @version 1.20 2004-02-10
	  ,* Cay Horstmann
	  ,*/

	 public class LotteryArray
	 {
	     public static void main(String[] args)
	     {
		 final int NMAX = 10;

		 // allocate triangular array
		 int[][] odds = new int[NMAX + 1][];
		 for (int n = 0; n <= NMAX; n++)
		     odds[n] = new int[n + 1];

		 // fill triangular array
		 for (int n = 0; n < odds.length; n++)
		     for (int k = 0; k < odds[n].length; k++)
			 {
			     /*
			      ,* compute binomial coefficient n*(n-1)*(n-2)*...*(n-k+1)/(1*2*3*...*k)
			      ,*/
			     int lotteryOdds = 1;
			     for (int i = 1; i <= k; i++)
				 lotteryOdds = lotteryOdds * (n - i + 1) / i;

			     odds[n][k] = lotteryOdds;
			 }

		 // print triangular array
		 for (int[] row : odds)
		     {
			 for (int odd : row)
			     System.out.printf("%4d", odd);
			 System.out.println();
		     }
	     }
	 }
	 #+END_SRC

******** ForDemo
	 #+BEGIN_SRC java

	 class ForDemo {
	     public static void main(String args[]) {
		 int count;

		 for (count = 0; count < 5; count++)
		     System.out.println("This is count: " + count);

		 System.out.println("Done");
	     }
	 }

	 #+END_SRC
******** BlockDemo
	 #+BEGIN_SRC java

	 class BlockDemo {
	     public static void main(String args[]) {
		 double i, j, d;

		 i = 5;
		 j = 10;

		 if (i != 0) {
		     System.out.println("i does not equal zero");
		     d = j /i;
		     System.out.println("j /d is: " + d);
		 }
	     }
	 }

	 #+END_SRC
******** GalToLitTable
	 #+BEGIN_SRC java

	 class GalToLitTable {
	     public static void main(String args[]) {
		 double gallons, liters;
		 int counter;

		 counter = 0;

		 for (gallons = 1; gallons <= 100; gallons++) {
		     liters = gallons * 3.7854;
		     System.out.println(gallons + " gallon is " +
					liters + " litters.");
		     counter++;
		     //
		     if (counter == 10) {
			 System.out.println();
			 counter = 0; //
		     }
		 }
	     }
	 }

	 #+END_SRC

*** Java Tools
***** Java Tools - Web Frameworks
      [[https://spring.io/][Spring]]
      [[https://vaadin.com/][Vaadin]]
***** Java Tools - ORM Frameworks
       [[http://hibernate.org/][Hibernate]]
       JDBC
***** Java Tools - REST

***** Java Tools - Java decompiler
      https://www.technotification.com/2018/10/5-best-java-decompilers.html/
***** Java Tools - Misc
      [[https://tomcat.apache.org/][Apache Tomcat]]
      [[http://wildfly.org/][Jboss/Wildfly]]
      SpotBugs
      [[https://docs.oracle.com/en/java/javase/11/tools/jlink.html][jlink]]
      [[https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719][javapackager]]
      https://sdkman.io/
***** Java Tools - Version management
      [[https://github.com/gcuisinier/jenv][jenv]]
      [[https://github.com/shyiko/jabba][jabba]]
***** Java Tools - Testing
      [[https://docs.seleniumhq.org/][Selenium]]
      [[junit.org][JUnit]]
      [[mockito.org][mockito]]
*** Java Commands/Features
    |                               |
    |-------------------------------|
    | [[https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr006.html][The jcmd Utility ]]             |
    | [[https://openjdk.java.net/jeps/341][JEP 341: Default CDS Archives]] |

*** Java Skills
      |------------------------------------------------|
      | OOP (inheretince, polymorphism, encapsulation) |
      | Generics                                       |
      | Wrapper classes                                |
      | data structures, algorithms                    |
      | [[https://spring.io/][Spring]]                                         |
      | [[https://maven.apache.org/][Maven]]                                          |
      | [[https://jenkins.io/][Jenkis]]                                         |
      | [[http://www.jboss.org/][Jboss]]                                          |
      | [[https://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html][jpa]]                                            |
      | [[junit.org][JUnit]]                                          |
      | [[https://docs.seleniumhq.org/][Selenium]]
      | MVC                                            |
      | [[gradle.org][Gradle]]                                         |
      | [[http://hibernate.org/][Hibernate]]                                      |
      | SQL & relation database                        |
      | [[https://www.docker.com/][docker]]                                         |
      | [[json.org][Json]]                                           |
      | Web (JS, AngularJS...)                         |
      | [[https://vertx.io/][vertx]]                                          |
      | MVC                                            |
      | REST service (basic)                           |
      | [[mockito.org][mockito]]                                        |
      | Database design (Primary Key and Foreign Key). |
      | Design Patterns                                |
      | [[https://www.sonarsource.com/products/codeanalyzers/sonarjava.html][sonar]]                                          |
      | [[https://mantisbt.org/][mantisbt]]                                       |

*** Java Bad code Tips
    https://www.reddit.com/r/java/comments/apnj6j/what_are_various_red_flags_for_you_in_java_code/

*** Java Documentation
     https://docs.oracle.com/javase/specs/

     www.netlib.org/fdlibm

*** Java Blogs
      https://icedtea.classpath.org/bugzilla/

      https://spring.io/guides

      https://mjg123.github.io/

      https://vimeo.com/javazone
*** Java read later
    https://advancedweb.hu/2019/02/19/post_java_8/

    https://filippobuletto.github.io/solid-java/#srp-code-smells

    https://stackabuse.com/design-patterns-in-java/

    https://dev.to/aussieguy/a-quick-look-at-java-11s-httpclient-1f79

    https://medium.com/@adam_carroll/java-packager-with-jdk11-31b3d620f4a8

    https://jdk.java.net/jpackage/

    http://launch4j.sourceforge.net/

    https://steveperkins.com/using-java-9-modularization-to-ship-zero-dependency-native-apps/

    https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4

    https://vladmihalcea.com/14-high-performance-java-persistence-tips/

    https://jitpack.io/docs/

    https://enterprisersproject.com/article/2018/11/getting-started-kubernetes-5-misunderstandings-explained

    https://sdkman.io/install

    https://moocfi.github.io/courses/2013/programming-part-1/

    https://stackabuse.com/the-best-java-books-for-all-skill-levels/

    https://www.edx.org/course/fundamentals-java-ee-development-red-hat-jb083x

    https://okinskas.github.io/Java-Version-Management-on-Linux/

    https://www.javaworld.com/article/3314640/learn-java/java-101-functional-programming-for-java-developers-part-1.html#tk.rss_all

    https://blog.adversalabs.com/2018/10/29/our-experience-writing-a-vscode-extension/

    https://mjg123.github.io/2018/11/05/alpine-jdk11-images.html

    https://mjg123.github.io/2017/11/07/Java-modules-and-jlink.html

    https://mjg123.github.io/2018/05/26/Multi-Stage-Docker-Build-with-jlink.html

    https://mjg123.github.io/2017/10/02/JVM-startup.html

    https://mjg123.github.io/2017/10/04/AppCDS-and-Clojure.html

    https://mjg123.github.io/2017/10/16/Clojure-1.9-startup.html

    https://developers.redhat.com/blog/2018/11/05/migrating-from-oracle-jdk-to-openjdk-on-red-hat-enterprise-linux-what-you-need-to-know/

      The Z Garbage Collector by Erik Österlund: https://www.youtube.com/watch?v=7cWiwu7kYkE
********** Block
	   #+BEGIN_SRC java

	   // Objects can be passed to methods.
	   class Block {
	       int a, b, c;
	       int volume;

	       Block(int i, int j, int k) {
		   a = i;
		   b = j;
		   c = k;
		   volume = a * b *c;
	       }

	       // Return true if ob defines same block.
	       boolean sameBlock(Block ob) {
		   if((ob.a == a) & (ob.b == b) & (ob.c == c)) return true;
		   else return false;
	       }

	       // Return true if ob has same volume.
	       boolean sameVolume(Block ob) {
		   if(ob.volume == volume) return true;
		   else return false;
	       }
	   }

	   class PassOb {
	       public static void main(String args[]) {
		   Block ob1 = new Block(10, 2, 5);
		   Block ob2 = new Block(10, 2, 5);
		   Block ob3 = new Block(4, 5, 5);

		   System.out.println("ob1 same dimensions as ob2: " +
				      ob1.sameBlock(ob2));

		   System.out.println("ob1 same dimensions as ob3: " +
				      ob1.sameBlock(ob3));

		   System.out.println("ob1 same volume as ob3: " +
				      ob1.sameVolume(ob3));
	       }
	   }


	   #+END_SRC
********** VarArgs
	   #+BEGIN_SRC java

	   class VarArgs {

	       static void vaTest(int ... v) {
		   System.out.println("Numbers of args: " + v.length);
		   System.out.println("Contents: ");

		   for (int i = 0; i < v.length; i++)
		       System.out.println("  arg " + i + ": " +  v[i]);
		   System.out.println();
	       }

	       public static void main(String[] args) {

		   vaTest(10);
		   vaTest(1, 2, 3);
		   vaTest();
	       }
	   }


	   #+END_SRC
********** VarArgs2
	   #+BEGIN_SRC java

	   class VarArgs2 {

	       static void vaTest(String msg, int ... v) {
		   System.out.println(msg + v.length);
		   System.out.println("Contents: ");

		   for (int i = 0; i < v.length; i++)
		       System.out.println("  arg " + i + ": " +  v[i]);

		   System.out.println();
	       }

	       public static void main(String[] args) {

		   vaTest("One vararg: ", 10);
		   vaTest("Three vararg: ", 1, 2, 3);
		   vaTest("No vararg: ");
	       }
	   }

	   #+END_SRC
** CPP
*** CPP Best Practices
    http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
*** CPP Errors
**** Source of errors
     • Poor specification: If we are not specific about what a program should do, we are unlikely to adequately examine the
     “dark corners” and make sure that all cases are handled (i.e., that every input gives a correct answer or an adequate
     error message).

     • Incomplete programs: During development, there are obviously cases that we haven’t yet taken care of. That’s
     unavoidable. What we must aim for is to know when we have handled all cases.

     • Unexpected arguments: Functions take arguments. If a function is given an argument we don’t handle, we have a
     problem. An example is calling the standard library square root function with –1.2: sqrt(–1.2). Since sqrt() of a double
     returns a double, there is no possible correct return value. §5.5.3 discusses this kind of problem.

     • Unexpected input: Programs typically read data (from a keyboard, from files, from GUIs, from network connections,
     etc.). A program makes many assumptions about such input, for example, that the user will input a number. What if the
     user inputs “aw, shut up!” rather than the expected integer? §5.6.3 and §10.6 discuss this kind of problem.

     • Unexpected state: Most programs keep a lot of data (“state”) around for use by different parts of the system. Examples
     are address lists, phone directories, and vectors of temperature readings. What if such data is incomplete or wrong? The
     various parts of the program must still manage. §26.3.5 discusses this kind of problem.

     • Logical errors: That is, code that simply doesn’t do what it was supposed to do; we’ll just have to find and fix such
     problems. §6.6 and §6.9 give examples of finding such problems.

*** CPP Embedded
*** CPP - Jobs Skills
    | SKILLS                                                                    |
    |---------------------------------------------------------------------------|
    | data structures                                                           |
    | algorithms                                                                |
    | math: calculus 3, linear algebra, differential equations                  |
    | automata theory                                                           |
    | software engineering                                                      |
    | GUI programming                                                           |
    | assembly language                                                         |
    | computer hardware classes (logic, architecture)                           |
    | build process of a C++ program (preprocessor, compiler, linker)           |
    | OOP.  architecting/designing anticipating future changes/problems         |
    | compilers (gcc, clang), CMake + Make/Ninja and GDB or a similar debugger. |
    | Scripting - Bash/Python                                                   |
    | Git                                                                       |
    | Automated testing.  unit tests                                            |
    | networking                                                                |

*** CPP Read Later
    https://caseymuratori.com/blog_0015
    http://www.elbeno.com/blog/?p=1598
    https://www.reddit.com/r/cpp/comments/c7nka1/employment_using_c/
*** CPP Compilers
**** Clang
