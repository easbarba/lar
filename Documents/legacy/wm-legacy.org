#+TITLE: Wm Legacy

* Summary
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#sysinfo][sysinfo]]
- [[#dwm][dwm]]
  - [[#dwm-bar][dwm-bar]]
- [[#qtile][Qtile]]
- [[#xmobar][Xmobar]]
- [[#xmonad][Xmonad]]
- [[#stumpwm][StumpWM]]
- [[#xmobar][Xmobar]]
- [[#stalonetray][StaloneTray]]
:END:

* sysinfo
   #+begin_src shell-script
   #!/usr/bin/env bash

   volume ()
   {
       local onoff
       onoff=$(amixer get Master | tail -1)

       local state
       if pgrep -x "pulseaudio" > /dev/null; then
	   state=$(pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( "$SINK" + 1 )) \
		       | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,')%
       else
	   state="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
       fi

       if [[ $onoff == *\[off\]* ]]; then
	   echo -e "Vol: MUTE"
       elif [[ $onoff == *\[on\]* ]]; then
	   echo -e "Vol: ${state}"
       else
	   echo -e "???"
       fi
   }

   cpu-frequency ()
   {
       read -r cpu a b c previdle rest < /proc/stat

       local prevtotal
       prevtotal=$((a+b+c+previdle))

       sleep 0.5

       read -r cpu a b c idle rest < /proc/stat
       total=$((a+b+c+idle))

       local cpu
       cpu="$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))"

       echo -ne "CPU: ${cpu}%"
   }

   cpu-temperature ()
   {
       local now
       now="$(sensors | grep Core | awk '{print substr($3, 2, length($1)-2)}' | tr '\n' ' ' | sed 's/ /°c /g' | sed 's/ $//')"

       echo -ne "Temp: ${now}"
   }

   memory ()
   {
       local now
       now="$(free -m | awk 'NR==2{printf "%dMB\n", $3,$2,$3*100/$2 }')"

       echo -ne "Mem: ${now}"
   }

   _date ()
   {
       local now
       now="$(date "+%H:%M - %a, %b %d")"

       echo -ne "${now}"
   }

   battery ()
   {
       local state
       state=$(acpi -b | sed 's/.*[charging|unknown|full], \([0-9]*\)%.*/\1/gi')

       local status
       status=$(acpi -b | sed 's/.*: \([a-zA-Z]*\),.*/\1/gi')

       echo -ne "Bat: ${state}%"

       # (${status})
       # if ([ "$BATT" -le 5 ] && [ "$STATUS" == 'Discharging' ]); then
       #     # Beep
       #     echo -ne "\007" >/dev/tty10 && sleep 0.2
       #     echo -ne "\007" >/dev/tty10 && sleep 0.2
       #     echo -ne "\007" >/dev/tty10 && sleep 0.2
       #     # Blink
       #     echo -ne 'on' > /proc/acpi/ibm/light && sleep 1
       #     echo -ne 'off' > /proc/acpi/ibm/light
       # fi
   }

   connection ()
   {
       ping -c 3 cnn.com &> /dev/null &&
	   echo -ne "CON: ON" || echo -ne "CON: OFF"
   }

   gputil ()
   {
       gputil="$( nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader )"
       echo -ne "GPUF: ${gputil}"
       # utilization.memory
       # utilization.gpu
   }

   gputemp ()
   {
       gputemp="$( nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader )"
       echo -ne "GPUT: ${gputemp}°c"
       n# utilization.memory
       # utilization.gpu
   }

   update ()
   {
       pac=$(checkupdates | wc -l)
       aur=$(cower -u | wc -l)

       check=$((pac + aur))
       if [[ "$check" != "0" ]]
       then
	   echo -e " $pac  $aur / "
       fi
   }

   con ()
   {
       if pgrep -x "nm-applet" > /dev/null; then # if is running
	   echo ""
       else
	   ping -c 3 gnu.org &> /dev/null &&
	       echo -ne "WIFI: ON" || echo -ne "CON: OFF"
       fi
   }

   host ()
   {
       echo -e "$HOSTNAME"
   }

   # apt list --upgradable

   sep=" :: "
   echo " $(host)${sep}$(volume)${sep}$(memory)${sep}$(cpu-frequency)${sep}$(cpu-temperature)${sep}$(battery)${sep}$(_date)"

   exit 0

   #+end_src
* dwm
    #+begin_src c
    /* See LICENSE file for copyright and license details. */

    /* appearance */
    static const unsigned int borderpx  = 0;        /* border pixel of windows */
    static const unsigned int snap      = 32;       /* snap pixel */
    static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
    static const unsigned int systrayspacing = 2;   /* systray spacing */
    static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
    static const int showsystray        = 1;     /* 0 means no systray */
    static const int showbar            = 1;        /* 0 means no bar */
    static const int topbar             = 0;        /* 0 means bottom bar */
    static const char *fonts[]          = { "JetBrains Mono:size=8" };
    static const char dmenufont[]       = "JetBrains Mono:size=8";
    static const char col_gray1[]       = "#172030";
    static const char col_gray2[]       = "#eabe9a";
    static const char col_gray3[]       = "#c6797e";
    static const char col_gray4[]       = "#E8E9EB";
    static const char col_cyan[]        = "#151D2B";
    static const char *colors[][3]      = {
      /*               fg         bg         border   */
      [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
      [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
    };


    /* tagging */
    static const char *tags[] = { "mx", "eija", "sistema", "midia", "www" };

    static const Rule rules[] = {
      /* xprop(1):
       ,*	WM_CLASS(STRING) = instance, class
       ,*	WM_NAME(STRING) = title
       ,*/
      /* class      instance    title       tags mask     isfloating   monitor */
      { "Emacs",                NULL,       NULL,       1 <<  0,      0,           -1 },
      { "Code",                 NULL,       NULL,       1 <<  1,      0,           -1 },
      { "st",                   NULL,       NULL,       1 <<  2,      0,           -1 },
      { "mpv",                  NULL,       NULL,       1 <<  3,      0,           -1 },
      { "vlc",                  NULL,       NULL,       1 <<  3,      0,           -1 },
      { "QEMU",                 NULL,       NULL,       1 <<  3,      0,           -1 },
      { "OpenGl",               NULL,       NULL,       1 <<  3,      0,           -1 },
      { "Wine",                 NULL,       NULL,       1 <<  3,      0,           -1 },
      { "Steam",                NULL,       NULL,       1 <<  3,      0,           -1 },
      { "Firefox",              NULL,       NULL,       1 <<  4,      0,           -1 },
      { "Chromium",             NULL,       NULL,       1 <<  4,      0,           -1 },
    };

    /* layout(s) */
    static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
    static const int nmaster     = 1;    /* number of clients in master area */
    static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

    static const Layout layouts[] = {
      /* symbol     arrange function */
      { "[]=",      tile },    /* first entry is default */
      { "><>",      NULL },    /* no layout function means floating behavior */
      { "[M]",      monocle },
    };

    /* key definitions */
    #define XF86MonBrightnessDown  0x1008ff03
    #define XF86MonBrightnessUp    0x1008ff02
    #define XF86AudioMute	       0x1008ff12
    #define XF86AudioLowerVolume   0x1008ff11
    #define XF86AudioRaiseVolume   0x1008ff13
    #define XF86AudioMicMute       0x1008FFB2
    #define MODKEY Mod4Mask
    #define AltMask Mod1Mask
    #define TAGKEYS(KEY,TAG)                                                \
      { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
      { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
      { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
      { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

    /* helper for spawning shell commands in the pre dwm-5.0 fashion */
    #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

    /* commands */
    static char dmenumon              [2] = "0"; /* component of dmenucmd, manipulated in spawn() */
    static const char *dmenucmd       [] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
    static const char *termcmd        [] = { "st", NULL };
    static const char *lockercmd      [] = { "slock", NULL };
    static const char *editorcmd      [] = { "emacs", NULL };
    static const char *volupcmd       [] = { "volume-cima", NULL };
    static const char *voldowncmd     [] = { "volume-baixo", NULL };
    static const char *volmutecmd     [] = { "volume-alternar", NULL };
    static const char *pausecmd       [] = { "mpc", "toggle", NULL };
    static const char *videocmd       [] = { "cero", "media", "getmedia", NULL };
    static const char *audiocmd       [] = { "cero", "media", "getmedia", "vorbis",  NULL };
    static const char *playcmd        [] = { "tocar", NULL };
    static const char *shotcmd        [] = { "tirador", NULL };

    static Key keys[] = {
      /* modifier             key                        function        argument */
      { MODKEY|AltMask,       XK_p,                      spawn,          {.v = dmenucmd } },
      { MODKEY,               XK_Return,                 spawn,          {.v = termcmd } },
      { MODKEY|AltMask,       XK_b,                      togglebar,      {0} },
      { MODKEY,               XK_s,                      focusstack,     {.i = +1 } },
      { MODKEY,               XK_w,                      focusstack,     {.i = -1 } },
      { MODKEY|AltMask,       XK_i,                      incnmaster,     {.i = +1 } },
      { MODKEY|AltMask,       XK_d,                      incnmaster,     {.i = -1 } },
      { MODKEY|AltMask,       XK_h,                      setmfact,       {.f = -0.05} },
      { MODKEY|AltMask,       XK_l,                      setmfact,       {.f = +0.05} },
      { MODKEY|AltMask,       XK_Return,                 zoom,           {0} },
      { MODKEY,               XK_Tab,                    view,           {0} },
      { MODKEY|AltMask,       XK_c,                      killclient,     {0} },
      { MODKEY|AltMask,       XK_t,                      setlayout,      {.v = &layouts[0]} },
      { MODKEY|AltMask,       XK_f,                      setlayout,      {.v = &layouts[1]} },
      { MODKEY|AltMask,       XK_m,                      setlayout,      {.v = &layouts[2]} },
      { MODKEY|AltMask,       XK_space,                  setlayout,      {0} },
      { MODKEY|ShiftMask,     XK_space,                  togglefloating, {0} },
      { MODKEY|AltMask,       XK_0,                      view,           {.ui = ~0 } },
      { MODKEY|ShiftMask,     XK_0,                      tag,            {.ui = ~0 } },
      { MODKEY|AltMask,       XK_comma,                  focusmon,       {.i = -1 } },
      { MODKEY|AltMask,       XK_period,                 focusmon,       {.i = +1 } },
      { MODKEY|ShiftMask,     XK_comma,                  tagmon,         {.i = -1 } },
      { MODKEY|ShiftMask,     XK_period,                 tagmon,         {.i = +1 } },
      { MODKEY|AltMask,       XK_q,                      quit,          {0} },
      TAGKEYS(                XK_1,                                      0)
      TAGKEYS(                XK_2,                                      1)
      TAGKEYS(                XK_3,                                      2)
      TAGKEYS(                XK_4,                                      3)
      TAGKEYS(                XK_5,                                      4)
      TAGKEYS(                XK_6,                                      5)
      { 0,                    XF86AudioMute,             spawn,         {.v = volmutecmd} }, // CUSTOM KEYS
      { 0,                    XF86AudioRaiseVolume,      spawn,         {.v = volupcmd}   },
      { 0,                    XF86AudioLowerVolume,      spawn,         {.v = voldowncmd} },
      { MODKEY|ShiftMask,     XK_e,                      spawn,         {.v = volmutecmd} },
      { MODKEY|ShiftMask,     XK_w,                      spawn,         {.v = volupcmd}   },
      { MODKEY|ShiftMask,     XK_s,                      spawn,         {.v = voldowncmd} },
      { 0,                    XK_Print,                  spawn,         {.v = shotcmd}    },
      { MODKEY,               XK_l,                      spawn,         {.v = lockercmd}  },
      { MODKEY,               XK_e,                      spawn,         {.v = editorcmd}  },
      { MODKEY,               XK_x,                      spawn,         {.v = dmenucmd}  },
      { MODKEY|ShiftMask,     XK_p,                      spawn,         {.v = playcmd}    },
      { MODKEY|ShiftMask,     XK_a,                      spawn,         {.v = audiocmd}   },
      { MODKEY|ShiftMask,     XK_v,                      spawn,         {.v = videocmd}   },
      { MODKEY,               XK_space,                  spawn,         {.v = pausecmd}   },
    };

    /* button definitions */ /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
    static Button buttons[] = {
      /* click                event mask      button          function        argument */
      { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
      { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
      { ClkWinTitle,          0,              Button2,        zoom,           {0} },
      { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
      { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
      { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
      { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
      { ClkTagBar,            0,              Button1,        view,           {0} },
      { ClkTagBar,            0,              Button3,        toggleview,     {0} },
      { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
      { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
    };
    #+end_src
** dwm-bar
***
    #+begin_src shell-script




    #+end_src

* Qtile
   #+begin_src python
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "br"], foreground=COLORS.pink,
		    ),
		    widget.Wallpaper(random_selection=True, label=False),

    widget.CheckUpdates(
			colour_no_updates=COLORS.black,
			colour_have_updates=COLORS.red,
			custom_command="checkupdates",
		    ),
		    widget.Sep(padding=10),
		    widget.CapsNumLockIndicator(foreground=COLORS.white),
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "pt"], foreground=COLORS.white
		    ),
		    widget.Sep(padding=10),
		    widget.Sep(padding=10),
		    widget.Battery(
			format="{percent:2.0%} {hour:d}:{min:02d}",
			update_delay=5,
			foreground=COLORS.white,
			low_foreground=COLORS.red,
		    ),


   keys_external = []
   keys = keys + keys_external

    Bucks
   COLORS = {
       "black": "000000",
       "white": "eee1c6",
       "red": "e81e17",
       "blue": "0077c0",
       "yellow": "9A7500",
       "orange": "e3a32d",
       "gray": "7a6e53",
       "green": "00471b",
   }

    Nord Light
   COLORS = {
       "black": "2E3440",
       "white": "E5E9F0",
       "red": "ff6655",
       "blue": "60728C",
       "yellow": "9A7500",
       "orange": "AC4426",
       "gray": "dfdfdf",
       "green": "4F894C",
   }

   screens = [
       Screen(
	   top=bar.Bar(
	       [
		   widget.GroupBox(
		       highlight_method="block",
		       rounded=False,
		       this_current_screen_border=COLORS["red"],
		       inactive=COLORS["white"],
		       active=COLORS["white"],
		       urgent_text=COLORS["green"],
		       background=COLORS["blue"],
		       foreground=COLORS["gray"],
		       hide_unused=True,
		   ),
		   widget.WindowName(
		       fontsize=12,
		       foreground=COLORS["black"],
		       padding=10,
		       show_state=False,
		   ),
		   widget.Prompt(foreground=COLORS["black"], ignore_dups_history=True),
		   widget.Systray(padding=10, foreground=COLORS["black"]),
		   widget.Sep(padding=10),
		   widget.Volume(
		       update_interval=5,
		       foreground=COLORS["black"],
			emoji=True,
		       padding=10,
		   ),
		   widget.Sep(padding=10),
		   widget.ThermalSensor(foreground=COLORS["black"]),
		   widget.Sep(padding=10),
		    widget.CheckUpdates(
			colour_no_updates=COLORS["black"],
			colour_have_updates=COLORS["red"],
			custom_command="checkupdates",
		    ),
		    widget.Sep(padding=10),
		    widget.CapsNumLockIndicator(foreground=COLORS["black"]),
		    widget.Sep(padding=10),
		    widget.KeyboardLayout(
			configured_keyboards=["us", "pt"], foreground=COLORS["black"]
		    ),
		    widget.Sep(padding=10),
		   widget.Memory(foreground=COLORS["black"]),
		    widget.Sep(padding=10),
		    widget.Battery(
			format="{percent:2.0%} {hour:d}:{min:02d}",
			update_delay=5,
			foreground=COLORS["black"],
			low_foreground=COLORS["red"],
		    ),
		   widget.Sep(padding=10),
		   widget.Clock(format=" %a %d %b %I:%M %p ", foreground=COLORS["black"]),
		   widget.Wallpaper(
		       random_selection=True, foreground=COLORS["black"], label=False
		   ),
	       ],
	       size=25,
	       background=COLORS["white"],
	   ),
       ),
   ]


	for x in {
	    "emacs",
	    "st",
	    "nm-applet",
	    "dunst",
	    "unclutter",
	    f"feh --recursive --randomize --bg-fill {PICTURES}/wallpapers".split(),
	    "udiskie --use-udisks2".split(),
	}:
	    subprocess.run([x], check=False)
	subprocess.Popen(["nm-applet"])

   #+end_src
* Xmobar
   #+begin_src haskell
	   -- -- weather monitor
	   -- , Run Weather "SBBR" [ "--template", "<skyCondition> | <fc=#4682B4><tempC></fc>°C | <fc=#4682B4><rh></fc>% | <fc=#4682B4><pressure></fc>hPa"
	   --                      ] 13000
   -- %StdinReader% }{
	   -- -- screen brightness
	   -- , Run Brightness ["-t", "Brightness: [<bar>]"] 10

   position = Static { xpos = 0, ypos = 750, width = 1346, height = 20 }
   #+end_src
* Xmonad
   #+begin_src haskell
   import Graphics.X11.ExtraTypes.XF86

   , ( (0, xF86XK_AudioRaiseVolume), spawn  "pactl set-sink-volume @DEFAULT_SINK@ +5%")
   , ( (0, xF86XK_AudioLowerVolume), spawn  "pactl set-sink-volume @DEFAULT_SINK@ -5%")
   , ( (0, xF86XK_AudioMute)       , spawn  "pactl set-sink-mute @DEFAULT_SINK@ toggle")

	 -- Toggle the status bar gap
       -- Use this binding with avoidStruts from Hooks.ManageDocks.
       -- See also the statusBar function from Hooks.DynamicLog.
       --
       -- , ((modm .|. altMask, xK_b     ), sendMessage ToggleStruts)


       -- ++

       -- --
       -- -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
       -- -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
       -- --
       -- [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
       --     | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
       --     , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

   #+end_src
* StumpWM
   #+BEGIN_SRC lisp

   ;; ------------
   ;; SWANK / SLYNK
   ;; ------------

   ;; (require 'swank)
   ;; (swank:create-server)


   (ql:quickload "clx-truetype")
   (load-module "ttf-fonts")
   (set-font (make-instance 'xft:font :family "Hack Mono" :subfamily "Book" :size 11))


   ;; (define-key *top-map* (kbd "s-R") "kill-and-remove")
   ;; (define-key *top-map* (kbd "s-v") "split-and-switch")
   ;; (define-key *top-map* (kbd "s-h") "hsplit-and-switch")


   ;;*time-modeline-string* "%a %b %e %k:%M"
   ;; (ql:quickload :clx)
   ;; (ql:quickload :cl-ppcre)
   ;; (ql:quickload :swank)
   ;; (ql:quickload :stumpwm)
   ;; (stumpwm:stumpwm)
   ;; (quit)

   ;; ---------------
   ;; Fixed window numbers for certain programs

   ;; (defparameter *window-class-renumber*
   ;;   '(("Emacs" . 0)
   ;;     ("Next" . 1)
   ;;     ("mpv" . 2)
   ;;     ("firefox" . 3)
   ;;     ("st" . 4))
   ;;   "Alist of window classes to be renumbered, and their target numbers.")

   ;; (defun renumber-window-by-class (win)
   ;;   "Renumber window if its class matches *window-class-renumber*."

   ;;   (let* ((class (window-class win))
   ;;          (target-number (cdr (assoc class *window-class-renumber*
   ;;                                     :test #'string=))))

   ;;     (when target-number
   ;;       (let ((other-win (find-if #'(lambda (win)
   ;;                                     (= (window-number win) target-number))
   ;;                                 (group-windows (window-group win)))))
   ;;         (if other-win
   ;;             (when (string-not-equal class (window-class other-win))
   ;;               ;; other window, different class; switch numbers
   ;;               (setf (window-number other-win) (window-number win))
   ;;               (setf (window-number win) target-number))
   ;;             ;; if there's already a window of this class, do nothing.
   ;;             ;; just keep the new number for this window.

   ;;             ;; else: no other window; target number is free.
   ;;             (setf (window-number win) target-number))

   ;;         ;; finally
   ;;         (update-all-mode-lines)))))

   ;; (add-hook *new-window-hook* 'renumber-window-by-class)
   ;; wifi: %I
   ;; (^B%n^b)

   ;; (progn
   ;;   (load-module "kbd-layouts")
   ;;   (keyboard-layout-list "us" "pt-br"))

   ;; -- STUMPWM CONTRIB MODULES
   ;; (add-to-load-path "~/.local/share/quicklisp/setup.lisp")

   ;; (load-module "ttf-fonts")
   ;; (xft:cache-fonts)
   ;; (set-font (make-instance 'xft:font :family "Hack" :subfamily "Regular" :size 10))



   ;;*time-modeline-string* "%a %b %e %k:%M"


   (define-frame-preference "code"
       (0 t t :class "Emacs"))
   (define-frame-preference "browse"
       (0 t t :class "Chromium"))
   (define-frame-preference "browse"
       (0 t t :class "Firefox"))
   (define-frame-preference "browse"
       (0 t t :class "Next"))
   (define-frame-preference "system"
       (0 t t :class "Xfce4-terminal"))
   (define-frame-preference "media"
       (0 t t :class "mpv"))


   (run-commands
    "grename code"
    "gnewbg browse"
    "gnewbg system"
    "gnewbg media"
    "gnewbg misc"
    "gnewbg 6"
    "gnewbg 7")

   ;; (setf (group-name (car (screen-groups (current-screen)))) "code")
   ;; (gnewbg "system")
   ;; (gnewbg "media")
   ;; (gnewbg "misc")


   (define-key *root-map* (kbd "s-c") "colon1 exec firefox http://www.")

   (run-shell-command "dunst &")
   (run-shell-command "stalonetray -t -p --window-type normal")
   (run-shell-command "gnome-settings-daemon")
   (run-shell-command "gnome-power-manager")
   (run-shell-command "bluetooth-applet &")
   (run-shell-command "pactl load-module module-x11-xsmp &")

   ;; COLORS
   (set-focus-color "#3B4252")
   (set-unfocus-color "#232731")
   (set-win-bg-color "#22272F")

   (defcommand vsplit-and-switch () ()
	       "Splits vertically and switches to next window"
	       (vsplit)
	       (fnext))

   (defcommand hsplit-and-switch () ()
	       "Splits horizontally and switches to next window"
	       (hsplit)
	       (fnext))

   (defcommand toogle-mode-line () ()
	       "Hide/Show Modeline"
	       (stumpwm:toggle-mode-line (stumpwm:current-screen)
					 (stumpwm:current-head)))

   (mapc (lambda (head)
	   (toggle-mode-line (current-screen) head))
	 (screen-heads (current-screen)))


   (defcommand kill-and-remove () ()
	       "Kills the window and removes the frame"
	       (kill)
	       (remove))


   ;; prompt the user for an interactive command. The first arg is an
   ;; optional initial contents.
   ;; (defcommand colon1 (&optional (initial "")) (:rest)
   ;;             (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
   ;;               (when cmd
   ;;                 (eval-command cmd t))))


   ;; ;; Read some doc
   ;; (define-key *root-map* (kbd "d") "exec gv")

   ;; ;; Ssh somewhere
   ;; (define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")

   ;; ;; Web jump (works for Google and Imdb)
   ;; (defmacro make-web-jump (name prefix)
   ;;   `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
   ;;      (substitute #\+ #\Space search)
   ;;      (run-shell-command (concatenate 'string ,prefix search))))

   ;; (make-web-jump "google" "firefox http://www.google.fr/search?q=")
   ;; (make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

   ;; ;; C-t M-s is a terrble binding, but you get the idea.
   ;; (define-key *root-map* (kbd "M-s") "google")
   ;; (define-key *root-map* (kbd "i") "imdb")

   ;; Message window font
   ;; (set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

   ;; ;;; Define window placement policy...

   ;; Last rule to match takes precedence!
   ;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
   ;; match is performed.
   ;; TIP: if the :create flag is set then a missing group will be created and
   ;; restored from *data-dir*/create file.
   ;; TIP: if the :restore flag is set then group dump is restored even for an
   ;; existing group using *data-dir*/restore file.
   ;; (define-frame-preference "Default"
   ;;     ;; frame raise lock (lock AND raise == jumpto)
   ;;     (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
   ;;   (1 t nil :class "XTerm"))

   ;; (define-frame-preference "Ardour"
   ;;     (0 t   t   :instance "ardour_editor" :type :normal)
   ;;   (0 t   t   :title "Ardour - Session Control")
   ;;   (0 nil nil :class "XTerm")
   ;;   (1 t   nil :type :normal)
   ;;   (1 t   t   :instance "ardour_mixer")
   ;;   (2 t   t   :instance "jvmetro")
   ;;   (1 t   t   :instance "qjackctl")
   ;;   (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

   ;; (define-frame-preference "Shareland"
   ;;     (0 t   nil :class "XTerm")
   ;;   (1 nil t   :class "aMule"))

   ;; (define-frame-preference "Emacs"
   ;;     (1 t t :restore "emacs-editing-dump" :title "...xdvi")
   ;;   (0 t t :create "emacs-dump" :class "Emacs"))
   #+END_SRC
* Xmobar
   #+begin_src haskell  ~/.xmobarrc
   -- -*- haskell -*-

   Config {

      -- appearance
	font             = "xft:JetBrains Mono:size=9:bold:antialias=true"
      , bgColor          = "#172030"
      , fgColor          = "#c6797e"
      , position         =  Bottom

      -- layout
      , sepChar          = "%"   -- delineator between plugin names and straight text
      , alignSep         = "}{"  -- separator between left-right alignment

      -- general behavior
      , lowerOnStart     = True    -- send to bottom of window stack on start
      , hideOnStart      = False   -- start with window unmapped (hidden)
      , allDesktops      = True    -- show on all desktops
      , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
      , pickBroadest     = False   -- choose widest display (multi-monitor)
      , persistent       = True    -- enable/disable hiding (True = disabled)
      , template         = " O sol seja louvado! } {  %wifi% %multicpu%  %coretemp%  %battery%  %memory%  %date% "

      -- http://projects.haskell.org/xmobar/#system-monitor-plugins.
      , commands         =
	   -- network activity monitor (dynamic interface resolution)
	   [ Run DynNetwork     [ "--template" , "<dev>: <tx>kB/s|<rx>kB/s"
				, "--Low"      , "1000"       -- units: B/s
				, "--High"     , "5000"       -- units: B/s
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10


	   , Run Brightness ["-t", ""] 60

	   , Run Com "wmbar-info" [] "wifi" 30

	   -- cpu activity monitor
	   , Run MultiCpu       [ "--template" , "CPU: <total0>% <total1>%"
				, "--Low"      , "50"         -- units: %
				, "--High"     , "85"         -- units: %
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10

	   -- cpu core temperature monitor
	   , Run CoreTemp       [ "--template" , "TEMP: <core0>°C <core1>°C"
				, "--Low"      , "70"        -- units: °C
				, "--High"     , "80"        -- units: °C
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 50

	   -- memory usage monitor
	   , Run Memory         [ "--template" ,"MEM: <usedratio>%"
				, "--Low"      , "20"        -- units: %
				, "--High"     , "90"        -- units: %
				, "--low"      , "darkgray"
				, "--normal"   , "orange"
				, "--high"     , "red"
				] 10

	   -- battery monitor
	   , Run Battery        [ "--template" , "BAT: <acstatus>"
				, "--Low"      , "10"        -- units: %
				, "--High"     , "80"        -- units: %
				, "--low"      , "red"
				, "--normal"   , "orange"
				, "--high"     , "red"

				, "--" -- battery specific options
					  -- discharging status
					  , "-o"	, "<left>% (<tceimeleft>)"
					  -- AC "on" status
					  , "-O"	, "<fc=#eabe9a>Charging</fc>"
					  -- charged status
					  , "-i"	, "<fc=#1E6378>Charged</fc>"
				] 50

	   -- time and date indicator
	   , Run Date           "<fc=#ABABAB>%F (%a) %T</fc>" "date" 10
	   ]
      }
   #+end_src
* StaloneTray
   #+begin_src conf
   decorations none
   transparent false
   dockapp_mode none
   geometry 1x1-0+750
   background "#172030"
   kludges force_icons_size
   grow_gravity NW
   icon_gravity NW
   icon_size 18
   sticky true
   #window_strut none
   window_type dock
   window_layer bottom
   no_shrink false
   skip_taskbar true
   #+End_src
