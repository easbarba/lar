#+TITLE: Git

* Progress
** Books
| Books            | Capitulo | em                                       | tarde | revisao |
|------------------+----------+------------------------------------------+-------+---------|
| Pro git          | Basics   | Viewing Your Staged and Unstaged Changes |       |         |
| Professional Git |          | CONFIGURING GIT                          |       |         |

* Features
** add
      Add file contents to the index.
** bisect
      Find by binary search the change that introduced a bug.
** branch
      List, create, or delete branches.
** stash
 takes your uncommitted changes (both staged and unstaged), saves them away for
 later use, and then reverts them from your working copy
** checkout
      Switch branches or restore working tree files.
** cherry
      Find commits yet to be applied to upstream (branch on the remote).
** cherry-pick
      Apply the changes introduced by some existing commits.
** clone
Clone a repository into a new directory.

|                                   |   |
|-----------------------------------+---|
| <URL> -b <BRANCH> --single-branch |   |
| -â€“depth <URL>                     |   |
| --shallow-exclude <BRANCH>        |   |

** commit
      Record changes to the repository.
** config
Get and set repository or global options.
*** --get

|                    |   |
|--------------------+---|
| --get <name.value> |   |
|                    |   |


**** usage
#+begin_src shell

git config --get remote.origin.url
git config --get user.name
git config --get pull.ff # only

#+end_src

** diff
Show changes between commits, commits and working tree, and so on.

|                                              |                         |
|----------------------------------------------+-------------------------|
| --oneline --graph <branch>..<current_branch> | differ between branches |
|                                              |                         |

** fetch
Fetch branches and/or tags (collectively, "refs") from one or more other
repositories, along with the objects necessary to complete their histories.
Remote-tracking branches are updated (see the description of <refspec> below for
ways to control this behavior).

** grep
      Print lines matching a pattern.
** help
      Display help information.
** format-patch

|                                   |                                                  |
|-----------------------------------+--------------------------------------------------|
| 6.2 --stdout > ~/newdefault.patch | bundle all commits of branch in one single patch |
| master -o patches                 | patch files in a given directory                 |
|                                   |                                                  |


#+begin_src shell

git format-patch

#+end_src

** log
      Show commit logs.
** merge
      Join two or more development histories together.
#+begin_src shell

git checkout feature
git merge main

# Or, you can condense this to a one-liner:

git merge feature main



#+end_src

** mv
      Move or rename a file, directory, or symlink.
** pull
      Fetch from, or integrate with, another repository or a local branch.
** push
      Update remote refs along with associated objects.
** rebase
Forward-port local commits to the updated upstream head.

#+begin_src shell

git rebase -i HEAD~3

#+end_src

On Magit: r i C-c [fp] C-c

** rerere
      Reuse recorded resolution for merged conflicts.
** reset
      Reset current HEAD to the specified state.
** revert
      Revert some existing commits.
** rm
      Remove files from the working tree and from the index.
** show
      Show various types of objects.
** status
Show the working tree status.

|    |                |
|----+----------------|
| -s | shorter status |
|    |                |

** submodule
      Initialize, update, or inspect submodules.
** subtree
      Merge subtrees and split repositories into subtrees.
** tag
      Create, list, delete, or verify a tagged object.
** worktree
      Manage multiple working trees.
* Official
    https://git-scm.com/docs

    https://medium.com/sweetmeat/how-to-keep-a-downstream-git-repository-current-with-upstream-repository-changes-10b76fad6d97

    http://gitready.com/intermediate/2009/02/13/list-remote-branches.html
* gitigonore
man gitignore

* Observations
    | git command                              | description                                                           |
    |------------------------------------------+-----------------------------------------------------------------------|
    | log --pretty=oneline                     |                                                                       |
    | push                                     | Update remote refs along with associated objects                      |
    | commit                                   | Record changes to the repository, call editor                         |
    | add                                      | Add file contents to the index                                        |
    | remote                                   | Manage set of tracked repositories                                    |
    | revert                                   | Revert some existing commits                                          |
    | reset                                    | Reset current HEAD to the specified state                             |
    | commit -m "detailed commit"              |                                                                       |
    | push origin master                       |                                                                       |
    | log --statgit log --stat                 | abbreviated stats for each commit                                     |
    | diff --git $FILE                         |                                                                       |
    | log -p -2                                | difference (the patch output) introduced in each commit               |
    | log                                      | log in this project                                                   |
    | mv                                       | rename                                                                |
    | commit -a -m "commit message"            | commit all files and commit message                                   |
    | log --pretty=format:"%h - %an, %ar : %s" |                                                                       |
    | log --pretty=format:"%h %s" --graph      | adds a nice little ASCII graph                                        |
    | log --since=2.weeks                      | time-limiting                                                         |
    | log --author=user                        | filter on a specific author                                           |
    | log --grep                               | search for keywords in the commit messages                            |
    | git log -S function_name                 | last commit that added or removed a reference to a  specific function |
    | --since, --after                         | Limit the commits to those made after the specified date.             |
    | --until, --before                        | Limit the commits to those made before the specified date.            |
    | --no-merges                              | prevent the display of merge commits cluttering up your log history   |
    | --force-with-lease                       |                                                                       |

    | GIT eg                                                                                                              |
    |-----------------------------------------------------------------------------------------------------------------------|
    | git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \   --before="2008-11-01" --no-merges -- t/ |
    |                                                                                                                       |

    | add    | Add file contents to the index.                         |
    | bisect | Find by binary search the change that introduced a bug. |
    | branch | List, create, or delete branches.                       |
    | checkout | Switch branches or restore working tree files. |

    |          |                                                |
    cherry  Find commits yet to be applied to upstream (branch on the remote).
    cherry-pick  Apply the changes introduced by some existing commits.
    clone  Clone a repository into a new directory.
    commit  Record changes to the repository.
    config  Get and set repository or global options.
    diff  Show changes between commits, commits and working tree, and so on.
    fetch  Download objects and refs from another repository.
    grep  Print lines matching a pattern.
    help  Display help information.
    log  Show commit logs.
    merge  Join two or more development histories together.
    mv  Move or rename a file, directory, or symlink.
    pull  Fetch from, or integrate with, another repository or a local branch.
    push  Update remote refs along with associated objects.
    rebase  Forward-port local commits to the updated upstream head.
    rerere  Reuse recorded resolution for merged conflicts.
    reset  Reset current HEAD to the specified state.
    revert  Revert some existing commits.
    rm  Remove files from the working tree and from the index.
    show  Show various types of objects.
    status  Show the working tree status.
    submodule  Initialize, update, or inspect submodules.
    subtree  Merge subtrees and split repositories into subtrees.
    tag  Create, list, delete, or verify a tagged object.
    worktree  Manage multiple working trees.
* Tips
** Pull Request a specific commit
     #+BEGIN_SRC shell-script

     git remote add upstream https://github.com/upstream_github_username/upstream_github_repo_name.git

     git fetch --all
     git checkout -b my-single-change upstream/master
     git cherry-pick b50b2e7
     git push -u origin my-single-change
     #+END_SRC

** Force reset Fork to upstream state
     #+BEGIN_SRC shell-script

     # local
     git remote add upstream https://github.com/some_user/some_repo
     git fetch upstream
     git checkout master
     git reset --hard upstream/master

     # remote
     git push origin master --force
     #+END_SRC
* Common Errors
** Git Push Error: insufficient permission for adding an object to repository
     cd .git/objects
     ls -al
     sudo chown -R yourname:yourgroup *
* Read later
    https://chris.beams.io/posts/git-commit/
    [[https://www.learnenough.com/git-tutorial][Learn enough to be dangerous]]
