#+TILE: Conceitos de Programacao - Anotacoes de aprenzado, progresso e outros.

* Sumario
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#progresso][Progresso]]
- [[#termos][Termos]]
- [[#oop][OOP]]
  - [[#definition][Definition]]
- [[#data-structures][Data Structures]]
- [[#algorithms][Algorithms]]
- [[#design-patterns][Design Patterns]]
  - [[#template-method][Template Method]]
  - [[#strategy][Strategy]]
- [[#algorithms][Algorithms]]
- [[#articles][Articles]]
- [[#skills][Skills]]
:END:
* Progresso
   | Livros                                                 | chapter                                | @                                                 | @later | revision       |
   |--------------------------------------------------------+----------------------------------------+---------------------------------------------------+--------+----------------|
   | The Art of Unix programming                            |                                        | The Lessons of Unix History                       |        |                |
   | A Common-Sense Guide to Data Structures and Algorithms | Arrays                                 | Searching                                         |        |                |
   | Refactoring Improving the Design of Existing Code      | Chapter 1 Refactoring: A First Example | Now I have a spot for the play, I need to add it. |        |                |
   | Design Patterns Elements of Reusable OO Software       | 3 Creational Patterns                  | Facade                                            |        | Factory Method |
   | Object Thinking                                        | Chapter 1                              |                                                   |        |                |
   | Algorithms                                             | 1 Fundamentals                         |                                                   |        |                |
   | Clean Code                                             | Chapter 1: Clean Code                  |                                                   |        |                |

* Termos
  | Termo       | Descricao                                     |
  |-------------+-----------------------------------------------|
  | EAFP        | Easier to Ask for Forgiveness than Permission |
  | LBYL        | Look Before You Leap                          |
  | Duck Typing |                                               |
  | WHNF        | Weak Head Normal Form                         |
  | Noise/      |                                               |
* OOP
** Definition
   Object-oriented applications are made up of objects and the
   messages that pass between them.
* Data Structures
* Algorithms
* Design Patterns
** Template Method
*** Features
**** Base class
**** inheritance
**** Multiple actions
*** Issues
**** changes require a whole new object
**** limit runtime flexibility
**** tangled by upper classes
*** Advantages
** Strategy
*** Feature
**** context & strategy
**** easy to switch strategies at runtime
**** delegation
**** composition
**** separation of concerns
**** caller class relieve of any responsibility for or knowledge of the callee ones
**** 'context' treat the strategies like interchangeable parts.
**** all objects(strategies) do the same job
**** all objects support same interface
**** pull the algorithm out into a separate object
* Algorithms
* Articles
  https://daedtech.com/5-things-ive-learned-in-20-years-of-programming

  https://thevaluable.dev/abstraction_software_development/

  https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html

  https://stackoverflow.blog/2019/09/05/they-didnt-teach-us-this-a-crash-course-for-your-first-job-in-software/?cb=1

  https://stackoverflow.blog/2019/08/07/what-every-developer-should-learn-early-on/

  https://www.tableau.com/learn/articles/books-about-data-structures-algorithms

  https://blog.daftcode.pl/become-a-better-programmer-by-making-it-hard-to-write-bad-code-d118ab90e0f7

  http://typicalprogrammer.com/the-joys-of-maintenance-programming

  https://www.embeddedrelated.com/thread/4490/embedded-software-good-and-bad-programming-habits

  https://www.reddit.com/r/dredmorbius/comments/69wk8y/the_tyranny_of_the_minimum_viable_user/

  http://www.bamafolks.com/randy/students/embedded/programming_languages.html

  https://npf.io/2017/11/comments/

  https://henrikwarne-com.cdn.ampproject.org/c/s/henrikwarne.com/2012/06/02/why-i-love-coding/amp/

  http://ourmachinery.com/post/minimalist-container-library-in-c-part-1/

  https://dave.cheney.net/2018/01/16/containers-versus-operating-systems

  http://www.linuxjournal.com/content/getting-started-ncurses

  http://www.grymoire.com/Unix/Awk.html#uh-0

  http://akaptur.com/blog/2017/11/12/love-your-bugs/

  http://www.cipht.net/2017/10/05/why-read-code.html

  http://linuxtechlab.com/bash-scripting-learn-use-regex-basics/

  http://languagelog.ldc.upenn.edu/nll/?p=2483

  https://learnxinyminutes.com/
* Skills
  - OOP
  - MVC *
  - TDD *
  - Clean Code *
  - SOLID *
  - Design Patterns ***
  - PostgreSQL
  - Ágil
  - Cloud (AWS, Azure)
  - CI, CD (Jenkins, )
  - Sistemas Distribuídos WEB;
  - JavaScript
  - SPA
  - Redis, Memcached ou ElasticSearch
  - Docker,AWS
  - Familiaridade com infraestrutura, deployment e servidores;
  - Inglês
  - RabbitMQ/ Kafka
  - Firebase
  - Postfix, Nginx
