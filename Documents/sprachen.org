#+TILE: Programming Languages - Study Annotations

* Inhaltsverzeichnis
  :PROPERTIES:
  :TOC:      :include all :depth 2 :ignore this
  :END:
:CONTENTS:
- [[#c][C]]
  - [[#fortschritt][Fortschritt]]
  - [[#projetos][Projetos]]
  - [[#books][Books]]
  - [[#tools][Tools]]
  - [[#read-later][Read later]]
  - [[#articles][Articles]]
  - [[#libraries][Libraries]]
  - [[#documentation][Documentation]]
  - [[#bootstraping][Bootstraping]]
  - [[#tips][Tips]]
  - [[#system-software-skills][System Software Skills]]
- [[#ruby][Ruby]]
  - [[#fortschritt][Fortschritt]]
  - [[#features][Features]]
  - [[#concepts][Concepts]]
  - [[#instructions][Instructions]]
- [[#shell-scripts][Shell Scripts]]
  - [[#gnu-bash][GNU Bash]]
  - [[#others][Others]]
  - [[#posix][Posix]]
- [[#yaml][Yaml]]
  - [[#trais][trais]]
  - [[#resources][resources]]
- [[#emacs-lisp][Emacs Lisp]]
  - [[#progresso][Progresso]]
- [[#german][German]]
  - [[#fortschritt][Fortschritt]]
:END:

* C
** Inhaltsverzeichnis
   :PROPERTIES:
   :TOC:      :include all :depth 2 :ignore this
   :END:
 :CONTENTS:
 - [[#fortschritt][Fortschritt]]
   - [[#buch][Buch]]
   - [[#ldc][LDC]]
 - [[#projetos][Projetos]]
 - [[#books][Books]]
   - [[#cpama][CPAMA]]
 - [[#tools][Tools]]
 - [[#read-later][Read later]]
 - [[#articles][Articles]]
 - [[#libraries][Libraries]]
 - [[#documentation][Documentation]]
 - [[#bootstraping][Bootstraping]]
 - [[#tips][Tips]]
 - [[#system-software-skills][System Software Skills]]
 :END:
** Fortschritt
*** Buch
    | Buch              | Capitulo | em | tarde | revisao |
    |-------------------+----------+----+-------+---------|
    | C Modern Approach |          |    |       |         |

*** LDC
    | Source Code | folder | file | @ |
    |-------------+--------+------+---|
    | curl        |        |      |   |
    | tmux        |        |      |   |

** Projetos
** Books
*** CPAMA
**** Chapter 8
***** Exercises
****** 5. Array of Fibonacci numbers up to 40
       #+BEGIN_SRC c
       #include <stdio.h>

       #define N 40

       int main(void)
       {
         printf("Enter up to %d numbers: ", N);

         int fib_numbers[N] = {[0] = 0, [1] = 1, 0};
         for(int i = 2; i < N; i++){
           fib_numbers[i] = fib_numbers[i-1] + fib_numbers[i-2];
         }

         /* Sorted Array */
         printf("Array: { ");
         for(int i = 0; i < N; i++) {
           printf("%d", fib_numbers[i]);
           if(i < N-1)
             printf(", ");
         }
         printf(" }\n");


         return 0;
       }
       #+END_SRC
****** 11 8x8 even checker_board
       #+begin_src c
       #include <stdio.h>

       #define N 8

       int main(void)
       {
         char checker_board[N][N] = {0};
         for(int i = 0; i < N; i++){
           for (int j = 0; j < N; j++) {
             checker_board[i][j] = ((i+j) % 2 == 0) ? 'B' : 'R';
           }
         }

         printf("\n");
         /* Sorted Array */
         printf("Multi Dimension Array: \n{");
         for(int i = 0; i < N; i++) {
           for (int j = 0; j < N; j++) {

             if(i == 0 && j == 0)  printf("{ ");
             else if (j == 0) printf(" { ");
             printf("%c", checker_board[i][j]);

             if(j < N-1)
	       printf(", ");

             if(j == N-1 && i < N-1) printf(" }\n");
             else if (j == N-1) printf(" }");
           }
         }
         printf("}\n");

         return 0;
       }

       #+end_src
***** Projects
****** .1
       #+BEGIN_SRC c
       #include <stdio.h>
       #include <stdbool.h>

       int main(void)
       {
         bool digit_seen[10] = {false};
         int digit;
         long n;

         printf("Enter a number: ");
         scanf("%ld", &n);

         printf("Repeated digits: ");
         while (n > 0) {
           digit = n % 10;
           if (digit_seen[digit])
             printf("%d ", digit);
           digit_seen[digit] = true;
           n /= 10;
         }

         printf("\n");

         return 0;
       }
       #+END_SRC
****** .7

**** Chapter 9
***** Exercises
***** Projects
****** Project 1

	Write a program that asks the user to enter a series of integers (which it
	stores in an array), then sorts the integers by calling the function
	selection_sort. When given an array with n elements, selection_sort must do
	the following:

	1) Search the array to find the largest element, then move it
           to the last position in the array.
	2) Call itself recursively to sort the first n - 1 elements of the array.

	#+BEGIN_SRC c
	#include <stdio.h>

	#define N 4

	void selection_sort(int a[], int n);

	int main(void)
	{
          printf("Enter up to %d numbers: ", N);

          int a[N] = {0};
          for(int i = 0; i < N; i++){
            scanf("%d", &a[i]);
          }

          /* Sorted Array */
          printf("Unsorted Array: { ");
          for(int i = 0; i < N; i++) {
            printf("%d", a[i]);
            if(i < N-1)
              printf(", ");
          }
          printf(" }\n");

          selection_sort(a, N);

          /* Sorted Array */
          printf("Sorted Array: { ");
          for(int i = 0; i < N; i++) {
            printf("%d", a[i]);
            if(i < N-1)
              printf(", ");
          }

          printf(" }\n");

          return 0;
	}

	void selection_sort(int a[], int n)
	{
          if (n == 0) return;

          // Sort Array
          int largest, smallest, i;
          i = largest = smallest = 0;

          for(; i < n; i++)
            if(a[i] > a[largest])
              largest = i;

          smallest = a[largest];
          a[largest] = a[n - 1];
          a[n -1] = smallest;

          /* Recursion Unfolding */
          printf("{ ");
          for(int i = 0; i < n; i++) {
            printf("%d", a[i]);
            if(i < n-1)
              printf(", ");
          }

          printf(" }\n");

          selection_sort(a, n-1);
	}
	#+END_SRC

** Tools
   https://cdecl.org/  - C gibberish â†” English
   https://build2.org/

** Read later
   Mike Gancarz's The Unix Philosophy
   The Pragmatic Programmer [Hunt-Thomas
   The Practice of Programming [Kernighan-Pike99
   Zen Flesh, Zen Bones [Reps-Senzaki],

   https://multun.net/obscure-c-features.html

   https://norasandler.com/2017/11/29/Write-a-Compiler.html

   https://ecc-comp.blogspot.com/2014/12/homogeneous-operating-systems-are-better.html

   https://usesthis.com/interviews/christopher.allan.webber/

   https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html

   https://jacobmossberg.se/posts/2018/08/11/run-c-program-bare-metal-on-arm-cortex-m3.html

   https://mort.coffee/home/obscure-c-features/

   https://monades.roperzh.com/rediscovering-make-automatic-variables/

   https://monades.roperzh.com/rediscovering-make-power-behind-rules/

   http://www.shubhro.com/2018/01/20/brushing-up-os-c/

   https://solarianprogrammer.com/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/

   https://solarianprogrammer.com/2017/01/06/c99-c11-dynamic-array-mimics-cpp-vector/

   http://collin.moe/post.php?i=8

   https://www.viva64.com/en/b/0558/

   http://devarea.com/the-c-preprocessor/

   https://fgiesen.wordpress.com/2018/02/19/reading-bits-in-far-too-many-ways-part-1/

   https://gustedt.wordpress.com/2012/10/14/c11-defects-c-threads-are-not-realizable-with-posix-threads/

   http://arjunsreedharan.org/post/148675821737/write-a-simple-memory-allocator

   https://www.manager.com.br/empregos-c-programador-desenvolvedor

   https://github.com/aleksandar-todorovic/awesome-c

   https://queue.acm.org/detail.cfm?id=3212479

   https://www.quora.com/Why-does-it-seem-that-Unix-is-written-in-C-and-not-written-with-any-C++-Isn%E2%80%99t-C++-more-powerful-than-C

   http://www.code-in-c.com/galton-board-in-c/

   https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html

   http://www.itachay.com/2018/06/cc-programming-questions-practice.html

   http://nullprogram.com/blog/2018/06/23/

   http://www.code-in-c.com/an-introduction-to-ncurses-in-c/

   https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/C-Extensions.html

   https://www.ibm.com/developerworks/linux/library/l-gcc-hacks/

   https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html

   http://www.buildyourownlisp.com/chapter6_parsing

   http://nullprogram.com/blog/2018/06/10/

   https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/

   https://www.reddit.com/r/C_Programming/comments/8h4pda/c_is_not_a_lowlevel_language/

   https://github.com/ruslo/hunter

   https://github.com/oriansj/knight-vm
** Articles
   http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel

   https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list

   http://publications.gbdirect.co.uk/c_book/

   http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

   https://nazavode.github.io/blog/aliasing/

   http://clc-wiki.net/wiki/The_C_Standard#Obtaining_the_Standard

   https://www.embedded.com/design/programming-languages-and-tools/4437696/C11--C-finally-gets-a-new-standard

   http://www.drdobbs.com/cpp/c-finally-gets-a-new-standard/232800444

   https://github.com/andreas-gone-wild/blog/blob/master/skip_lists_revisited.md

   https://port70.net/~nsz/c/c11/n1570.html

   http://nullprogram.com/blog/2017/11/03/

   https://www.cossacklabs.com/blog/macros-in-crypto-c-code.html

   https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234

   https://stackoverflow.com/tags/c/info

   http://cs-education.github.io/sys/#/lessons

   https://blog.holbertonschool.com/hack-virtual-memory-stack-registers-assembly-code/

   https://www.wikiwand.com/en/MISRA_C

   https://danluu.com/malloc-tutorial/

   https://blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/

   http://seenaburns.com/building-c-programs/

   https://lwn.net/Articles/741171/

   http://www.techaed.com/how-to-code-like-the-top-programmers-at-nasa-10-critical-rules/

   https://notabug.org/koz.ross/awesome-c

   http://marek.vavrusa.com/c/memory/2015/02/20/memory/

   http://nullprogram.com/blog/2017/08/20/

   http://nullprogram.com/

   https://viewsourcecode.org/snaptoken/kilo/

   https://aransentin.github.io/cwasm/

   https://include-what-you-use.org/

   http://www.catb.org/esr/structure-packing/#_who_should_read_this

   http://www.catb.org/esr/structure-packing/

   https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a

   http://www.agner.org/optimize/

   http://c-faq.com/

   http://www.buildyourownlisp.com/chapter1_introduction

   https://blog.bradfieldcs.com/the-cost-of-forsaking-c-113986438784

   http://www.iso-9899.info/wiki/Main_Page#Stuff_that_should_be_avoided

   http://www.pldaniels.com/c-of-peril/

   https://wiki.osdev.org/Main_Page

   https://wiki.osdev.org/Books

   https://wiki.osdev.org/Bare_Bones

   http://git.annexia.org/?p=jonesforth.git;a=summary

   http://howtowriteaprogram.blogspot.com.br/2010/11/lisp-interpreter-in-90-lines-of-c.html

   http://peter.michaux.ca/articles/scheme-from-scratch-introduction

   https://github.com/kanaka/mal/blob/master/process/guide.md

   https://norvig.com/lispy.html

   https://www.joelonsoftware.com/2001/12/11/back-to-basics/

   https://ops.tips/blog/a-tcp-server-in-c/

   https://beej.us/guide/bgnet/

   https://github.com/cquery-project/cquery/wiki/compile_commands.json

   https://sarcasm.github.io/notes/dev/compilation-database.html

   http://antongerdelan.net/blog/formatted/2018_03_08_how_i_write_code.html

   http://port70.net/~nsz/c/c99/C99RationaleV5.10.pdf

   http://www.lysator.liu.se/c/pikestyle.html

   http://port70.net/~nsz/c/c89/rationale/

   http://marek.vavrusa.com/memory/

   https://blog.noctua-software.com/c-tricks.html

   https://blogs.oracle.com/ksplice/8-gdb-tricks-you-should-know

   http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html

   https://www.gnu.org/software/emacs/manual/html_node/efaq/Customizing-C-and-C_002b_002b-indentation.html
** Libraries
   https://www.gnu.org/software/libc/

   https://github.com/universal-ctags/ctags

   https://www.fossil-scm.org/index.html/doc/trunk/www/index.wiki

   https://github.com/conan-io/conan
** Documentation
   http://knking.com/books/c2/index.html

   http://www.iso-9899.info/wiki/Books

   http://fabiensanglard.net/c/

   https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list/562377#562377

   https://gcc.gnu.org/onlinedocs/

   http://www.c-faq.com/

   http://port70.net/~nsz/c/

   http://port70.net/~nsz/c/c99/n1256.html
** Bootstraping
   http://git.savannah.nongnu.org/cgit/stage0.git/tree/x86/stage0/stage0_monitor.hex

   http://git.savannah.nongnu.org/cgit/stage0.git/tree/stage0/stage0_monitor.hex0

   https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/
** Tips
   https://github.com/aleksandar-todorovic/awesome-c#game-programming

   http://www.embedded.com/design/programming-languages-and-tools/4215552/Seventeen-steps-to-safer-C-code

   http://doc.cat-v.org/bell_labs/pikestyle

   https://www.kernel.org/doc/Documentation/process/coding-style.rst

   https://kristerw.blogspot.com.br/2017/09/useful-gcc-warning-options-not-enabled.html

   http://doc.cat-v.org/plan_9/4th_edition/papers/mk

** System Software Skills
   |---+------------------------------------------------------+---|
   | C | Data Structures rather than just databases           |   |
   | C | deliver clean, efficient and glamorous code quickly. |   |
   | C | current, low level "C" skills                        |   |
   | C | write API's and not just use them.                   |   |
   |   | SQL                                                  |   |
   |   | Excellent writing skills                             |   |
   |   | Outstanding communications skills are a must         |   |
   |   | Git                                                  |   |
   |   | ) Experience in programming microcontrollers.        |   |
   |---+------------------------------------------------------+---|
* Ruby
** Fortschritt
*** Buch
    | Books                                                     | Capitulo                                       | em                                                       | tarde                          | revisao |
    |-----------------------------------------------------------+------------------------------------------------+----------------------------------------------------------+--------------------------------+---------|
    | Practical Object-Oriented Design                          | Designing Classes with a Single Responsibility | 2.2.3 Determining If a Class Has a Single Responsibility |                                |         |
    | Closure in Ruby                                           |                                                |                                                          |                                |         |
    | Design Patterns in Ruby                                   | Strategy                                       |                                                          |                                |         |
    | The Well Grounded Rubyist                                 | 12  File and I/O operations                    |                                                          |                                |         |
    | Beginning Rails 6                                         | Getting Something Running                      | Creating the Article Model                               |                                |         |
    | Pragmatic Build Awesome Command-Line Applications in Ruby |                                                |                                                          |                                |         |
    | Eloquent Ruby                                             | Chapter 8. Embrace Dynamic Typing              | Shorter Programs, But Not the Way You Think              | Spec: A Plethora of Assertions |         |
*** SLOC
    | Source Code | folder          | file       | @ |
    |-------------+-----------------+------------+---|
    | ruby        | lib/bundler/cli | install.rb |   |
    | rails       |                 |            |   |
** Features
*** Ruby
**** Features
***** dig
***** fetch
***** tap
***** Quoting
      %char{text}
      #+begin_src ruby
      a = %q(a b c d)

      b = %Q(a b c)
      #+end_src
***** heredocs
      #+begin_src ruby
      <<EOL

      EOL

      <<EOL.to_i * 10
      EOL

      <<'EOL'
      EOL

      <<-EOL
      EOL

      <<~EOL
      EOL

      [1,2, <<EO asdasd EO]

      a(false, <<EO asd... EO)
      #+end_src
***** proc
      #+begin_src ruby

      #+end_src
***** do end as param
      #+begin_src ruby
      x = (do  1 + 2 end)
      x = (do 'a' + 'b' end).join(',')
      #+end_src
***** array
      #+begin_src ruby
      a = [1, ["a", "b"], 4]
      arr[1][0]
      [1,2][0]
      arr.dig(3,0) value_at, a[2,3] = ..
      a[2..3]
      a.slice()
      a.[]=(0, "first")
      a.[](2)
      a = %w(a b c)
      a= %W({a} b c)
      x.to_ary
      x.to_arr
      Array()
      def string.to_arr
      end
      a.unshift(0)
      a.push(1,2,3)
      a << 5
      a.pop
      a.shift
      a.concat
      a.replace([1,2,3])
      a.flatten
      a.reverse
      a.join(" , ")
      a = *
      a.uniq
      a.compact
      a.size
      a.empty
      a.include?
      a.first
      a.last
      a.sample
      a.count(1)
      #+end_src
      [[file:path]]
***** date/time
      #+begin_src ruby
      require 'date'
      d = date.today

      require 'time'
      t = time.zxcz
      #+end_src
***** lambda
      #+begin_src ruby
      l = -> { xx; aa }
      l = lambda do
	yield xx
      end
      #+end_src
***** rescue
      #+begin_src ruby
      begin
	puts 'I am before the raise.'
	raise 'An error has occured.'
	puts 'I am after the raise.'
      rescue
	puts 'I am rescued.'
      end
      #+end_src
***** hash
      #+begin_src ruby
      h = Hash.new
      h = { one: 1, :two => 2 }
      h = Hash[1, "one", 2, "two"]
      h["1"] = 1
      h.[]=("New York", "NY")
      h.store("New York", "NY")
      a.update(b)
      a.merge(b)
      h.select {k,vk > 1 } !
      h.reject {  k,v  k > 1 } !
      h.reject! {  k,v  k > 1 }
      h = { street: "127th Street", apt: nil }.compact !
      h = { street: "127th Street", apt: nil }.compact!
      h.invert
      h.clear
      h = {...}.replace({...})
      h.key?
      h.empty?
      #+end_src
***** range
      #+begin_src ruby
      r = Range.new(1,100)
      r = Range.new(1,100, true)
      r =  1..99(inclusive) r = 1...199(exclusive)
      r.cover? 2
      r.include? 3
      #+end_src
***** sets
      #+begin_src ruby
      s = Set.new(array)
      s = Set.new(names) {name name.upcase }
      s << 5
      s.add 5
      s.delete(1)
      s.intersection|&| x
      s.union x
      s + x
      s.difference x
      s - x
      s ^ x
      s.merge [2]
      s.subset? b
      s.superset? b
      s.proper_subset? x
      s.proper_superset? x
      #+end_src
***** gsub
      Returns a copy of str with all occurrences of pattern substituted for the second argument.                                                                                                                                                                                                                                                                                                                              |
***** find
      #+begin_src ruby
      a.find { Â¦nÂ¦ n > 5 }
      a.find { Â¦nÂ¦ n > 5 }
      a.find_all
      a.select
      a.reject
      a.map
      #+end_src
***** map
      #+begin_src ruby
      a.map { |x| x.uppercase}
      a.map! { |x| x.uppercase}
      #+end_src
***** each_slice
      #+begin_src ruby
      animals.each_slice(2).map do |predator, prey|
      #+end_src
***** lazy
      #+begin_src ruby
      (1..Float::INFINITY).lazy.select {|n| n % 3 == 0 }
      #+end_src
***** with_index
      #+begin_src ruby
      ['a'..'z').map.with_index {|letter,i| [letter, i] } // Output: [["a", 0], ["b", 1], etc.]
      my_enum.take(5).force // actual result rather than lazy enumerator
      #+end_src
***** enum_for
      #+begin_src ruby
      e = names.enum_for(:inject, "Names: ")
      #+end_src
***** more

      | drop_while             | a.drop_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
      | take_while             | a.take_while { true }                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
      | find_all               | a.find_all Â¦ a.select                                                                                                                                                                                                                                                                                                                                                                                                   |                                                                                                             |
      | reject                 | a.reject { Â¦iÂ¦ i > 4 } Â¦ a.reject! { Â¦iÂ¦ i > 4 }                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
      | select                 |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | grep                   | a.grep(//o//) Â¦ a.grep(String) Â¦ a.grep(50..100) Â¦                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                             |
      | group_by               | a.group_by { Â¦sÂ¦ s.size }                                                                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
      | match                  | //n//.match(s)                                                                                                                                                                                                                                                                                                                                                                                                            |                                                                                                             |
      | String                 | 'C'.size Â¦ each_byte Â¦ each_line Â¦ each_codepoint Â¦ each_char Â¦ s.bytes Â¦                                                                                                                                                                                                                                                                                                                                               |                                                                                                             |
      | min/min_by             | a.min { Â¦a,bÂ¦ a.size <=> b.size } Â¦  a.min { Â¦langÂ¦ lang.size } Â¦ state_hash.min_by { Â¦name, abbrÂ¦ name }                                                                                                                                                                                                                                                                                                               |                                                                                                             |
      | max/max_by             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | minmax/minmax_by       | a.minmax Â¦ a.minmax_by { Â¦langÂ¦ lang.size }                                                                                                                                                                                                                                                                                                                                                                             |                                                                                                             |
      | reverse_each           | [1,2,3].reverse_each { Â¦eÂ¦ puts e * 10 }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
      | with_index             | letters.each.with_index {Â¦(key,value),iÂ¦ puts i }                                                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
      | each_index             | names.each.with_index(1) { Â¦pres, iÂ¦ p i }                                                                                                                                                                                                                                                                                                                                                                              |                                                                                                             |
      | each_slice             |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | each_cons              |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | slice_before           | a.slice_before(\/=/).to_a Â¦ (1..10).slice_before { Â¦numÂ¦ num % 2 == 0 }.to_a Â¦                                                                                                                                                                                                                                                                                                                                          |                                                                                                             |
      | slice_after            |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | slice_when             | a.slice_when { Â¦i,jÂ¦ i == j }.to_a                                                                                                                                                                                                                                                                                                                                                                                      |                                                                                                             |
      | inject/reduce          | [1,2,3,4].inject(:+)                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                             |
      | cycle                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | map                    | names.map { Â¦nameÂ¦ name.upcase } Â¦  x = 5.times.map { Apple.new(rand(100..900)) }                                                                                                                                                                                                                                                                                                                                       |                                                                                                             |
      | map!                   |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | symbol-argument blocks | names.map(&:upcase)                                                                                                                                                                                                                                                                                                                                                                                                     |                                                                                                             |
      | <=>                    | Apple#<=> Â¦ Apple.sort { Â¦a,bÂ¦ a.brand <=> b.brand } Â¦                                                                                                                                                                                                                                                                                                                                                                  | implementing a spaceship test method is enough to sort a class, or use a block to sort, or even override it |
      | comparable             | Apple#<=> Â¦                                                                                                                                                                                                                                                                                                                                                                                                             | include comparable                                                                                          |
      | clamp                  |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | between                |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      | functions              | -> (args) {} Â¦ Sum = -> (a, b) { a + b }                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
      | <<                     | yielder                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
      |                        | enum_for                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                             |
      |                        | to_enum                                                                                                                                                                                                                                                                                                                                                                                                                 |                                                                                                             |
      | dup                    |                                                                                                                                                                                                                                                                                                                                                                                                                         |                                                                                                             |
      ||
*** Rails
**** Models
     | what   | $ | ...         |
     |--------+---+-------------|
     | Models |   | Camel-Cased |
     |        |   |             |

**** Cli
***** Database
      | what     | how                                                                    | desc                                              |
      |----------+------------------------------------------------------------------------+---------------------------------------------------|
      | database | â€“d or --database=                                                      | use the database management system of your choice |
      |          | db:create:all                                                          |                                                   |
      |          | db:create                                                              |                                                   |
      |          | dbconsole                                                              |                                                   |
      |          | db:migrate                                                             |                                                   |
      |          | new <name>                                                             |                                                   |
      | models   | generate model <Name>                                                  |                                                   |
      |          | destroy controller articles                                            |                                                   |
      |          | rails destroy model Artile                                             |                                                   |
      |          | rails db:rollback                                                      |                                                   |
      |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |

***** Models
      | what     | how                                                                    | desc                                              |
      |----------+------------------------------------------------------------------------+---------------------------------------------------|
      | models   | generate model <Name>                                                  |                                                   |
      |          | destroy controller articles                                            |                                                   |
      |          | rails destroy model Artile                                             |                                                   |
      |          | rails db:rollback                                                      |                                                   |
      |          | generate scaffold Article title:string body:text published_at:datetime |                                                   |
***** ENV
      |   |                      |   |
      |---+----------------------+---|
      |   | RAILS_ENV=production |   |

** Concepts
*** Iterator
    - is a method
    - it start and finish in the same call
*** Methods
**** Methods chaining
     creates a new object at it chains
     #+begin_src ruby
     puts animals.select {Â¦nÂ¦ n[0] < 'M' }.map(&:upcase).join(", ")
     #+end_src
*** Enumerator
    - is an object
    - chaining
    - block based
    - method attachment (enum_for)
    - un-overriding of methods in Enumerable
    - maintain state
    - is an enumerable object
    - can add enumerability to objects
    - can stop and resume collection cycling
** Instructions
*** Rbenv
    rbenv global 2.3.0 && rbenv rehash
* Shell Scripts
** GNU Bash
*** Features
**** read
**** shift
     shift: shift cli args to next right
**** <<<
     here-string, give a pre-made string of text to a program
**** >&2
**** shopt
**** options
***** --init-file
      use alternative init file
***** -c
      run command and arguments
**** man
     - bash-builtins: describe bash built in features
**** >
     echo 'asd' > temp  | create a file or overwrite existent one
**** >>
     echo 'asd' >> temp | create a file or append to end of existent one
**** << EOF > OEF
     here documents
**** <<<
     here-string
*** Tips
    #+begin_src shell-script
    #  get word after $char in string $var
    ${var##*char}

    # return s
    ${var%sub}

    # variable inline assignment
    var=$(test && echo "A" || echo "B")

    # variable inline assignment numeric    |
    (( a = b==5 ? c : d )) or let a=b==5?c:d;

    # return arguments of function as array |
    $@
						 |                                       |

    #+end_src

*** Resources
    - http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html#toc6

    - https://bash.cyberciti.biz/guide/Main_Page

    - https://wiki.bash-hackers.org

    - https://explainshell.com/
**** Bash Articles
     https://wiki.bash-hackers.org/syntax/arrays

     https://phoxis.org/2010/03/14/read-multiple-arg-bash-script/

     https://likegeeks.com/linux-command-line-tricks/

     https://linuxize.com/post/bash-while-loop/

     https://www.linuxjournal.com/content/return-values-bash-functions

     https://natelandau.com/bash-scripting-utilities/

**** Bash Quick Tutorial
     #+BEGIN_SRC shell-script
     # Check if string contains a sub-string.
     if [[ "$var" == *sub_string* ]]; then
	 printf '%s\n' "sub_string is in var."
     fi

     # Inverse (substring not in string).
     if [[ "$var" != *sub_string* ]]; then
	 printf '%s\n' "sub_string is not in var."
     fi

     # This works for arrays too!
     if [[ "${arr[*]}" == *sub_string* ]]; then
	 printf '%s\n' "sub_string is in array."
     fi

     # Check if string starts with sub-string.
     if [[ "$var" == sub_string* ]]; then
	 printf '%s\n' "var starts with sub_string."
     fi

     # Inverse (var doesn't start with sub_string).
     if [[ "$var" != sub_string* ]]; then
	 printf '%s\n' "var does not start with sub_string."
     fi

     # Check if string ends with sub-string.
     if [[ "$var" == *sub_string ]]; then
	 printf '%s\n' "var ends with sub_string."
     fi

     # Inverse (var doesn't start with sub_string).
     if [[ "$var" != *sub_string ]]; then
	 printf '%s\n' "var does not end with sub_string."
     fi

     # Variables
     Assign and access a variable using a variable.

     hello_world="test"

     # Create the variable name.
     var1="world"
     var2="hello_${var1}"

     # Print the value of the variable name stored in 'hello_$var1'.
     printf '%s\n' "${!var2}"

     # Loop over a range of numbers.
     # Loop from 0-100 (no variable support).
     for i in {0..100}; do
	 printf '%s\n' "$i"
     done

     # Loop over a variable range of numbers.

     # Don't use seq.

     # Loop from 0-VAR.
     VAR=50
     for ((i=0;i<=VAR;i++)); do
	 printf '%s\n' "$i"
     done

     # Loop over an array.

     arr=(apples oranges tomatoes)

     # Just elements.
     for element in "${arr[@]}"; do
	 printf '%s\n' "$element"
     done

     # Loop over an array with an index.

     arr=(apples oranges tomatoes)

     # Elements and index.
     for i in "${!arr[@]}"; do
	 printf '%s\n' "${arr[$i]}"
     done

     # Alternative method.
     for ((i=0;i<${#arr[@]};i++)); do
	 printf '%s\n' "${arr[$i]}"
     done

     # Loop over the contents of a file.

     while read -r line; do
	 printf '%s\n' "$line"
     done < "file"

     # Loop over files and directories.

     # Donâ€™t use ls.

     # Greedy example.
     for file in *; do
	 printf '%s\n' "$file"
     done

     # PNG files in dir.
     for file in ~/Pictures/*.png; do
	 printf '%s\n' "$file"
     done

     # Iterate over directories.
     for dir in ~/Downloads/*/; do
	 printf '%s\n' "$dir"
     done

     # Iterate recursively.
     shopt -s globstar
     for file in ~/Pictures/**/*; do
	 printf '%s\n' "$file"
     done
     shopt -u globstar

     # File handling
     # Read a file to a string.

     # Alternative to the cat command.

     file_data="$(<"file")"

     # Read a file to an array (by line).

     # Alternative to the cat command.

     # Bash <4
     IFS=$'\n' read -d "" -ra file_data < "file"

     # Bash 4+
     mapfile -t file_data < "file"

     # Split a string on a delimiter. string="1,2,3"
     # To multiple variables.
     IFS=, read -r var1 var2 var3 <<< "$string"

     # To an array.
     IFSA=, read -ra vars <<< "$string"

     # Create an empty file.

     # Alternative to touch.

     # Shortest.
     > file
     :> file

     # Longer alternatives:
     echo -n > file
     printf '' > file

     # Arithmetic
     # Simpler syntax to set variables.

     # Simple math
     ((var=1+2))

     # Decrement/Increment variable
     ((var++))
     ((var--))
     ((var+=1))
     ((var-=1))

     # Using variables
     ((var=var2*arr[2]))

     # Ternary tests.

     # Set the value of var to var2 if var2 is greater than var.
     # var: variable to set.
     # var2>var: Condition to test.
     # ?var2: If the test succeeds.
     # :var: If the test fails.
     ((var=var2>var?var2:var))

     # Shorter for loop syntax.

     # Tiny C Style.
     for((;i++<10;)){ echo "$i";}

	# Undocumented method.
	for i in {1..10};{ echo "$i";}

		 # Expansion.
		 for i in {1..10}; do echo "$i"; done

		 # C Style.
		 for((i=0;i<=10;i++)); do echo "$i"; done

		 # Shorter infinite loops.

		 # Normal method
		 while :; do echo hi; done

		 # Shorter
		 for((;;)){ echo hi;}

		     # Shorter function declaration.

		     # Normal method
		     f(){ echo hi;}

		     # Using a subshell
		     f()(echo hi)

		     # Using arithmetic
		     # You can use this to assign integer values.
		     # Example: f a=1
		     #          f a++
		     f()(($1))

		     # Using tests, loops etc.
		     # NOTE: You can also use â€˜whileâ€™, â€˜untilâ€™, â€˜caseâ€™, â€˜(())â€™, â€˜[[]]â€™.
		     f()if true; then echo "$1"; fi
		     f()for i in "$@"; do echo "$i"; done

		     Shorter if syntax.

		     # One line
		     # Note: The 3rd statement may run when the 1st is true
		     [[ "$var" == hello ]] && echo hi || echo bye
		     [[ "$var" == hello ]] && { echo hi; echo there; } || echo bye

		     # Multi line (no else, single statement)
		     # Note: The exit status may not be the same as with an if statement
		     [[ "$var" == hello ]] && \
			 echo hi

		     # Multi line (no else)
		     [[ "$var" == hello ]] && {
			 echo hi
			 # ...
		     }

		     # Simpler case statement to set variable.

		     # We can use the : builtin to avoid repeating variable= in a case statement. The $_ variable stores the last argument of the last successful command. : always succeeds so we can abuse it to store the variable value.

		     # Example snippet from Neofetch.
		     case "$(uname)" in
			 "Linux" | "GNU"*)
			     : "Linux"
			     ;;

			 ,*"BSD" | "DragonFly" | "Bitrig")
			     : "BSD"
			     ;;

			 "CYGWIN"* | "MSYS"* | "MINGW"*)
			     : "Windows"
			     ;;

			 ,*)
			     printf '%s\n' "Unknown OS detected, aborting..." >&2
			     exit 1
			     ;;
		     esac

		     # Finally, set the variable.
		     os="$_"

		     #     Internal Variables

		     #     NOTE: This list does not include every internal variable (You can help by adding a missing entry!).

		     #     For a complete list, see: http://tldp.org/LDP/abs/html/internalvariables.html
		     # Get the location to the bash binary.

		     "$BASH"

		     # Get the version of the current running bash process.

		     # As a string.
		     "$BASH_VERSION"

		     # As an array.
		     "${BASH_VERSINFO[@]}"

		     # Open the user's preferred text editor.

		     "$EDITOR" "$file"

		     # NOTE: This variable may be empty, set a fallback value.
		     "${EDITOR:-vi}" "$file"

		     Get the name of the current function.

		     # Current function.
		     "${FUNCNAME[0]}"

		     # Parent function.
		     "${FUNCNAME[1]}"

		     # So on and so forth.
		     "${FUNCNAME[2]}"
		     "${FUNCNAME[3]}"

		     # All functions including parents.
		     "${FUNCNAME[@]}"

		     Get the host-name of the system.

		     "$HOSTNAME"

		     # NOTE: This variable may be empty.
		     # Optionally set a fallback to the hostname command.
		     "${HOSTNAME:-$(hostname)}"

		     # Get the architecture of the Operating System.

		     "$HOSTTYPE"

		     # Get the name of the Operating System / Kernel.

		     # This can be used to add conditional support for different Operating Systems without needing to call uname.

		     "$OSTYPE"

		     # Get the current working directory.

		     # This is an alternative to the pwd built-in.

		     "$PWD"

		     # Get the number of seconds the script has been running.

		     # Check if a program is in the user's PATH.

		     # There are 3 ways to do this and you can use either of
		     # these in the same way.
		     type -p executable_name &>/dev/null
		     hash executable_name &>/dev/null
		     command -v executable_name &>/dev/null

		     # As a test.
		     if type -p executable_name &>/dev/null; then
			 # Program is in PATH.
		     fi

		     # Inverse.
		     if ! type -p executable_name &>/dev/null; then
			 # Program is not in PATH.
		     fi

		     # Example (Exit early if program isn't installed).
		     if ! type -p convert &>/dev/null; then
			 printf '%s\n' "error: convert isn't installed, exiting..."
			 exit 1
		     fi

		     "$SECONDS"

		     # Bypass shell aliases.

		     # alias
		     ls

		     # command
		     # shellcheck disable=SC1001
		     \ls

		     # Bypass shell functions.

		     # function
		     ls

		     # command
		     command ls
     #+END_SRC
** Others
*** Fish
*** Zsh
*** TCSH
** Posix
*** Shell Commands
    |         |                                                                 |
    |---------+-----------------------------------------------------------------|
    | sudo !! | run last command as sudo                                        |
    | xargs   |                                                                 |
    | set -e  | -e  Exit immediately if a command exits with a non-zero status. |
* Yaml
** trais
*** pair = key: value
*** | =  pipe
*** > = pipe
*** indentaion = new objects
*** - = list
*** # = commentary
*** --- = multi archive
*** {{ var }} = use variables
*** quotes
     "barri go ta" or
     barri go ta
** resources
   https://yamllint.com
* Emacs Lisp
** Progresso
*** Livros
    | Livros           | Capitulo | em | tarde | revisao |
    |------------------+----------+----+-------+---------|
    | ANSI Common Lisp |          |    |       |         |
    |                  |          |    |       |         |

*** LDC
    | Source Code | folder | file | @ |
    |-------------+--------+------+---|
    | sbcl        |        |      |   |
    | asdf        |        |      |   |
    | alexandria  |        |      |   |
* German
** Fortschritt
    | Buch                        | kapitel | @                           | @later | revision |
    |-----------------------------+---------+-----------------------------+--------+----------|
    | The Art of Unix programming |         | The Lessons of Unix History |        |          |
