#!/usr/bin/env ruby

# frozen_string_literal: true

# Manage System Volume.
class Volume
  STEP = 3

  attr_reader :state
  attr_accessor :info

  def initialize(state)
    @state = state.to_sym if state
    @info = SoundManager.new.info
  end

  def states
    {
      up: '+',
      down: '-',
      toggle: ''
    }
  end

  # * MODES

  def toggle
    {
      pactl: pactl_toggle,
      amixer: amixer_toggle,
      mixer: mixer_toggle
    }
  end

  def updown
    {
      pactl: pactl_updown,
      amixer: amixer_updown,
      mixer: mixer_updown
    }
  end

  def mode
    {
      toggle: toggle[info.name],
      up: updown[info.name],
      down: updown[info.name]
    }
  end

  def final_command
    mode[state]
  end

  def run
    return unless %i[up down toggle].include? state

    system final_command
  end
end

# Sound manager information
class SoundManager
  attr_reader :utils

  def initialize(utils)
    @utils = utils
  end

  # Find the running Pactl sink
  def pactl_sink
    `pactl list sinks`.split('Sink #').each do |sink|
      sink_id = sink[0]
      return sink_id if sink.include? 'State: RUNNING'
    end
  end

  def sink
    {
      pactl: pactl_sink
    }
  end

  def sound_managers
    %w[pactl amixer mixer]
  end

  def sound_manager
    sound_managers.first { |manager| utils.which?(manager) }.to_sym
  end

  ALL = Struct.new(:name, :sink)
  def info
    ALL.new(sound_manager, sink[sound_manager])
  end

  def to_s
    "#{sound_manager} #{sink}"
  end
end

# s
class Pactl
  def pactl
    {
      name: 'pactl',
      toggle: "set-sink-mute #{info.sink} toggle",
      updown: "set-sink-volume #{info.sink} #{states[state]}#{STEP}%"
    }
  end

  def pactl_toggle
    [pactl[:name], pactl[:toggle]].join(' ')
  end

  def pactl_updown
    [pactl[:name], pactl[:updown]].join(' ')
  end
end

# as
class Amixer
  def amixer
    {
      name: 'amixer',
      toggle: '-q sset Master toggle',
      updown: "set Master #{STEP}%#{states[state]}"
    }
  end

  def amixer_toggle
    [amixer[:name], amixer[:toggle]].join(' ')
  end

  def amixer_updown
    [amixer[:name], amixer[:updown]].join(' ')
  end
end

# BSD MIXER
class Mixer
  def mixer
    {
      name: 'mixer',
      toggle: '',
      updown: "mixer vol #{states[state]}#{STEP}"
    }
  end

  def mixer_toggle
    [mixer[:name], mixer[:toggle]].join(' ')
  end

  def mixer_updown
    [mixer[:name], mixer[:updown]].join(' ')
  end

end

# * UTILS

def which?(executable)
  ENV['PATH'].split(File::PATH_SEPARATOR).any? do |directory|
    File.executable?(File.join(directory, executable.to_s))
  end
end

# * SOUND MANAGERS

def sound_managers
  %w[pactl amixer mixer]
end

def sound_manager
  sound_managers.first { |manager| utils.which?(manager) }.to_sym
end

# * ARGUMENTS
# * RUN
